--- File: .gitignore ---

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# clerk configuration (can include secrets)
/.clerk/

# Playwright
node_modules/
/test-results/
/playwright-report/
/blob-report/
/playwright/.cache/

# Supabase
supabase/.temp/
supabase/.temp/*

# Database backups
/backups/

--- File: .prettierrc ---

{
  "endOfLine": "lf",
  "printWidth": 200,
  "semi": false,
  "singleQuote": false,
  "tabWidth": 2,
  "trailingComma": "es5"
}


--- File: README.md ---

# VibeSwipe

Find Your Next Vibe
Swipe through project ideas, vibe the ones you love.

## TODO

Generate lots of ideas

*Categories*

Productivity Tools, 
Health & Wellness, 
Education & Learning, 
Social Impact, 
Entertainment,
Gaming, 
Finances, 
Environmental,
Sustainability, 
Creative Tools, 
Smart Home, 
Travel,
Adventure, 
Food & Cooking, 
Fitness,
Sports, 
Music,
Audio, 
Developer Tools, 
Community,
Social Media, 
Personal Growth, 
Pet Care, 
Remote Work, 
Data Visualization,
Data Analytics,
Language Exchange,
Cultures, 
Mental Health,
Mindfulness, 
Urban Gardening, 
Digital Art, 
Indie Game, 
Knowledge Management, 
Habit Tracking & Behavior Change, 
Voice Technology, 
Sleeping & Dreams, 
Genealogy & Family History, 
Weather, 
Climate Data, 
Handcrafters & Makers, 
Biometric Data, 
Local Food Supply Chain,
Photography, 
Craft Beer, 
Board Game Design, 
Plant Care, 
Books, 
Comic Book, 
RPG Campaign Management,
Memes,
Jokes,
Party Games,
Absurd Situation Simulator,
Simulator, 
Karaoke & Lip Sync Battles, 
Dance Moves, 
Weird Facts & Trivia, 
Emojis, 
WebGL & 3D Graphics, 
Text-to-Speech & Voice Synthesis, 
Generative Art & Creative Coding, 
WebRTC & Real-time Communication, 
Augmented Reality Filters, 
Procedural Music Generation,

--- File: app/_actions/ban-user.ts ---

'use server'

import { auth, clerkClient } from "@clerk/nextjs/server"
import { revalidatePath } from "next/cache"
import { isAdmin } from "@/lib/auth-utils"

export async function banUser(userId: string, reason?: string) {
  try {
    // Get the current user's ID
    const { userId: adminId } = await auth()
    
    if (!adminId) {
      throw new Error("Not authenticated")
    }

    // Verify the user is an admin
    const isUserAdmin = await isAdmin()
    if (!isUserAdmin) {
      throw new Error("Not authorized")
    }

    // Initialize Clerk client
    const client = await clerkClient()

    // Get current user to check if they're banned
    const user = await client.users.getUser(userId)
    const isBanned = user.banned

    if (isBanned) {
      // Unban the user
      await client.users.unbanUser(userId)
    } else {
      // Ban the user and store reason in metadata
      await client.users.banUser(userId)
      
      // Store the ban reason in metadata if provided
      if (reason) {
        await client.users.updateUser(userId, {
          publicMetadata: {
            ...user.publicMetadata,
            banReason: reason
          }
        })
      }
    }

    // Revalidate the admin users page
    revalidatePath("/admin/users")

    return { success: true }
  } catch (error) {
    console.error("Error managing user ban status:", error)
    return { success: false, error: (error as Error).message }
  }
} 

--- File: app/_actions/contact.ts ---

"use server"

import { z } from "zod"
import sgMail from "@sendgrid/mail"
import { verifyCaptcha } from "./verifyCaptcha"

const contactFormSchema = z.object({
  name: z.string().min(1, "Name is required"),
  email: z.string().email("Invalid email address"),
  message: z.string().min(1, "Message is required"),
  subject: z.string().default("Contact Form Submission"),
  captchaToken: z.string().optional(),
})

type ContactFormData = z.infer<typeof contactFormSchema>

export async function sendContactEmail(data: ContactFormData) {
  try {
    // Validate the input data
    const validatedData = contactFormSchema.parse(data)

    // Verify captcha if token is provided
    if (validatedData.captchaToken) {
      try {
        await verifyCaptcha(validatedData.captchaToken)
      } catch (error) {
        console.error("Error verifying captcha:", error)
        return {
          success: false as const,
          error: "reCAPTCHA verification failed. Please try again.",
        }
      }
    }

    // Configure SendGrid
    sgMail.setApiKey(process.env.SENDGRID_API_KEY!)

    // Prepare the email
    const msg = {
      to: process.env.CONTACT_EMAIL!,
      from: process.env.SENDGRID_SENDER!, // Must be verified sender in SendGrid
      replyTo: validatedData.email,
      subject: validatedData.subject,
      text: `Name: ${validatedData.name}\nEmail: ${validatedData.email}\n\nMessage:\n${validatedData.message}`,
      html: `
        <h2>New Contact Form Submission</h2>
        <p><strong>Name:</strong> ${validatedData.name}</p>
        <p><strong>Email:</strong> ${validatedData.email}</p>
        <p><strong>Message:</strong></p>
        <p>${validatedData.message.replace(/\n/g, "<br>")}</p>
      `,
    }

    // Send the email
    await sgMail.send(msg)

    return {
      success: true as const,
    }
  } catch (error) {
    console.error("Error sending contact email:", error)
    return {
      success: false as const,
      error: error instanceof Error ? error.message : "Failed to send email",
    }
  }
} 

--- File: app/_actions/mailing-list.ts ---

"use server"

import { auth } from "@clerk/nextjs/server"
import { MailingListPreferences } from "@/types/mailing-list"
import sgMail from "@sendgrid/mail"
import { revalidatePath } from "next/cache"
import {
  addMailingListSubscription,
  removeMailingListSubscription,
  updateMailingListPreferences,
  getMailingListSubscriptions
} from "@/lib/services/mailing-list"

// Configure SendGrid and track availability
let isEmailServiceConfigured = false

if (process.env.SENDGRID_API_KEY) {
  sgMail.setApiKey(process.env.SENDGRID_API_KEY)
  isEmailServiceConfigured = true
} else {
  console.warn("SENDGRID_API_KEY not found. Email service will be disabled.")
}

// Helper to check if email service is available
function isEmailServiceAvailable() {
  return isEmailServiceConfigured
}

export async function subscribe(data: {
  userId: string
  email: string
  name: string | null
  preferences: MailingListPreferences
}) {
  try {
    const result = await addMailingListSubscription({
      ...data,
      name: data.name ?? undefined,
    })
    revalidatePath("/mailing-list")
    return {
      success: !!result,
      emailServiceAvailable: isEmailServiceAvailable()
    }
  } catch (error) {
    console.error("Error in subscribe:", error)
    return {
      success: false,
      error: error instanceof Error ? error.message : "Failed to subscribe",
      emailServiceAvailable: isEmailServiceAvailable()
    }
  }
}

export async function unsubscribe(email: string) {
  try {
    const result = await removeMailingListSubscription(email)
    revalidatePath("/mailing-list")
    return {
      success: result,
      emailServiceAvailable: isEmailServiceAvailable()
    }
  } catch (error) {
    console.error("Error in unsubscribe:", error)
    return {
      success: false,
      error: error instanceof Error ? error.message : "Failed to unsubscribe",
      emailServiceAvailable: isEmailServiceAvailable()
    }
  }
}

export async function updatePreferences({ preferences }: { preferences: MailingListPreferences }) {
  try {
    const { userId } = await auth()
    if (!userId) throw new Error('Not authenticated')
    const result = await updateMailingListPreferences(userId, preferences)
    revalidatePath("/mailing-list")
    return {
      success: result,
      emailServiceAvailable: isEmailServiceAvailable()
    }
  } catch (error) {
    console.error("Error in updatePreferences:", error)
    return {
      success: false,
      error: error instanceof Error ? error.message : "Failed to update preferences",
      emailServiceAvailable: isEmailServiceAvailable()
    }
  }
}

export async function getSubscription() {
  try {
    const { userId } = await auth()
    if (!userId) {
      return {
        success: true as const,
        data: null,
      }
    }
    const subscriptions = await getMailingListSubscriptions()
    const sub = subscriptions.find(s => s.userId === userId && s.unsubscribedAt === null)
    return {
      success: true as const,
      data: sub || null,
    }
  } catch (error) {
    console.error("Error in getSubscription:", error)
    return {
      success: false as const,
      error: error instanceof Error ? error.message : "Failed to get subscription",
    }
  }
} 

--- File: app/_actions/profile.ts ---

"use server"

import { clerkClient } from "@clerk/nextjs/server"
import { revalidatePath } from "next/cache"

interface Link {
  label: string
  url: string
}

interface UpdateProfileData {
  firstName: string
  lastName: string
  bio: string
  website?: string
  twitter?: string
  github?: string
  customLinks?: Link[]
}

export async function updateProfile(userId: string, data: UpdateProfileData) {
  try {
    const client = await clerkClient()
    await client.users.updateUser(userId, {
      firstName: data.firstName || "",
      lastName: data.lastName || "",
      unsafeMetadata: {
        bio: data.bio || "",
        website: data.website || "",
        twitter: data.twitter || "",
        github: data.github || "",
        customLinks: data.customLinks || [],
      },
    })

    return { success: true }
  } catch (error) {
    console.error("Error updating profile:", error)
    return { success: false, error: "Failed to update profile" }
  }
}

export async function refreshProfile(path: string) {
  revalidatePath(path)
} 

--- File: app/_actions/save-idea-swipe.ts ---

"use server"

import { recordIdeaSwipe } from "@/lib/services/ideas";

export async function saveIdeaSwipe({
  userId,
  ideaId,
  liked,
  createdAt,
}: {
  userId: string;
  ideaId: string;
  liked: boolean;
  createdAt: number;
}) {
  try {
    const result = await recordIdeaSwipe({ userId, ideaId, liked, createdAt });
    return { success: true, id: result };
  } catch (error) {
    return { success: false, error: (error as Error).message };
  }
} 

--- File: app/_actions/track-visit.ts ---

'use server'

import { auth } from "@clerk/nextjs/server"
import { headers } from "next/headers"
import { validRoutes } from "@/lib/generated/routes"
import { ConvexHttpClient } from "convex/browser"
import { api } from "@/convex/_generated/api"

// Initialize Convex HTTP client
const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!)

// Check if the user agent is from a common legitimate browser
function isValidBrowser(userAgent: string | null): boolean {
  if (!userAgent) return false
  
  const commonBrowsers = [
    'Chrome',
    'Firefox',
    'Safari',
    'Edge',
    'Opera',
    'Edg',  // Edge's newer user agent
    'OPR',  // Opera's newer user agent
  ]
  
  const lowerUA = userAgent.toLowerCase()
  return commonBrowsers.some(browser => 
    lowerUA.includes(browser.toLowerCase())
  )
}

// Check if a path exists in our app
function isValidPath(path: string): boolean {
  // Special case for root path
  if (path === '/') {
    return true
  }

  // Normalize the path by removing leading slash
  const normalizedPath = path.startsWith('/') ? path.slice(1) : path
  
  // Check exact match first
  if (validRoutes.has(normalizedPath)) {
    return true
  }

  // Check if the path matches any dynamic routes
  // Split the path into segments
  const segments = normalizedPath.split('/')
  
  // Try matching each segment level
  let currentPath = ''
  for (const segment of segments) {
    currentPath = currentPath + (currentPath === '' ? segment : '/' + segment)
    // Check if there's a wildcard route at this level
    if (validRoutes.has(currentPath + '/*')) {
      return true
    }
  }

  return false
}

export async function trackVisit(path: string) {
  try {
    // Get the current user's ID if they're authenticated
    const { userId } = await auth()
    
    // Get headers for user agent and referrer
    const headersList = await headers()
    const userAgent = headersList.get('user-agent')
    const referrer = headersList.get('referer') // Note: 'referer' is the standard header name
    
    // Skip recording visits from non-browser user agents
    if (!isValidBrowser(userAgent)) {
      return { success: true }
    }

    // Skip recording visits to invalid paths
    if (!isValidPath(path)) {
      return { success: true }
    }

    // Record the visit using Convex
    await convex.mutation(api.visits.recordVisit, {
      path,
      userId: userId || null,
      metadata: {
        userAgent: userAgent || null,
        referrer: referrer || null,
      }
    })

    return { success: true }
  } catch (error) {
    console.error('Error tracking visit:', error)
    return { success: false, error: (error as Error).message }
  }
} 

--- File: app/_actions/verifyCaptcha.ts ---

export async function verifyCaptcha(captchaToken: string) {
  "use server";

  const RECAPTCHA_SECRET_KEY = process.env.RECAPTCHA_SECRET_KEY;

  const response = await fetch(`https://www.google.com/recaptcha/api/siteverify`, {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
    },
    body: `secret=${RECAPTCHA_SECRET_KEY}&response=${captchaToken}`,
  });

  const captchaValidation = await response.json();
  if (captchaValidation.success) {
    return true;
  } else {
    throw new Error("reCAPTCHA validation failed");
  }
}

--- File: app/_hooks/useGenerateImage.ts ---

import { useState } from "react"

interface ImageResponse {
  imageUrl: string
  success: boolean
  error?: string
}

export function useGenerateImage() {
  const [error, setError] = useState<string>("")
  const [isLoading, setIsLoading] = useState(false)
  const [imageUrl, setImageUrl] = useState<string>("")

  const generate = async (prompt: string) => {
    setError("")
    setIsLoading(true)
    try {
      const response = await fetch("/api/ai/generate/image", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          input: prompt,
          userId: "demo", // Using a demo folder for the AI demo
          deckId: "ai-demo" // Using a fixed demo deck ID
        }),
      })

      const data: ImageResponse = await response.json()

      if (!data.success) {
        throw new Error(data.error || "Failed to generate image")
      }

      setImageUrl(data.imageUrl)
    } catch (err) {
      console.error("Error generating image:", err)
      setError(err instanceof Error ? err.message : "Failed to generate image")
    } finally {
      setIsLoading(false)
    }
  }

  return {
    imageUrl,
    isLoading,
    error,
    generate,
  }
} 

--- File: app/_hooks/useGenerateObject.ts ---

import { experimental_useObject as useObject } from "@ai-sdk/react"
import { z } from "zod"
import { useState } from "react"

// Example schema for a person
const personSchema = z.object({
  name: z.string().describe("The person's full name"),
  age: z.number().describe("The person's age"),
  occupation: z.string().describe("The person's job or profession"),
  interests: z.array(z.string()).describe("List of the person's hobbies and interests"),
  contact: z.object({
    email: z.string().email().describe("The person's email address"),
    phone: z.string().describe("The person's phone number"),
  }).describe("Contact information"),
})

type Person = z.infer<typeof personSchema>

export function useGenerateObject() {
  const [error, setError] = useState<string>("")
  const { object, isLoading, submit } = useObject<Person>({
    api: "/api/ai/generate/object",
    schema: personSchema,
  })

  const generate = async (prompt: string) => {
    setError("")
    try {
      await submit({
        schema: {
          type: "object",
          properties: {
            name: { type: "string" },
            age: { type: "number" },
            occupation: { type: "string" },
            interests: { 
              type: "array",
              items: { type: "string" }
            },
            contact: {
              type: "object",
              properties: {
                email: { type: "string" },
                phone: { type: "string" }
              }
            }
          }
        },
        prompt,
      })
    } catch (err) {
      console.error("Error generating object:", err)
      setError("Failed to generate structured data")
    }
  }

  return {
    object,
    isLoading,
    error,
    generate,
  }
} 

--- File: app/_hooks/useGenerateStrings.ts ---

import { experimental_useObject as useObject } from '@ai-sdk/react';
import { z } from "zod"
import { useState, useEffect, useRef } from "react"

const responseSchema = z.object({
  strings: z.array(z.string()),
})

type ResponseType = z.infer<typeof responseSchema>

export function useGenerateStrings() {
  const [strings, setStrings] = useState<string[]>([])
  const [error, setError] = useState<string>("")
  const promiseRef = useRef<{
    resolve: (value: string[]) => void;
    reject: (reason?: Error | unknown) => void;
  } | null>(null);

  const {
    object: response,
    isLoading,
    submit,
    error: objectError,
  } = useObject<ResponseType>({
    api: "/api/ai/generate/strings",
    schema: responseSchema,
  })

  useEffect(() => {
    if (objectError) {
      console.error("useGenerateStrings error:", objectError)
      setError("An error occurred while generating strings.")
      if (promiseRef.current) {
        promiseRef.current.reject(objectError);
        promiseRef.current = null;
      }
    }
  }, [objectError])

  useEffect(() => {
    if (response?.strings) {
      const validStrings = response.strings.filter((s): s is string => typeof s === "string")
      setStrings(validStrings)
    }
  }, [response])

  // Effect to resolve the promise when loading completes
  useEffect(() => {
    // If we were loading and now we're not, and we have a promise to resolve
    if (!isLoading && promiseRef.current && response?.strings) {
      const validStrings = response.strings.filter((s): s is string => typeof s === "string")
      promiseRef.current.resolve(validStrings);
      promiseRef.current = null;
    }
  }, [isLoading, response]);

  const generate = async (prompt: string, count: number = 6) => {
    setError("")
    setStrings([])
    
    return new Promise<string[]>((resolve, reject) => {
      try {
        // Store the promise callbacks
        promiseRef.current = { resolve, reject };
        
        // Submit the request
        submit({
          prompt,
          count,
        })
        
        // Set a timeout of 30 seconds
        const timeoutId = setTimeout(() => {
          if (promiseRef.current) {
            promiseRef.current.reject(new Error("Timed out waiting for string generation"));
            promiseRef.current = null;
          }
        }, 30000);
        
        // Clean up timeout if component unmounts
        return () => clearTimeout(timeoutId);
      } catch (error) {
        console.error("Error submitting string generation:", error)
        setError("An error occurred while generating strings.")
        reject(error);
        promiseRef.current = null;
      }
    })
  }

  return {
    strings,
    isLoading,
    error,
    generate,
  }
}


--- File: app/_hooks/useGenerateText.ts ---

"use client"
import { useChat } from "@ai-sdk/react"

export function useGenerateText() {
  const { messages, input, handleInputChange, handleSubmit } = useChat({
    api: "/api/ai/generate/text",
  })

  const streamText = async (prompt: string, onUpdate: (output: string) => void) => {
    
    const response = await fetch("/api/ai/generate/text", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ input: prompt + " - Use smart quotes and avoid using backslashes" }),
    })

    if (!response.ok) {
      throw new Error(response.statusText)
    }

    const data = response.body
    if (!data) {
      return
    }

    const reader = data.getReader()
    const decoder = new TextDecoder()
    let done = false
    let accumulatedResponse = ""

    while (!done) {
      const { value, done: doneReading } = await reader.read()
      done = doneReading
      const chunkValue = decoder.decode(value)

      // Handle chunks with "0:" prefix
      const chunks = chunkValue.split(/(?=\d+:"|[ed]:"|f:)/).filter(Boolean)

      for (const chunk of chunks) {
        // Skip metadata chunks (including messageId)
        if (chunk.startsWith("f:") || chunk.startsWith("e:") || chunk.startsWith("d:")) {
          continue
        }

        if (chunk.startsWith('0:"')) {
          // Extract content between quotes for "0:" prefixed chunks
          const content = chunk.match(/0:"([^"]*)"/)
          if (content) {
            // Replace literal \n\n with actual newlines and clean up backslashed quotes
            accumulatedResponse += content[1]
              .replace(/\\n\\n/g, "\n\n")
              .replace(/\\"/g, '"')
              .replace(/\\\\/g, "\\")
          }
        } else {
          // Fallback: try to extract any quoted content
          const content = chunk.match(/"([^"]*)"/)
          if (content) {
            // Replace literal \n\n with actual newlines and clean up backslashed quotes
            accumulatedResponse += content[1]
              .replace(/\\n\\n/g, "\n\n")
              .replace(/\\"/g, '"')
              .replace(/\\\\/g, "\\")
          } else {
            // Replace literal \n\n with actual newlines and clean up backslashed quotes
            accumulatedResponse += chunk
              .replace(/\\n\\n/g, "\n\n")
              .replace(/\\"/g, '"')
              .replace(/\\\\/g, "\\")
          }
        }
      }
      onUpdate(accumulatedResponse)
    }

    return accumulatedResponse
  }

  return {
    messages,
    input,
    handleInputChange,
    handleSubmit,
    streamText,
  }
}

--- File: app/about/page.tsx ---

import { Heading } from "@/components/typography/heading"
export default function AboutPage() {
  return (
    <div className="container py-12">
      <div className="mx-auto max-w-4xl">
        <div className="mb-12 text-center">
          <Heading variant="h2" as="h1">
            About
          </Heading>
        </div>

        <div className="mb-8 space-y-6">
          <p>Replace this with your about page content...</p>
        </div>
      </div>
    </div>
  )
}


--- File: app/account/[[...rest]]/components/account-profile.tsx ---

"use client"

import { UserProfile, useUser } from "@clerk/nextjs"
import { BookText } from "lucide-react"
import { BioSection } from "./bio-section"

export function AccountProfile() {
  const { isLoaded, isSignedIn } = useUser()

  if (!isLoaded) {
    return null // or a loading spinner
  }

  if (!isSignedIn) {
    return null // we already handle this case in the parent
  }

  return (
    <UserProfile
      appearance={{
        elements: {
          rootBox: "mx-auto max-w-3xl",
          card: "shadow-none",
        },
      }}
      path="/account"
    >
      <UserProfile.Page label="Bio" url="bio" labelIcon={<BookText className="h-4 w-4" />}>
        <BioSection />
      </UserProfile.Page>
    </UserProfile>
  )
}


--- File: app/account/[[...rest]]/components/bio-section.tsx ---

"use client"

import { useUser } from "@clerk/nextjs"
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"

export function BioSection() {
  const { user } = useUser()
  const [bio, setBio] = useState((user?.unsafeMetadata?.bio as string) || "")
  const [isSaving, setIsSaving] = useState(false)

  const saveBio = async () => {
    if (!user) return
    setIsSaving(true)
    try {
      await user.update({
        unsafeMetadata: {
          ...user.unsafeMetadata,
          bio,
        },
      })
    } catch (error) {
      console.error("Error saving bio:", error)
    }
    setIsSaving(false)
  }

  return (
    <div className="rounded-lg border p-4">
      <h2 className="text-lg font-semibold mb-4">Your Bio</h2>
      <Textarea placeholder="Tell us about yourself..." value={bio} onChange={(e) => setBio(e.target.value)} className="mb-4" rows={4} />
      <Button onClick={saveBio} disabled={isSaving}>
        {isSaving ? "Saving..." : "Save Bio"}
      </Button>
    </div>
  )
}


--- File: app/account/[[...rest]]/page.tsx ---

import { auth } from "@clerk/nextjs/server"
import { Container } from "@/components/ui/container"
import { Card, CardContent } from "@/components/ui/card"
import { SignInButton } from "@clerk/nextjs"
import { Button } from "@/components/ui/button"
import { AccountProfile } from "./components/account-profile"

export default async function AccountPage() {
  const { userId } = await auth()

  if (!userId) {
    return (
      <Container>
        <div className="py-16">
          <Card className="max-w-xl mx-auto">
            <CardContent className="flex flex-col items-center gap-6 py-16">
              <div className="text-center space-y-2">
                <h2 className="text-2xl font-semibold">Sign in to Access Your Account</h2>
                <p className="text-muted-foreground">Create an account or sign in to manage your profile</p>
              </div>
              <SignInButton mode="modal">
                <Button size="lg">Sign in to Continue</Button>
              </SignInButton>
            </CardContent>
          </Card>
        </div>
      </Container>
    )
  }

  return (
    <Container>
      <div className="py-16">
        <AccountProfile />
      </div>
    </Container>
  )
}


--- File: app/admin/analytics/page.tsx ---

import { requireAdmin } from "@/lib/auth-utils"
import { AdminBreadcrumb } from "@/components/nav/admin-breadcrumb"
import { Heading } from "@/components/typography/heading"
import { Card, CardHeader } from "@/components/ui/card"
import { getAllVisits } from "@/lib/services/visits"

function getThirtyDaysAgo() {
  const date = new Date()
  date.setDate(date.getDate() - 30)
  return date
}

export default async function AdminAnalyticsPage() {
  // Check if the user is an admin
  await requireAdmin()

  // Fetch all visits (or use a Convex query to filter by date if available)
  const allVisits = await getAllVisits()
  const thirtyDaysAgo = getThirtyDaysAgo().getTime()

  // Filter visits from the last 30 days
  const analyticsData = allVisits.filter((visit) => visit.createdAt >= thirtyDaysAgo)

  return (
    <div className="container py-8">
      <AdminBreadcrumb items={[{ label: "Analytics" }]} />

      <div className="mb-8">
        <h1 className="text-4xl font-bold">Analytics</h1>
        <p className="text-muted-foreground">View and manage user visits</p>
      </div>

      <div className="grid gap-6">
        {/* Total Visits Card */}
        <Card>
          <CardHeader>
            <Heading variant="h4" className="text-primary">
              Total Visits (30 Days)
            </Heading>
          </CardHeader>
          <div className="px-6">
            <p className="text-3xl font-bold">{analyticsData.length}</p>
          </div>
        </Card>

        {/* Recent Visits Table */}
        <Card>
          <CardHeader>
            <Heading variant="h4" className="text-primary">
              Recent Visits
            </Heading>
          </CardHeader>
          <div className="px-6 pb-6">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left p-2">Path</th>
                    <th className="text-left p-2">Time</th>
                    <th className="text-left p-2">User ID</th>
                    <th className="text-left p-2">Referrer</th>
                  </tr>
                </thead>
                <tbody>
                  {analyticsData.slice(0, 10).map((visit) => (
                    <tr key={visit._id} className="border-b text-sm">
                      <td className="p-2">{visit.path}</td>
                      <td className="p-2">{new Date(visit.createdAt).toLocaleString()}</td>
                      <td className="p-2">{visit.userId || "Anonymous"}</td>
                      <td className="p-2">{visit.metadata?.referrer || "-"}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </Card>
      </div>
    </div>
  )
}


--- File: app/admin/ideas/page.tsx ---

import { Metadata } from "next"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { requireAdmin } from "@/lib/auth-utils"
import { AdminConfigMessage } from "@/components/admin/admin-config-message"
import { DevEnvNotice } from "@/components/admin/dev-env-notice"
import { Heading } from "@/components/typography/heading"
import { IdeasUploader } from "@/components/admin/ideas/ideas-uploader"
import { IdeasTable } from "@/components/admin/ideas/ideas-table"

export const metadata: Metadata = {
  title: "Manage Ideas - Admin Dashboard",
  description: "Import and manage startup ideas",
}

export default async function IdeasAdminPage() {
  const { isAdmin, requiresSetup } = await requireAdmin()
  const isDev = process.env.NODE_ENV === "development"

  if (requiresSetup) {
    return (
      <div className="container max-w-2xl py-8 md:py-12">
        <AdminConfigMessage />
      </div>
    )
  }

  if (!isAdmin) {
    return (
      <div className="container py-8 md:py-12">
        <div className="mx-auto max-w-2xl text-center">
          <Heading variant="h1" className="mb-4">
            Access Denied
          </Heading>
          <p className="text-muted-foreground text-balance mb-8">You don&apos;t have permission to access this page. Please contact an administrator if you believe this is an error.</p>
          {isDev && <DevEnvNotice />}
        </div>
      </div>
    )
  }

  return (
    <div className="container py-8 md:py-12">
      <div className="mx-auto max-w-6xl">
        <Heading variant="h3" className="mb-8 text-center text-primary">
          Manage Ideas
        </Heading>

        <div className="grid gap-8">
          {/* Import Section */}
          <Card>
            <CardHeader>
              <CardTitle>Import Ideas</CardTitle>
              <CardDescription>Upload a JSON file to import new ideas</CardDescription>
            </CardHeader>
            <CardContent>
              <IdeasUploader />
            </CardContent>
          </Card>

          {/* Ideas Table Section */}
          <Card>
            <CardHeader>
              <CardTitle>Current Ideas</CardTitle>
              <CardDescription>View and manage existing ideas</CardDescription>
            </CardHeader>
            <CardContent>
              <IdeasTable />
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}


--- File: app/admin/mailing-list/page.tsx ---

import { requireAdmin } from "@/lib/auth-utils"
import { AdminBreadcrumb } from "@/components/nav/admin-breadcrumb"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { MailingListSubscriberTable } from "@/components/admin/mailing-list/mailing-list-subscriber-table"
import { getMailingListSubscriptions } from "@/lib/services/mailing-list"
import { Doc } from "@/convex/_generated/dataModel"

type ConvexSubscription = Doc<"mailing_list_subscriptions">

function serializeForClient(subscriber: ConvexSubscription) {
  return {
    id: subscriber._id,
    userId: subscriber.userId,
    email: subscriber.email,
    name: subscriber.name ?? null,
    preferences: subscriber.preferences,
    subscribedAt: new Date(subscriber.subscribedAt).toISOString(),
    unsubscribedAt: subscriber.unsubscribedAt ? new Date(subscriber.unsubscribedAt).toISOString() : null,
    createdAt: new Date(subscriber.createdAt).toISOString(),
    updatedAt: new Date(subscriber.updatedAt).toISOString(),
  }
}

export default async function AdminMailingListPage() {
  // Check if the user is an admin
  await requireAdmin()

  // Fetch subscribers through the service layer
  const subscribers = await getMailingListSubscriptions()

  // Serialize the data for client components
  const serializedSubscribers = subscribers.map(serializeForClient)

  return (
    <div className="container py-8">
      <AdminBreadcrumb items={[{ label: "Mailing List" }]} />

      <div className="mb-8">
        <h1 className="text-4xl font-bold">Mailing List Subscribers</h1>
        <p className="text-muted-foreground">View and manage newsletter subscribers</p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>All Subscribers</CardTitle>
        </CardHeader>
        <CardContent className="pb-6">
          <MailingListSubscriberTable subscribers={serializedSubscribers} />
        </CardContent>
      </Card>
    </div>
  )
}


--- File: app/admin/page.tsx ---

import { Metadata } from "next"
import Link from "next/link"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { requireAdmin } from "@/lib/auth-utils"
import { AdminConfigMessage } from "@/components/admin/admin-config-message"
import { DevEnvNotice } from "@/components/admin/dev-env-notice"
import { Heading } from "@/components/typography/heading"

export const metadata: Metadata = {
  title: "Admin Dashboard",
  description: "Vibecode.party Admin Dashboard",
}

export default async function AdminPage() {
  const { isAdmin, requiresSetup } = await requireAdmin()
  const isDev = process.env.NODE_ENV === "development"

  if (requiresSetup) {
    return (
      <div className="container max-w-2xl py-8 md:py-12">
        <AdminConfigMessage />
      </div>
    )
  }

  if (!isAdmin) {
    return (
      <div className="container py-8 md:py-12">
        <div className="mx-auto max-w-2xl text-center">
          <Heading variant="h1" className="mb-4">
            Access Denied
          </Heading>
          <p className="text-muted-foreground text-balance mb-8">You don&apos;t have permission to access this page. Please contact an administrator if you believe this is an error.</p>
          {isDev && <DevEnvNotice />}
        </div>
      </div>
    )
  }

  return (
    <div className="container py-8 md:py-12">
      <div className="mx-auto max-w-6xl">
        <Heading variant="h3" className="mb-8 text-center text-primary">
          Admin Dashboard
        </Heading>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          <Card>
            <CardHeader>
              <CardTitle>Users</CardTitle>
              <CardDescription>Manage user accounts</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">View user information and manage admin access.</p>
            </CardContent>
            <CardFooter>
              <Link href="/admin/users" className="w-full">
                <Button className="w-full">Manage Users</Button>
              </Link>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Analytics</CardTitle>
              <CardDescription>View site analytics</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">Track user visits and monitor site activity.</p>
            </CardContent>
            <CardFooter>
              <Link href="/admin/analytics" className="w-full">
                <Button className="w-full">View Analytics</Button>
              </Link>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Mailing List</CardTitle>
              <CardDescription>Manage subscribers</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">View and manage newsletter subscribers and preferences.</p>
            </CardContent>
            <CardFooter>
              <Link href="/admin/mailing-list" className="w-full">
                <Button className="w-full">Manage Subscribers</Button>
              </Link>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Ideas</CardTitle>
              <CardDescription>Manage startup ideas</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">Import, view, and manage startup ideas in the database.</p>
            </CardContent>
            <CardFooter>
              <Link href="/admin/ideas" className="w-full">
                <Button className="w-full">Manage Ideas</Button>
              </Link>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  )
}


--- File: app/admin/users/page.tsx ---

import { requireAdmin } from "@/lib/auth-utils"
import { AdminBreadcrumb } from "@/components/nav/admin-breadcrumb"
import { AdminUserList } from "@/components/admin/user-list"
import { clerkClient } from "@clerk/nextjs/server"
import type { User } from "@clerk/nextjs/server"

async function getInitialUsers() {
  const client = await clerkClient()
  const { data: users } = await client.users.getUserList()
  const adminUserIds = process.env.ADMIN_USER_IDS?.split(",") || []

  return users.map((user: User) => ({
    id: user.id,
    email: user.emailAddresses[0]?.emailAddress,
    username: user.username,
    firstName: user.firstName,
    lastName: user.lastName,
    imageUrl: user.imageUrl,
    createdAt: new Date(user.createdAt).toLocaleDateString(),
    isAdmin: adminUserIds.includes(user.id),
    banned: user.banned,
    publicMetadata: user.publicMetadata,
  }))
}

export default async function AdminUsersPage() {
  // Check if the user is an admin
  await requireAdmin()

  // Fetch initial users data
  const initialUsers = await getInitialUsers()

  return (
    <div className="container py-8">
      <AdminBreadcrumb items={[{ label: "Users" }]} />

      <div className="mb-8">
        <h1 className="text-4xl font-bold">Users</h1>
        <p className="text-muted-foreground">Manage and view user information</p>
      </div>

      <AdminUserList initialUsers={initialUsers} />
    </div>
  )
}


--- File: app/api/ai/_auth.ts ---

import { auth } from "@clerk/nextjs/server"
import { NextResponse } from "next/server"

export async function requireAuthMiddleware() {
  const { userId } = await auth()

  if (!userId) {
    return NextResponse.json(
      { error: "Authentication required" },
      { status: 401 }
    )
  }

  return null // Continue to route handler
} 

--- File: app/api/ai/generate/image/route.ts ---

import { replicate } from '@ai-sdk/replicate';
import { experimental_generateImage as generateImage } from 'ai';
import { NextRequest } from 'next/server';
import { PutObjectCommand } from '@aws-sdk/client-s3';
import { s3Client, AWS_BUCKET_PUBLIC } from '@/lib/aws';
import { requireAuthMiddleware } from "../../_auth"

export async function POST(request: NextRequest) {
  // Check authentication
  const authError = await requireAuthMiddleware()
  if (authError) return authError

  try {
    const { input, userId, deckId, aspectRatio } = await request.json();
    const userFolder = userId || 'guest';

    // Check if placeholder images should be used
    if (process.env.NEXT_PUBLIC_USE_PLACEHOLDER_IMAGES === 'true') {
      return Response.json({
        imageUrl: 'https://placehold.co/600x900',
        success: true
      });
    }

    if (!s3Client) {
      return Response.json({ error: 'S3 client not initialized', success: false }, { status: 500 });
    }

    const { image } = await generateImage({
      model: replicate.image(process.env.REPLICATE_MODEL || "black-forest-labs/flux-schnell"),
      prompt: input,
      aspectRatio: aspectRatio || '1:1',
    });

    // Upload to S3
    const key = `decks/${userFolder}/${deckId}/${Date.now()}.webp`;
    await s3Client.send(
      new PutObjectCommand({
        Bucket: AWS_BUCKET_PUBLIC,
        Key: key,
        Body: image.uint8Array,
        ContentType: 'image/webp',
      })
    );

    // Return both the image and the S3 URL
    return Response.json({
      imageUrl: `https://${AWS_BUCKET_PUBLIC}.s3.${process.env.AWS_REGION || 'us-east-1'}.amazonaws.com/${key}`,
      success: true
    });
  } catch (error) {
    console.error('Error generating or uploading image:', error);
    return Response.json({ error: 'Failed to generate or upload image', success: false }, { status: 500 });
  }
}


--- File: app/api/ai/generate/object/route.ts ---

import { openai } from "@ai-sdk/openai"
import { streamObject } from "ai"
import { z } from "zod"
import { requireAuthMiddleware } from "../../_auth"

// Allow streaming responses up to 30 seconds
export const maxDuration = 30

// Helper function to get a readable schema description
// function describeSchema(schema: z.ZodTypeAny): any {
//   if (schema instanceof z.ZodObject) {
//     const shape: Record<string, any> = {}
//     for (const [key, value] of Object.entries(schema.shape)) {
//       shape[key] = describeSchema(value as z.ZodTypeAny)
//     }
//     return { type: "object", shape }
//   } else if (schema instanceof z.ZodArray) {
//     return { type: "array", items: describeSchema(schema.element) }
//   } else if (schema instanceof z.ZodString) {
//     return { type: "string" }
//   } else if (schema instanceof z.ZodNumber) {
//     return { type: "number" }
//   } else if (schema instanceof z.ZodBoolean) {
//     return { type: "boolean" }
//   }
//   return { type: "unknown" }
// }

// Define schema field type interface
interface SchemaField {
  type: "string" | "number" | "boolean" | "array" | "object"
  optional?: boolean
  items?: SchemaField
  properties?: Record<string, SchemaField>
}

// Define the schema for field definitions
const fieldSchema: z.ZodType<SchemaField> = z.object({
  type: z.enum(["string", "number", "boolean", "array", "object"]),
  optional: z.boolean().optional(),
  properties: z.record(z.lazy(() => fieldSchema)).optional(),
  items: z.lazy(() => fieldSchema).optional(),
})

// Define the schema for the request body
const requestSchema = z.object({
  schema: fieldSchema,
  prompt: z.string(),
})

function createZodSchema(shape: SchemaField | Record<string, SchemaField>): z.ZodTypeAny {
  // If it's a record of fields (root schema), create an object schema
  if (!("type" in shape)) {
    const schema: Record<string, z.ZodTypeAny> = {}
    for (const [key, def] of Object.entries(shape)) {
      schema[key] = createZodSchema(def)
    }
    return z.object(schema)
  }

  // Handle individual field schemas
  if (shape.type === "object" && shape.properties) {
    const schema: Record<string, z.ZodTypeAny> = {}
    for (const [key, def] of Object.entries(shape.properties)) {
      schema[key] = createZodSchema(def)
    }
    return z.object(schema)
  }

  let fieldSchema: z.ZodTypeAny

  switch (shape.type) {
    case "string":
      fieldSchema = z.string()
      break
    case "number":
      fieldSchema = z.number()
      break
    case "boolean":
      fieldSchema = z.boolean()
      break
    case "array":
      fieldSchema = z.array(shape.items ? createZodSchema(shape.items) : z.any())
      break
    default:
      fieldSchema = z.any()
  }

  if (shape.optional) {
    fieldSchema = fieldSchema.optional()
  }

  return fieldSchema
}

export async function POST(req: Request) {
  // Check authentication
  const authError = await requireAuthMiddleware()
  if (authError) return authError

  try {
    const body = await req.json()
    const { schema: schemaShape, prompt } = requestSchema.parse(body)

    // Create a new schema from the shape
    const schema = createZodSchema(schemaShape)
    
    const result = streamObject({
      model: openai("gpt-4.1-nano"),
      schema,
      prompt,
    })
    
    return result.toTextStreamResponse()
  } catch (error) {
    console.error("Error in generate object route:", error)
    return new Response(JSON.stringify({ error: "Invalid request" }), { status: 400 })
  }
}


--- File: app/api/ai/generate/strings/route.ts ---

import { openai } from "@ai-sdk/openai"
import { streamObject } from "ai"
import { z } from "zod"
import { requireAuthMiddleware } from "../../_auth"

// Allow streaming responses up to 30 seconds
export const maxDuration = 30

export async function POST(req: Request) {
  // Check authentication
  const authError = await requireAuthMiddleware()
  if (authError) return authError

  try {
    const body = await req.json()
    const { prompt, count = 6 } = body

    const result = streamObject({
      model: openai("gpt-4.1-nano"),
      schema: z.object({
        strings: z.array(z.string()).describe("Array of generated strings based on the prompt"),
      }),
      prompt: `${prompt}\n\nGenerate exactly ${count} responses. Return them in a JSON object with a "strings" array property.`,
    })
    
    return result.toTextStreamResponse()
  } catch (error) {
    console.error("Error in generate strings route:", error)
    return new Response(JSON.stringify({ error: "Failed to generate strings" }), { status: 500 })
  }
}


--- File: app/api/ai/generate/text/route.ts ---

import { streamText } from "ai"
import { openai } from "@ai-sdk/openai"
import { NextRequest } from "next/server"
import { requireAuthMiddleware } from "../../_auth"

export async function POST(request: NextRequest) {
  // Check authentication
  const authError = await requireAuthMiddleware()
  if (authError) return authError

  const { input, messages, system } = await request.json()

  let chatMessages = []

  if (messages) {
    chatMessages = messages
  } else if (input) {
    chatMessages = [{ role: "user", content: input }]
  }

  const result = streamText({
    model: openai("gpt-4.1-nano"),
    messages: chatMessages,
    ...(system && { system }),
  })

  return result.toDataStreamResponse()
}


--- File: app/api/check-admin/route.ts ---

import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';

export async function GET() {
  try {
    const { userId } = await auth();
    
    // If no user is authenticated, they're not an admin
    if (!userId) {
      return NextResponse.json({ isAdmin: false });
    }
    
    // Get the list of admin user IDs from environment variables
    const adminUserIds = process.env.ADMIN_USER_IDS?.split(",") || [];
    
    // Check if the current user's ID is in the admin list
    const isAdmin = adminUserIds.includes(userId);
    
    return NextResponse.json({ isAdmin });
  } catch (error) {
    console.error("Error checking admin status:", error);
    return NextResponse.json({ isAdmin: false }, { status: 500 });
  }
} 

--- File: app/api/convex-status/route.ts ---

import { NextResponse } from "next/server"

export async function GET() {
  try {
    // Check if Convex URL is configured
    const isConfigured = Boolean(process.env.NEXT_PUBLIC_CONVEX_URL)

    if (!isConfigured) {
      return NextResponse.json(
        {
          status: "not_configured",
          message: "Convex is not configured. Please set NEXT_PUBLIC_CONVEX_URL in your .env file.",
        },
        { status: 400 }
      )
    }

    return NextResponse.json(
      {
        status: "ready",
        message: "Convex is configured and ready to use.",
        url: process.env.NEXT_PUBLIC_CONVEX_URL,
      },
      { status: 200 }
    )
  } catch (error) {
    console.error("Error checking Convex status:", error)
    return NextResponse.json(
      {
        status: "error",
        message: "Failed to check Convex status",
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    )
  }
} 

--- File: app/api/pay/intent/route.ts ---

import { auth } from "@clerk/nextjs/server"
import { NextResponse } from "next/server"
import { stripe, isStripeConfigured } from "@/lib/stripe"

export async function POST(request: Request) {
  try {
    // Check if Stripe is configured
    if (!isStripeConfigured()) {
      return NextResponse.json(
        { error: "Payment system not configured" },
        { status: 503 }
      )
    }

    // Check authentication
    const authResult = await auth()
    if (!authResult.userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const { amount } = await request.json()

    // We can safely use stripe here because we checked isStripeConfigured()
    const paymentIntent = await stripe!.paymentIntents.create({
      amount,
      currency: "usd",
      metadata: {
        userId: authResult.userId,
        type: "donation"
      }
    })

    return NextResponse.json({
      clientSecret: paymentIntent.client_secret,
    })
  } catch (error) {
    console.error("Error creating payment intent:", error)
    return NextResponse.json(
      { error: "Error creating payment intent" },
      { status: 500 }
    )
  }
} 

--- File: app/api/sendgrid/inbound/route.ts ---

import { NextRequest, NextResponse } from "next/server"
import sgMail from "@sendgrid/mail"

export async function POST(request: NextRequest) {
  try {
    // Parse the multipart form data from SendGrid
    const formData = await request.formData()
    const from = formData.get("from") as string
    const subject = formData.get("subject") as string
    const text = formData.get("text") as string
    const html = formData.get("html") as string

    // Configure SendGrid
    sgMail.setApiKey(process.env.SENDGRID_API_KEY!)

    // Forward the email to the contact email
    const msg = {
      to: process.env.CONTACT_EMAIL!,
      from: process.env.SENDGRID_SENDER!,
      replyTo: from,
      subject: `[Forwarded] ${subject}`,
      text: `Original From: ${from}\n\n${text}`,
      html: `
        <p><strong>Original From:</strong> ${from}</p>
        <hr/>
        ${html}
      `,
    }

    await sgMail.send(msg)

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("Error processing inbound email:", error)
    return NextResponse.json(
      { error: "Failed to process inbound email" },
      { status: 500 }
    )
  }
} 

--- File: app/api/upload/route.ts ---

import { NextRequest, NextResponse } from "next/server"
import { uploadFileToS3 } from "@/lib/s3-utils"
import { isAwsConfigured } from "@/lib/aws"
import { v4 as uuidv4 } from "uuid"
import { auth } from "@clerk/nextjs/server"

export async function POST(request: NextRequest) {
  try {
    // Check if AWS is configured
    if (!isAwsConfigured()) {
      return NextResponse.json(
        { error: "File upload system not configured" },
        { status: 503 }
      )
    }

    const { userId } = await auth()

    if (!userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const formData = await request.formData()
    const file = formData.get("file") as File
    const folder = formData.get("folder") as string || "images"
    
    if (!file) {
      return NextResponse.json({ error: "No file provided" }, { status: 400 })
    }
    
    // Validate file type
    const allowedTypes = ["image/jpeg", "image/png", "image/webp", "image/gif", "image/svg+xml"]
    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json({ error: "File type not allowed. Please upload an image (JPEG, PNG, WebP, SVG, or GIF)." }, { status: 400 })
    }
    
    // Validate file size (max 5MB)
    const maxSize = 5 * 1024 * 1024 // 5MB
    if (file.size > maxSize) {
      return NextResponse.json({ error: "File size exceeds 5MB limit" }, { status: 400 })
    }
    
    // Generate a unique filename
    const fileExtension = file.name.split(".").pop()
    const fileName = `${folder}/${uuidv4()}.${fileExtension}`
    
    // Upload to S3
    const fileUrl = await uploadFileToS3(file, fileName)
    
    return NextResponse.json({ url: fileUrl })
  } catch (error) {
    console.error("Error uploading file:", error)
    if (error instanceof Error && error.message === "AWS S3 is not configured") {
      return NextResponse.json(
        { error: "File upload system not configured" },
        { status: 503 }
      )
    }
    return NextResponse.json({ error: "Failed to upload file" }, { status: 500 })
  }
} 

--- File: app/contact/page.tsx ---

import { Metadata } from "next"
import { ContactForm } from "@/components/contact/contact-form"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { ConfigCard } from "@/components/admin/config-card"
import { Heading } from "@/components/typography/heading"

export const metadata: Metadata = {
  title: "Contact Us",
  description: "Get in touch with us. We'd love to hear from you!",
}

async function checkEnvironmentVariables() {
  // Define required environment variables
  const requiredEnvVars = {
    NEXT_PUBLIC_RECAPTCHA_SITE_KEY: process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY,
    RECAPTCHA_SECRET_KEY: process.env.RECAPTCHA_SECRET_KEY,
    SENDGRID_API_KEY: process.env.SENDGRID_API_KEY,
    SENDGRID_SENDER: process.env.SENDGRID_SENDER,
    CONTACT_EMAIL: process.env.CONTACT_EMAIL,
  } as const

  // Check which variables are missing
  const missingEnvVars = Object.entries(requiredEnvVars)
    .filter(([, value]) => !value)
    .map(([key]) => key)

  // Log missing variables in development
  if (process.env.NODE_ENV === "development" && missingEnvVars.length > 0) {
    console.warn("⚠️ Missing environment variables for contact form:")
    missingEnvVars.forEach((key) => {
      console.warn(`  - ${key}`)
    })
  }

  return {
    isConfigured: missingEnvVars.length === 0,
    missingVars: missingEnvVars,
  }
}

export default async function ContactPage() {
  const { isConfigured, missingVars } = await checkEnvironmentVariables()

  if (!isConfigured) {
    return (
      <div className="container max-w-2xl py-8 md:py-12">
        <ConfigCard
          title="Contact Form Setup Required"
          description="The contact form needs configuration before it can be used."
          configItems={[
            {
              key: "NEXT_PUBLIC_RECAPTCHA_SITE_KEY",
              description: "From Google ReCAPTCHA",
              isMissing: missingVars.includes("NEXT_PUBLIC_RECAPTCHA_SITE_KEY"),
            },
            {
              key: "RECAPTCHA_SECRET_KEY",
              description: "From Google ReCAPTCHA",
              isMissing: missingVars.includes("RECAPTCHA_SECRET_KEY"),
            },
            {
              key: "SENDGRID_API_KEY",
              description: "Your SendGrid API key",
              isMissing: missingVars.includes("SENDGRID_API_KEY"),
            },
            {
              key: "SENDGRID_SENDER",
              description: "Verified sender email in SendGrid",
              isMissing: missingVars.includes("SENDGRID_SENDER"),
            },
            {
              key: "CONTACT_EMAIL",
              description: "Where to receive contact messages",
              isMissing: missingVars.includes("CONTACT_EMAIL"),
            },
          ]}
          filesToRemove={[{ path: "app/contact/page.tsx" }, { path: "components/contact/contact-form.tsx" }, { path: "app/_actions/contact.ts" }]}
        />
      </div>
    )
  }

  return <ContactPageContent />
}

function ContactPageContent() {
  return (
    <div className="container max-w-2xl py-8 md:py-12">
      <Card>
        <CardHeader>
          <CardTitle>
            <Heading variant="h4">Contact Us</Heading>
          </CardTitle>
          <CardDescription>Have a question or want to get in touch? Fill out the form and we&apos;ll get back to you.</CardDescription>
        </CardHeader>
        <CardContent>
          <ContactForm requireCaptcha={true} />
        </CardContent>
      </Card>
      {process.env.NODE_ENV === "development" && (
        <div className="mt-8 text-sm text-muted-foreground">
          <p>
            Get your API keys from{" "}
            <a className="underline" href="http://www.google.com/recaptcha/admin" target="_blank" rel="noopener noreferrer">
              http://www.google.com/recaptcha/admin
            </a>
          </p>
        </div>
      )}
    </div>
  )
}


--- File: app/demo/ai/page.tsx ---

import { Heading } from "@/components/typography/heading"
import { ConfigCard } from "@/components/admin/config-card"
import { AIDemoClient } from "@/components/demo/ai-demo-client"
import { checkAuth } from "@/lib/auth-utils"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { SignInButton } from "@clerk/nextjs"
import { Button } from "@/components/ui/button"

const requiredEnvVars = {
  OPENAI_API_KEY: "Your OpenAI API key",
}

export default async function AIDemo() {
  // Check authentication
  const { isAuthenticated } = await checkAuth()

  // Check for missing environment variables
  const missingEnvVars = Object.entries(requiredEnvVars).map(([key, description]) => ({
    key,
    description,
    isMissing: !process.env[key],
  }))

  const hasAllEnvVars = missingEnvVars.every((item) => !item.isMissing)
  const isMissingReplicateToken = !process.env.REPLICATE_API_TOKEN

  return (
    <div className="container py-8 md:py-12">
      <div className="mx-auto flex max-w-[58rem] flex-col items-center space-y-4 text-center">
        <span className="inline-block rounded-full bg-primary/10 px-3 py-1 text-sm text-primary">AI SDK Integration</span>
        <Heading variant="h2" className="font-heading text-3xl leading-[1.1] sm:text-3xl md:text-6xl font-bold">
          AI <span className="text-primary">Demo</span>
        </Heading>
        <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7">Try out generating text, images and structured data with AI.</p>
      </div>

      <div className="mx-auto max-w-2xl mt-12">
        {!isAuthenticated ? (
          <Card>
            <CardHeader>
              <CardTitle>Sign in Required</CardTitle>
              <CardDescription>Please sign in to access the AI demo features.</CardDescription>
            </CardHeader>
            <CardContent className="flex justify-center">
              <SignInButton mode="modal">
                <Button size="lg">Sign in to Continue</Button>
              </SignInButton>
            </CardContent>
          </Card>
        ) : !hasAllEnvVars ? (
          <ConfigCard
            title="OpenAI Configuration Required"
            description="To enable AI text or structured data generation, you need to configure OpenAI API key."
            configItems={missingEnvVars}
            filesToRemove={[
              { path: "api/ai/*", description: "AI API routes" },
              { path: "_hooks/*", description: "AI hooks" },
            ]}
            alternativeTitle="Remove AI Feature"
            alternativeDescription="If you don't plan to use AI features, you can remove these files:"
          />
        ) : (
          <AIDemoClient isMissingReplicateToken={isMissingReplicateToken} />
        )}
      </div>
    </div>
  )
}


--- File: app/demo/upload/page.tsx ---

import { Heading } from "@/components/typography/heading"
import { UploadDemoClient } from "@/components/demo/upload-demo-client"
import { ConfigCard } from "@/components/admin/config-card"

const requiredEnvVars = {
  AWS_KEY: "Your AWS access key ID for S3 access",
  AWS_SECRET: "Your AWS secret access key for S3 access",
  AWS_REGION: "The AWS region where your S3 bucket is located (e.g., us-east-1)",
  AWS_BUCKET_PUBLIC: "The name of your public S3 bucket for file uploads",
}

export default async function UploadDemo() {
  // Check for missing environment variables
  const missingEnvVars = Object.entries(requiredEnvVars).map(([key, description]) => ({
    key,
    description,
    isMissing: !process.env[key],
  }))

  const hasAllEnvVars = missingEnvVars.every((item) => !item.isMissing)

  return (
    <div className="container py-8 md:py-12">
      <div className="mx-auto flex max-w-[58rem] flex-col items-center space-y-4 text-center">
        <span className="inline-block rounded-full bg-primary/10 px-3 py-1 text-sm text-primary">Upload Demo</span>
        <Heading variant="h2" className="font-heading text-3xl leading-[1.1] sm:text-3xl md:text-6xl font-bold">
          File Upload <span className="text-primary">System</span>
        </Heading>
        <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7">Try out our drag-and-drop file upload system with AWS S3 integration and image optimization.</p>
      </div>

      <div className="mx-auto max-w-2xl mt-12">
        {!hasAllEnvVars ? (
          <ConfigCard
            title="AWS S3 Configuration Required"
            description="To enable file uploads, you need to configure AWS S3 credentials and settings."
            configItems={missingEnvVars}
            filesToRemove={[
              { path: "components/ui/image-upload.tsx", description: "Image upload component" },
              { path: "lib/s3-utils.ts", description: "S3 utility functions" },
            ]}
            alternativeTitle="Remove File Upload Feature"
            alternativeDescription="If you don't plan to use AWS S3 for file uploads, you can remove these files:"
          />
        ) : (
          <UploadDemoClient />
        )}
      </div>
    </div>
  )
}


--- File: app/explore/page.tsx ---

import { ExploreView } from "@/components/views/explore-view"

export default function ExplorePage() {
  return <ExploreView />
}


--- File: app/get-started/_components/cursor-prompt.tsx ---

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { CopyToClipboard } from "@/components/ui/copy-to-clipboard"
import { Heading } from "@/components/typography/heading"
import { ChevronsDown, ChevronsUp } from "lucide-react"

interface CursorPromptProps {
  prompt: string
  heading: string
}

export function CursorPrompt({ prompt, heading }: CursorPromptProps) {
  const [isVisible, setIsVisible] = useState(false)

  return (
    <div className="space-y-2">
      <div className="flex items-center gap-4 sm:gap-8">
        <Heading variant="h5">{heading}</Heading>
        <Button className="text-primary hover:text-primary" variant="outline" onClick={() => setIsVisible(!isVisible)}>
          {isVisible ? <ChevronsUp className="w-4 h-4" /> : <ChevronsDown className="w-4 h-4" />}
          {isVisible ? "Hide Cursor Prompt" : "Show Cursor Prompt"}
        </Button>
      </div>

      {isVisible && (
        <div className="cursor-prompt-container border rounded-lg p-4 mt-2">
          <div className="flex items-center justify-between mb-2 relative">
            <h4 className="font-semibold text-primary">Cursor Prompt</h4>
            <div className="absolute -top-4 -right-4 w-full">
              <CopyToClipboard position="top-right" hideContent={true}>
                {prompt}
              </CopyToClipboard>
            </div>
          </div>
          <p className="text-sm text-muted-foreground -mt-2 mb-4">Copy this prompt and paste it to Cursor to automatically remove admin functionality:</p>
          <pre className="text-sm bg-muted p-3 rounded-md whitespace-pre-wrap">
            <code>{prompt}</code>
          </pre>
        </div>
      )}
    </div>
  )
}


--- File: app/get-started/_components/getstarted-admin.tsx ---

import { Card } from "@/components/ui/card"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Heading } from "@/components/typography/heading"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { isClerkConfigured, isAdminConfigured } from "@/lib/auth-utils"
import { ShieldUser } from "lucide-react"
import { CursorPrompt } from "./cursor-prompt"

export default function GetStartedAdmin() {
  const hasClerk = isClerkConfigured()
  const hasAdminConfig = isAdminConfigured()

  const cursorPrompt = `Please help me remove admin functionality from my project by:

1. Deleting these files:
   - app/admin/page.tsx
   - app/admin/layout.tsx
   - app/admin/components/
   - lib/admin.ts

2. Removing these environment variables from .env:
   - ADMIN_USER_IDS

3. And remove getstarted-admin from the get-started page`

  return (
    <>
      {!hasClerk || !hasAdminConfig ? (
        <div className="max-w-4xl mx-auto px-4 w-full">
          <Card className="p-8 mt-8 w-full">
            <Heading variant="h4" className="text-primary">
              Setup Required: Admin Dashboard
            </Heading>
            <p>To set up the admin dashboard functionality:</p>
            <ol className="list-decimal pl-6 space-y-4">
              {!hasClerk && <li className="text-muted-foreground">First, set up Clerk authentication (see above)</li>}
              <li>
                <strong>Configure Admin Access:</strong>
                <ul className="list-disc pl-6 mt-2 space-y-2">
                  <li>Sign in to your application using Clerk</li>
                  <li>
                    Get your Clerk User ID from the{" "}
                    <a href="https://dashboard.clerk.com/users" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                      Clerk Dashboard
                    </a>
                  </li>
                  <li>Add your User ID to the environment variables</li>
                </ul>
              </li>
              <li>
                Create or update your <code className="px-2 py-1 bg-muted rounded">.env</code> file with:
                <pre className="mt-2 p-4 bg-muted rounded-md max-w-xl overflow-x-auto">
                  <code>
                    # Replace with your Clerk user ID after signing in{"\n"}
                    ADMIN_USER_IDS=your_user_id
                  </code>
                </pre>
              </li>
              <li>Restart your development server after adding the environment variables</li>
            </ol>

            <div className="mt-6 space-y-4">
              <div className="p-4 bg-amber-50 rounded-md">
                <p className="text-amber-800 text-sm">
                  <strong>Security Note:</strong> Only add trusted user IDs to the admin list. These users will have full access to your application’s admin features.
                </p>
              </div>
              <div className="p-4 bg-blue-50 rounded-md">
                <p className="text-blue-800 text-sm">
                  <strong>Tip:</strong> You can add multiple admin users by separating their IDs with commas (e.g., <code className="text-blue-600">user_123,user_456</code>)
                </p>
              </div>
            </div>

            <div className="pt-8">
              <CursorPrompt prompt={cursorPrompt} heading="Don't need admin functionality?" />
            </div>
          </Card>
        </div>
      ) : (
        <div className="mx-auto text-center max-w-2xl w-full">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="features">
              <AccordionTrigger className="text-green-600 font-semibold">✓ Admin Dashboard is configured!</AccordionTrigger>
              <AccordionContent>
                <div className="text-left">
                  <p className="mb-4">Your admin system is ready to use. You can now:</p>
                  <ul className="list-disc pl-6 space-y-2 mb-6">
                    <li>Access the admin dashboard</li>
                    <li>Manage users and content</li>
                    <li>View analytics and reports</li>
                    <li>Configure system settings</li>
                  </ul>
                </div>
                <div className="mt-4">
                  <Button asChild>
                    <Link href="/admin">
                      <ShieldUser className="w-5 h-5 scale-110 text-amber-300" />
                      Open Admin Dashboard
                    </Link>
                  </Button>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}
    </>
  )
}


--- File: app/get-started/_components/getstarted-ai.tsx ---

import { Card } from "@/components/ui/card"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Heading } from "@/components/typography/heading"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { Sparkles } from "lucide-react"
import { CursorPrompt } from "./cursor-prompt"

export default async function GetStartedAI() {
  // Check for required configuration
  const hasOpenAI = process.env.OPENAI_API_KEY
  const hasReplicate = process.env.REPLICATE_API_TOKEN && process.env.REPLICATE_MODEL

  const cursorPrompt = `Please help me remove AI functionality from my project by:

1. Deleting these files:
   - app/api/ai/generate/text/route.ts
   - app/api/ai/generate/image/route.ts
   - app/api/ai/generate/object/route.ts
   - app/api/ai/generate/strings/route.ts
   - app/_hooks/useGenerateText.ts
   - app/_hooks/useGenerateImage.ts
   - app/_hooks/useGenerateObject.ts
   - app/_hooks/useGenerateStrings.ts
   - app/demo/ai/page.tsx
   - components/demo/ai-demo-client.tsx
   - app/get-started/_components/getstarted-ai.tsx

2. Removing these dependencies from package.json:
   - @ai-sdk/openai
   - @ai-sdk/react
   - @ai-sdk/replicate
   - ai

3. Removing these environment variables from .env:
   - OPENAI_API_KEY
   - REPLICATE_API_TOKEN
   - REPLICATE_MODEL

4. And remove getstarted-ai from the get-started page

After these changes, please run \`pnpm install\` to update the dependency tree.`

  return (
    <>
      {!hasOpenAI || !hasReplicate ? (
        <div className="max-w-4xl mx-auto px-4 w-full">
          <Card className="p-8 mt-8 w-full">
            <Heading variant="h4" className="text-primary">
              Setup Required: AI Integrations
            </Heading>
            <p>To set up AI functionality for text and image generation:</p>
            <ol className="list-decimal pl-6 space-y-4">
              <li>
                <strong>Set up OpenAI:</strong>
                <ul className="list-disc pl-6 mt-2 space-y-2">
                  <li>
                    Create an account on{" "}
                    <a href="https://platform.openai.com/signup" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                      OpenAI Platform
                    </a>
                  </li>
                  <li>Go to the API keys section</li>
                  <li>Create a new API key</li>
                </ul>
              </li>
              <li>
                <strong>Set up Replicate:</strong>
                <ul className="list-disc pl-6 mt-2 space-y-2">
                  <li>
                    Create an account on{" "}
                    <a href="https://replicate.com/signin" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                      Replicate
                    </a>
                  </li>
                  <li>Go to your account settings</li>
                  <li>Create an API token</li>
                  <li>
                    Choose your preferred model from the{" "}
                    <a href="https://replicate.com/explore" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                      model collection
                    </a>
                  </li>
                </ul>
              </li>
              <li>
                Create or update your <code className="px-2 py-1 bg-muted rounded">.env</code> file with the following variables:
                <pre className="mt-2 p-4 bg-muted rounded-md max-w-xl overflow-x-auto">
                  <code>
                    # AI Keys{"\n"}
                    OPENAI_API_KEY=your_openai_api_key{"\n"}
                    REPLICATE_API_TOKEN=your_replicate_token{"\n"}
                    REPLICATE_MODEL=your_chosen_model_id
                  </code>
                </pre>
              </li>
              <li>Restart your development server after adding the environment variables</li>
            </ol>

            <div className="mt-6 space-y-4">
              <div className="p-4 bg-amber-50 rounded-md">
                <p className="text-amber-800 text-sm">
                  <strong>Security Note:</strong> Never commit your API keys to version control. Always use environment variables for sensitive data. Monitor your API usage to avoid unexpected costs.
                </p>
              </div>
              <div className="p-4 bg-blue-50 rounded-md">
                <p className="text-blue-800 text-sm">
                  <strong>Cost Management Tip:</strong> Set up usage limits in both OpenAI and Replicate dashboards to prevent unexpected charges. Use smaller models during development.
                </p>
              </div>
            </div>

            <div className="pt-8">
              <CursorPrompt prompt={cursorPrompt} heading="Don't need AI integration?" />
            </div>
          </Card>
        </div>
      ) : (
        <div className="mx-auto text-center max-w-2xl w-full">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="features">
              <AccordionTrigger className="text-green-600 font-semibold">✓ AI Integrations are configured!</AccordionTrigger>
              <AccordionContent>
                <div className="text-left">
                  <p className="mb-4">Your AI system is ready to use. You can now:</p>
                  <ul className="list-disc pl-6 space-y-2">
                    <li>Generate text content with OpenAI</li>
                    <li>Create AI-powered images with Replicate</li>
                    <li>Customize model parameters</li>
                    <li>Monitor API usage and costs</li>
                  </ul>
                  <div className="mt-6 space-y-4">
                    <div className="p-4 bg-blue-50 rounded-md">
                      <p className="text-blue-800 text-sm">
                        <strong>Tip:</strong> Monitor your usage and costs in the{" "}
                        <a href="https://platform.openai.com/usage" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                          OpenAI Dashboard
                        </a>{" "}
                        and{" "}
                        <a href="https://replicate.com/account/usage" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                          Replicate Dashboard
                        </a>
                      </p>
                    </div>
                  </div>
                </div>
                <div className="mt-4">
                  <Button asChild className="w-[210px]">
                    <Link href="/demo/ai">
                      <Sparkles className="w-5 h-5 scale-110 text-amber-300" />
                      Open AI Demo
                    </Link>
                  </Button>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}
    </>
  )
}


--- File: app/get-started/_components/getstarted-clerk.tsx ---

import { Card } from "@/components/ui/card"
import { redirect } from "next/navigation"
import { headers } from "next/headers"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Heading } from "@/components/typography/heading"
export default async function GetStartedClerk() {
  // Check if we're on localhost
  const headersList = await headers()
  const host = headersList.get("host") || ""
  const isLocalhost = host.includes("localhost") || host.includes("127.0.0.1")

  // If not localhost, redirect to home
  if (!isLocalhost) {
    redirect("/")
  }

  // Check for Clerk configuration
  const hasClerkConfig = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY && process.env.CLERK_SECRET_KEY

  return (
    <>
      {!hasClerkConfig ? (
        <div className="max-w-4xl mx-auto px-4 w-full">
          <Card className="p-8 mt-8 w-full">
            <Heading variant="h4" className="text-primary">
              Setup Required: Clerk Authentication
            </Heading>
            <p>To get started, you need to set up Clerk authentication:</p>
            <ol className="list-decimal pl-6 space-y-4">
              <li>
                Create a new project on{" "}
                <a href="https://dashboard.clerk.com" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                  Clerk Dashboard
                </a>
              </li>
              <li>Copy your API keys from the Clerk Dashboard</li>
              <li>
                Create or update your <code className="px-2 py-1 bg-muted rounded">.env</code> file with the following variables:
                <pre className="mt-2 p-4 bg-muted rounded-md max-w-xl">
                  <code>NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_publishable_key{"\n"}CLERK_SECRET_KEY=your_secret_key</code>
                </pre>
              </li>
              <li>Restart your development server after adding the environment variables</li>
            </ol>
          </Card>
        </div>
      ) : (
        <div className="mx-auto text-center max-w-2xl w-full">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="features">
              <AccordionTrigger className="text-green-600 font-semibold">✓ Clerk is configured!</AccordionTrigger>
              <AccordionContent>
                <div className="text-left">
                  <p className="mb-4">Your authentication system is ready to use. You can now:</p>
                  <ul className="list-disc pl-6 space-y-2">
                    <li>Sign up new users</li>
                    <li>Sign in existing users</li>
                    <li>Manage user sessions</li>
                    <li>Access protected routes</li>
                  </ul>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}
    </>
  )
}


--- File: app/get-started/_components/getstarted-config.tsx ---

import { Card } from "@/components/ui/card"
import { redirect } from "next/navigation"
import { headers } from "next/headers"
import { Heading } from "@/components/typography/heading"
import { siteConfig } from "@/lib/config"
import { Badge } from "@/components/ui/badge"
import { CheckCircle2, AlertCircle } from "lucide-react"

const defaultSiteConfig = {
  title: "Vibecode Party Starter",
  description: "A modern Next.js starter with authentication, database, storage, AI, and more.",
  shortDescription: "Next.js Starter with Clerk, Convex, AWS & AI",
  url: "https://starter.vibecode.party",
  shareImage: "https://starter.vibecode.party/screenshot.png",
  x: "",
  github: "",
  logo: "",
}

type ConfigStatus = {
  value: string
  isDefault: boolean
  label: string
  suggestion: string
  required?: boolean
}

export default async function GetStartedConfig() {
  // Check if we're on localhost
  const headersList = await headers()
  const host = headersList.get("host") || ""
  const isLocalhost = host.includes("localhost") || host.includes("127.0.0.1")

  // If not localhost, redirect to home
  if (!isLocalhost) {
    redirect("/")
  }

  const configStatus: Record<string, ConfigStatus> = {
    title: {
      value: siteConfig.title,
      isDefault: siteConfig.title === defaultSiteConfig.title,
      label: "Site Title",
      suggestion: "Your site name",
      required: true,
    },
    description: {
      value: siteConfig.description,
      isDefault: siteConfig.description === defaultSiteConfig.description,
      label: "Description",
      suggestion: "Your site description",
      required: true,
    },
    shortDescription: {
      value: siteConfig.shortDescription,
      isDefault: siteConfig.shortDescription === defaultSiteConfig.shortDescription,
      label: "Short Description",
      suggestion: "Brief tagline for your site",
      required: true,
    },
    url: {
      value: siteConfig.url,
      isDefault: siteConfig.url === defaultSiteConfig.url,
      label: "URL",
      suggestion: "https://yoursite.com",
      required: false,
    },
    shareImage: {
      value: siteConfig.shareImage,
      isDefault: siteConfig.shareImage === defaultSiteConfig.shareImage,
      label: "Share Image",
      suggestion: "https://yoursite.com/screenshot.png",
      required: false,
    },
  }

  const defaultCount = Object.values(configStatus).filter((status) => status.required && status.isDefault).length
  const needsUpdate = defaultCount > 0

  return (
    <div className="max-w-4xl mx-auto px-4 w-full mb-4">
      <Card className="p-6 mt-4 w-full">
        <div className="flex items-center gap-2 mb-3">
          <Heading variant="h4" className={`text-base ${needsUpdate ? "text-yellow-600" : "text-green-600"}`}>
            {needsUpdate ? "Setup Required: Site Configuration" : "Site Configuration"}
          </Heading>
          {needsUpdate ? (
            <Badge variant="outline" className="text-yellow-600 border-yellow-600">
              <AlertCircle className="w-3 h-3 mr-1" />
              {defaultCount} required
            </Badge>
          ) : (
            <Badge variant="outline" className="text-green-600 border-green-600">
              <CheckCircle2 className="w-3 h-3 mr-1" />
              Complete
            </Badge>
          )}
        </div>

        <div className="rounded-lg border bg-card divide-y -mt-6">
          {Object.entries(configStatus).map(([key, status]) => (
            <div key={key} className="flex items-center justify-between p-2 gap-4">
              <div className="flex items-center gap-4 min-w-0">
                <div className="flex items-center gap-1.5 shrink-0">
                  <span className="font-medium text-sm">{status.label}</span>
                  {!status.required && (
                    <Badge variant="secondary" className="text-[10px] px-1 py-0 h-4">
                      Optional
                    </Badge>
                  )}
                </div>
                <div className="text-xs text-muted-foreground truncate">{status.value || "(none provided)"}</div>
              </div>
              {status.isDefault && (
                <Badge variant="outline" className={`text-[10px] px-1.5 py-0 h-4 shrink-0 ${status.required ? "text-yellow-600 border-yellow-600" : "text-muted-foreground border-muted"}`}>
                  {status.required ? "Needs Update" : "Default"}
                </Badge>
              )}
            </div>
          ))}
        </div>

        {needsUpdate && (
          <>
            <p className="text-sm text-muted-foreground -mb-4">
              Update in <code className="px-1.5 py-0.5 bg-muted rounded text-xs">lib/config.ts</code>
            </p>
            <pre className="text-xs p-3 bg-muted rounded-md overflow-x-auto">
              <code>{`export const siteConfig = {
  title: "Your Site Name",
  description: "Your site description",
  shortDescription: "Brief tagline",
  url: "https://yoursite.com",      // Optional
  shareImage: "https://yoursite.com/og.png"  // Optional
} as const`}</code>
            </pre>
          </>
        )}
      </Card>
    </div>
  )
}


--- File: app/get-started/_components/getstarted-convex.tsx ---

"use client"

import { useState, useEffect } from "react"
import { Card } from "@/components/ui/card"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Heading } from "@/components/typography/heading"
import { CursorPrompt } from "./cursor-prompt"
import { Button } from "@/components/ui/button"

export default function GetStartedConvex() {
  const [dismissed, setDismissed] = useState(false)

  useEffect(() => {
    if (typeof window !== "undefined") {
      setDismissed(localStorage.getItem("convexConfigured") === "true")
    }
  }, [])

  function handleDismiss() {
    localStorage.setItem("convexConfigured", "true")
    setDismissed(true)
  }

  const cursorPrompt = `Add a new table to convex/schema.ts. For example, to add a posts table:

\`\`\`typescript
posts: defineTable({
  title: v.string(),
  content: v.string(),
  createdAt: v.number(),
})
\`\`\`

Then run \`npx convex codegen\` to update your generated types.`

  if (dismissed) {
    return (
      <div className="mx-auto text-center max-w-2xl w-full">
        <Accordion type="single" collapsible className="w-full">
          <AccordionItem value="features">
            <AccordionTrigger className="text-green-600 font-semibold">✓ Convex is configured!</AccordionTrigger>
            <AccordionContent>
              <div className="text-left">
                <p className="mb-4">Your database is ready to use. You can now:</p>
                <ul className="list-disc pl-6 space-y-2">
                  <li>
                    Create and manage Convex tables through <code>schema.ts</code>
                  </li>
                  <li>Write queries and mutations in your Convex functions</li>
                  <li>Set up real-time subscriptions</li>
                  <li>Use optimistic updates for better UX</li>
                </ul>
                <div className="mt-6 p-4 bg-amber-50 rounded-md">
                  <p className="text-amber-800 text-sm">
                    <strong>Tip:</strong> You can manage your Convex project, monitor queries, and view your data in the{" "}
                    <a href="https://dashboard.convex.dev" target="_blank" rel="noopener noreferrer" className="text-amber-600 hover:underline">
                      Convex Dashboard
                    </a>
                  </p>
                </div>
              </div>
            </AccordionContent>
          </AccordionItem>
        </Accordion>
      </div>
    )
  }

  return (
    <div className="max-w-4xl mx-auto px-4 w-full">
      <Card className="p-8 mt-8 w-full">
        <Heading variant="h4" className="text-primary">
          Setup Required: Convex Database
        </Heading>
        <p>
          To finish setting up Convex, add your own table to <code className="px-2 py-1 bg-muted rounded">convex/schema.ts</code>:
        </p>
        <ol className="list-decimal pl-6 space-y-4 mt-4">
          <li>
            Open <code className="px-2 py-1 bg-muted rounded">convex/schema.ts</code> and add a new table. For example:
            <pre className="mt-2 p-4 bg-muted rounded-md max-w-xl overflow-x-auto">
              <code>{`posts: defineTable({
  title: v.string(),
  content: v.string(),
  createdAt: v.number(),
})`}</code>
            </pre>
          </li>
          <li>
            Run <code>npx convex codegen</code> to update your generated types.
          </li>
          <li>
            (Optional) Use this prompt in Cursor or your LLM:
            <pre className="mt-2 p-4 bg-muted rounded-md max-w-xl overflow-x-auto">
              <code>{`Add a new table to convex/schema.ts for blog posts with fields: title (string), content (string), createdAt (number)`}</code>
            </pre>
          </li>
          <li>When you are done, click Dismiss below to hide this card.</li>
        </ol>
        <div className="pt-8 flex flex-col gap-4">
          <CursorPrompt prompt={cursorPrompt} heading="Need help setting up a Convex table?" />
          <div className="flex justify-end pt-4">
            <Button className="px-8" variant="outline" onClick={handleDismiss}>
              Dismiss
            </Button>
          </div>
        </div>
      </Card>
    </div>
  )
}


--- File: app/get-started/_components/getstarted-email.tsx ---

import { Card } from "@/components/ui/card"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Heading } from "@/components/typography/heading"
import { Mail } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { CursorPrompt } from "./cursor-prompt"

export default async function GetStartedEmail() {
  // Check for required configuration
  const hasRecaptcha = process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY && process.env.RECAPTCHA_SECRET_KEY
  const hasEmail = process.env.SENDGRID_API_KEY && process.env.SENDGRID_SENDER && process.env.CONTACT_EMAIL && process.env.UNSUBSCRIBE_SECRET

  const cursorPrompt = `Please help me remove email and contact form functionality from my project by:

1. Deleting these files:
   - app/api/contact/route.ts
   - components/forms/contact-form.tsx
   - lib/email.ts

2. Removing these dependencies from package.json:
   - @sendgrid/mail
   - @types/grecaptcha
   - react-google-recaptcha-v3

3. Removing these environment variables from .env:
   - NEXT_PUBLIC_RECAPTCHA_SITE_KEY
   - RECAPTCHA_SECRET_KEY
   - SENDGRID_API_KEY
   - SENDGRID_SENDER
   - CONTACT_EMAIL
   - UNSUBSCRIBE_SECRET

4. And remove getstarted-email from the get-started page

After these changes, please run \`pnpm install\` to update the dependency tree.`

  return (
    <>
      {!hasRecaptcha || !hasEmail ? (
        <div className="max-w-4xl mx-auto px-4 w-full">
          <Card className="p-8 mt-8 w-full">
            <Heading variant="h4" className="text-primary">
              Setup Required: Email & Contact Form
            </Heading>
            <p>To set up email and contact form functionality:</p>
            <ol className="list-decimal pl-6 space-y-4">
              <li>
                <strong>Set up reCAPTCHA:</strong>
                <ul className="list-disc pl-6 mt-2 space-y-2">
                  <li>
                    Go to the{" "}
                    <a href="https://www.google.com/recaptcha/admin" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                      reCAPTCHA Admin Console
                    </a>
                  </li>
                  <li>Create a new site registration (use reCAPTCHA v3)</li>
                  <li>Add your domain to the allowed domains list</li>
                  <li>Copy your site key and secret key</li>
                </ul>
              </li>
              <li>
                <strong>Set up SendGrid:</strong>
                <ul className="list-disc pl-6 mt-2 space-y-2">
                  <li>
                    Create an account on{" "}
                    <a href="https://signup.sendgrid.com/" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                      SendGrid
                    </a>
                  </li>
                  <li>Verify your sender identity</li>
                  <li>Create an API key with email sending permissions</li>
                </ul>
              </li>
              <li>
                Create or update your <code className="px-2 py-1 bg-muted rounded">.env</code> file with the following variables:
                <pre className="mt-2 p-4 bg-muted rounded-md max-w-xl overflow-x-auto">
                  <code>
                    # Recaptcha{"\n"}
                    NEXT_PUBLIC_RECAPTCHA_SITE_KEY=your_site_key{"\n"}
                    RECAPTCHA_SECRET_KEY=your_secret_key{"\n"}
                    {"\n"}# Email{"\n"}
                    SENDGRID_API_KEY=your_api_key{"\n"}
                    SENDGRID_SENDER=your_verified_sender_email{"\n"}
                    CONTACT_EMAIL=your_contact_form_recipient{"\n"}
                    UNSUBSCRIBE_SECRET=your_unsubscribe_secret_key
                  </code>
                </pre>
              </li>
              <li>Restart your development server after adding the environment variables</li>
            </ol>

            <div className="mt-6 space-y-4">
              <div className="p-4 bg-amber-50 rounded-md">
                <p className="text-amber-800 text-sm">
                  <strong>Security Note:</strong> Never commit your secret keys to version control. Always use environment variables for sensitive data. The UNSUBSCRIBE_SECRET should be a long, random
                  string used to validate unsubscribe links.
                </p>
              </div>
              <div className="p-4 bg-blue-50 rounded-md">
                <p className="text-blue-800 text-sm">
                  <strong>Testing Tip:</strong> Use SendGrid’s sandbox mode for testing to avoid using your email quota during development.
                </p>
              </div>
            </div>

            <div className="pt-8">
              <CursorPrompt prompt={cursorPrompt} heading="Don’t need email functionality?" />
            </div>
          </Card>
        </div>
      ) : (
        <div className="mx-auto text-center max-w-2xl w-full">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="features">
              <AccordionTrigger className="text-green-600 font-semibold">✓ Email & Contact Form are configured!</AccordionTrigger>
              <AccordionContent>
                <div className="text-left">
                  <p className="mb-4">Your email system is ready to use. You can now:</p>
                  <ul className="list-disc pl-6 space-y-2">
                    <li>Use the contact form with reCAPTCHA protection</li>
                    <li>Send emails through SendGrid</li>
                    <li>Receive contact form submissions</li>
                    <li>Process unsubscribe requests securely</li>
                    <li>Customize email templates</li>
                  </ul>
                  <div className="mt-6 p-4 bg-blue-50 rounded-md">
                    <p className="text-blue-800 text-sm">
                      <strong>Tip:</strong> You can monitor your email activity and analytics in the{" "}
                      <a href="https://app.sendgrid.com/" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                        SendGrid Dashboard
                      </a>
                    </p>
                  </div>
                </div>
                <div className="mt-4">
                  <Button asChild className="w-[210px]">
                    <Link href="/contact">
                      <Mail className="w-5 h-5 scale-110 text-amber-300" />
                      Open Contact Form
                    </Link>
                  </Button>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}
    </>
  )
}


--- File: app/get-started/_components/getstarted-example.tsx ---

"use client"
import { Card } from "@/components/ui/card"
import { Heading } from "@/components/typography/heading"
import { useState } from "react"
import { Copy, Check, ChevronRight } from "lucide-react"
import { Button } from "@/components/ui/button"

interface GetStartedExampleProps {
  title: string
  prompt: string
  children?: React.ReactNode
  isCommand?: boolean
}
export default function GetStartedExample({ title, prompt, children, isCommand }: GetStartedExampleProps) {
  const [copied, setCopied] = useState(false)

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(prompt)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error("Failed to copy text: ", err)
    }
  }

  return (
    <Card className="p-6 hover:shadow-lg transition-all cursor-pointer relative group" onClick={copyToClipboard}>
      <Button
        size="icon"
        variant="outline"
        className="absolute top-6 right-6 h-8 w-8 transition-opacity opacity-70 group-hover:opacity-100"
        onClick={(e) => {
          e.stopPropagation()
          copyToClipboard()
        }}
      >
        {copied ? <Check className="h-4 w-4 text-green-600 scale-125" /> : <Copy className="h-4 w-4" />}
      </Button>
      <Heading variant="h6">{title}</Heading>
      {children}
      <pre className="bg-muted/50 border p-4 rounded-md text-xs sm:text-sm font-mono whitespace-pre-wrap -mt-2 flex items-center">
        {isCommand && <ChevronRight className="w-4 h-4 scale-125 text-primary mr-2" />}
        {prompt}
      </pre>
    </Card>
  )
}


--- File: app/get-started/_components/getstarted-payments.tsx ---

import { Card } from "@/components/ui/card"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Heading } from "@/components/typography/heading"
import { BadgeDollarSign } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { CursorPrompt } from "./cursor-prompt"

export default async function GetStartedPayments() {
  // Check for required configuration
  const hasStripe = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY && process.env.STRIPE_SECRET_KEY

  const cursorPrompt = `Please help me remove Stripe payment functionality from my project by:

1. Deleting these files:
   - app/api/stripe/webhook/route.ts
   - app/api/stripe/create-checkout/route.ts
   - lib/stripe.ts
   - components/payments/checkout-button.tsx

2. Removing these dependencies from package.json:
   - stripe
   - @stripe/stripe-js

3. Removing these environment variables from .env:
   - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
   - STRIPE_SECRET_KEY

4. And remove getstarted-payments from the get-started page

After these changes, please run \`pnpm install\` to update the dependency tree.`

  return (
    <>
      {!hasStripe ? (
        <div className="max-w-4xl mx-auto px-4 w-full">
          <Card className="p-8 mt-8 w-full">
            <Heading variant="h4" className="text-primary">
              Setup Required: Payments (Stripe)
            </Heading>
            <p>To set up payment processing with Stripe:</p>
            <ol className="list-decimal pl-6 space-y-4">
              <li>
                <strong>Create a Stripe Account:</strong>
                <ul className="list-disc pl-6 mt-2 space-y-2">
                  <li>
                    Sign up at{" "}
                    <a href="https://dashboard.stripe.com/register" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                      Stripe Dashboard
                    </a>
                  </li>
                  <li>Complete the account verification process</li>
                  <li>Switch between test and live modes as needed</li>
                </ul>
              </li>
              <li>
                <strong>Get API Keys:</strong>
                <ul className="list-disc pl-6 mt-2 space-y-2">
                  <li>
                    Go to the{" "}
                    <a href="https://dashboard.stripe.com/apikeys" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                      Stripe API Keys page
                    </a>
                  </li>
                  <li>Copy your publishable key and secret key</li>
                  <li>Make sure you’re using the correct mode (test/live) keys</li>
                </ul>
              </li>
              <li>
                Create or update your <code className="px-2 py-1 bg-muted rounded">.env</code> file with the following variables:
                <pre className="mt-2 p-4 bg-muted rounded-md max-w-xl overflow-x-auto">
                  <code>
                    NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_publishable_key{"\n"}
                    STRIPE_SECRET_KEY=your_secret_key
                  </code>
                </pre>
              </li>
              <li>Restart your development server after adding the environment variables</li>
            </ol>

            <div className="mt-6 space-y-4">
              <div className="p-4 bg-amber-50 rounded-md">
                <p className="text-amber-800 text-sm">
                  <strong>Security Note:</strong> Never expose your Stripe secret key in client-side code or commit it to version control. Only the publishable key should be public.
                </p>
              </div>
              <div className="p-4 bg-blue-50 rounded-md">
                <p className="text-blue-800 text-sm">
                  <strong>Testing Tip:</strong> Use Stripe’s test mode and{" "}
                  <a href="https://stripe.com/docs/testing#cards" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                    test card numbers
                  </a>{" "}
                  for development.
                </p>
              </div>
            </div>

            <div className="pt-8">
              <CursorPrompt prompt={cursorPrompt} heading="Don’t need payments?" />
            </div>
          </Card>
        </div>
      ) : (
        <div className="mx-auto text-center max-w-2xl w-full">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="features">
              <AccordionTrigger className="text-green-600 font-semibold">✓ Stripe Payments are configured!</AccordionTrigger>
              <AccordionContent>
                <div className="text-left">
                  <p className="mb-4">Your payment system is ready to use. You can now:</p>
                  <ul className="list-disc pl-6 space-y-2">
                    <li>Process one-time payments</li>
                    <li>Set up recurring subscriptions</li>
                    <li>Handle payment webhooks</li>
                    <li>Access payment analytics</li>
                  </ul>
                  <div className="mt-6 p-4 bg-blue-50 rounded-md">
                    <p className="text-blue-800 text-sm">
                      <strong>Tip:</strong> Monitor your payments and manage settings in the{" "}
                      <a href="https://dashboard.stripe.com" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                        Stripe Dashboard
                      </a>
                    </p>
                  </div>
                </div>
                <div className="mt-4">
                  <Button asChild className="w-[210px]">
                    <Link href="/demo/upload">
                      <BadgeDollarSign className="w-5 h-5 scale-110 text-amber-300" />
                      Open Payment Form
                    </Link>
                  </Button>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}
    </>
  )
}


--- File: app/get-started/_components/getstarted-storage.tsx ---

import { Card } from "@/components/ui/card"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Heading } from "@/components/typography/heading"
import { Upload } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { CursorPrompt } from "./cursor-prompt"

export default async function GetStartedStorage() {
  // Check for AWS configuration
  const hasRequiredConfig = process.env.AWS_KEY && process.env.AWS_SECRET && process.env.AWS_REGION && process.env.AWS_BUCKET_PUBLIC

  const hasCloudFront = process.env.CLOUDFRONT_DOMAIN

  const cursorPrompt = `Please help me remove AWS S3 file storage from my project by:

1. Deleting these files:
   - lib/aws.ts
   - lib/s3-utils.ts
   - lib/upload-utils.ts
   - app/api/upload/route.ts

2. Removing this dependency from package.json:
   - @aws-sdk/client-s3

3. Removing these environment variables from .env:
   - AWS_KEY
   - AWS_SECRET
   - AWS_REGION
   - AWS_BUCKET_PUBLIC
   - CLOUDFRONT_DOMAIN

4. Updating next.config.ts by removing *.s3.amazonaws.com entries from images.remotePatterns

5. And remove getstarted-storage from the get-started page

After these changes, please run \`pnpm install\` to update the dependency tree.`

  return (
    <>
      {!hasRequiredConfig ? (
        <div className="max-w-4xl mx-auto px-4 w-full">
          <Card className="p-8 mt-8 w-full">
            <Heading variant="h4" className="text-primary">
              Setup Required: File Storage (AWS S3)
            </Heading>
            <p>To set up file storage with AWS S3:</p>
            <ol className="list-decimal pl-6 space-y-4">
              <li>
                Create an AWS account and access the{" "}
                <a href="https://aws.amazon.com/console/" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                  AWS Console
                </a>
              </li>
              <li>Create an S3 bucket for public files and configure CORS settings</li>
              <li>Create an IAM user with appropriate S3 permissions and get the access credentials</li>
              <li>
                Create or update your <code className="px-2 py-1 bg-muted rounded">.env</code> file with the following variables:
                <pre className="mt-2 p-4 bg-muted rounded-md max-w-xl overflow-x-auto">
                  <code>
                    AWS_KEY=your_access_key_id{"\n"}
                    AWS_SECRET=your_secret_access_key{"\n"}
                    AWS_REGION=your_bucket_region{"\n"}
                    AWS_BUCKET_PUBLIC=your_bucket_name{"\n"}
                    CLOUDFRONT_DOMAIN=your_cloudfront_domain # Optional but recommended
                  </code>
                </pre>
              </li>
              <li>Restart your development server after adding the environment variables</li>
            </ol>

            <div className="mt-6 space-y-4">
              <div className="p-4 bg-amber-50 rounded-md">
                <p className="text-amber-800 text-sm">
                  <strong>Security Note:</strong> Ensure your AWS credentials have the minimum required permissions and are never committed to version control.
                </p>
              </div>
              <div className="p-4 bg-blue-50 rounded-md">
                <p className="text-blue-800 text-sm">
                  <strong>CloudFront Recommendation:</strong> While optional, setting up CloudFront is recommended for better performance and caching of your stored files.
                </p>
              </div>
            </div>

            <div className="pt-8">
              <CursorPrompt prompt={cursorPrompt} heading="Don’t need file storage?" />
            </div>
          </Card>
        </div>
      ) : (
        <div className="mx-auto text-center max-w-2xl w-full">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="features">
              <AccordionTrigger className="text-green-600 font-semibold">
                <div className="flex items-center">
                  ✓ File Storage is configured!
                  {!hasCloudFront && <span className="text-amber-500 italic tracking-wide text-xs ml-2 hidden sm:inline">(CloudFront recommended)</span>}
                </div>
              </AccordionTrigger>
              <AccordionContent>
                <div className="text-left">
                  <p className="mb-4">Your file storage system is ready to use. You can now:</p>
                  <ul className="list-disc pl-6 space-y-2">
                    <li>Upload files to S3</li>
                    <li>Generate pre-signed URLs for secure file access</li>
                    <li>Manage public and private files</li>
                    <li>Handle file uploads in your application</li>
                  </ul>
                  {!hasCloudFront && (
                    <div className="mt-6 p-4 bg-amber-50 rounded-md">
                      <p className="text-amber-800 text-sm">
                        <strong>Recommendation:</strong> Consider setting up CloudFront for improved performance and caching. Add the{" "}
                        <code className="px-1 py-0.5 bg-amber-100 rounded">CLOUDFRONT_DOMAIN</code> variable to your environment configuration.
                      </p>
                    </div>
                  )}
                  <div className="mt-6 p-4 bg-blue-50 rounded-md">
                    <p className="text-blue-800 text-sm">
                      <strong>Tip:</strong> You can manage your S3 buckets and CloudFront distributions in the{" "}
                      <a href="https://aws.amazon.com/console/" target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                        AWS Console
                      </a>
                    </p>
                  </div>
                </div>
                <div className="mt-4">
                  <Button asChild className="w-[210px]">
                    <Link href="/demo/upload">
                      <Upload className="w-5 h-5 scale-110 text-amber-300" />
                      Open Upload Demo
                    </Link>
                  </Button>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}
    </>
  )
}


--- File: app/get-started/_components/getstarted-testing.tsx ---

import { Card } from "@/components/ui/card"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Heading } from "@/components/typography/heading"
import { isClerkConfigured } from "@/lib/auth-utils"
import { CopyOneliner } from "@/components/ui/copy-oneliner"
import { CursorPrompt } from "./cursor-prompt"

export default async function GetStartedTesting() {
  // Check for required configuration
  const hasClerk = isClerkConfigured()
  const hasTestConfig = process.env.TEST_USER_EMAIL && process.env.TEST_USER_PASSWORD && process.env.TEST_USER_ID

  const cursorPrompt = `Please help me remove test user configuration from my project by:

1. Removing these environment variables from .env:
   - TEST_USER_EMAIL
   - TEST_USER_PASSWORD
   - TEST_USER_ID

2. Removing test-specific code and files:
   - Delete all files in /tests directory:
     - /tests/utils/auth-helpers.ts
     - /tests/utils/test-helpers.ts
     - /tests/utils/db-reset.ts
     - /tests/global-setup.ts
     - /tests/auth.spec.ts
     - /tests/admin.spec.ts
     - /tests/subscribe.spec.ts
     - /tests/contact.spec.ts
   - Delete /app/get-started/_components/getstarted-testing.tsx
   - Remove test user section from components/home/content-section.tsx

3. Remove test-related packages:
   - Uninstall @clerk/testing and @playwright/test
   - Remove test-related scripts from package.json

4. Remove test user section from .env and .example-env files`

  return (
    <>
      {!hasClerk || !hasTestConfig ? (
        <div className="max-w-4xl mx-auto px-4 w-full">
          <Card className="p-8 mt-8 w-full">
            <Heading variant="h4" className="text-primary">
              Setup Optional: Test User Configuration
            </Heading>
            <p>To set up test user credentials for automated testing:</p>
            <ol className="list-decimal pl-6 space-y-4">
              {!hasClerk && <li className="text-muted-foreground">First, set up Clerk authentication (see above)</li>}
              <li>
                <strong>Create a Test User:</strong>
                <ul className="list-disc pl-6 mt-2 space-y-2">
                  <li>Sign up for an account in your application using email/password</li>
                  <li>
                    Get your User ID from the{" "}
                    <a href="https://dashboard.clerk.com/users" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                      Clerk Dashboard
                    </a>
                  </li>
                  <li>Note down the email and password you used</li>
                </ul>
              </li>
              <li>
                Create or update your <code className="px-2 py-1 bg-muted rounded">.env</code> file with:
                <pre className="mt-2 p-4 bg-muted rounded-md max-w-xl overflow-x-auto">
                  <code>
                    # Replace with your actual test user credentials{"\n"}
                    TEST_USER_EMAIL=john.polacek@gmail.com{"\n"}
                    TEST_USER_PASSWORD=PartyStarter1!{"\n"}
                    TEST_USER_ID=user_2v6r3ksK9AuMtLjLlJnXbti6mCK
                  </code>
                </pre>
              </li>
              <li>Restart your development server after adding the environment variables</li>
            </ol>

            <div className="mt-6 space-y-4">
              <div className="p-4 bg-amber-50 rounded-md">
                <p className="text-amber-800 text-sm">
                  <strong>Security Note:</strong> Never use production credentials for testing. Create a dedicated test account with a strong password.
                </p>
              </div>
              <div className="p-4 bg-blue-50 rounded-md">
                <p className="text-blue-800 text-sm">
                  <strong>Tip:</strong> You can use these credentials in your end-to-end tests to automate user authentication flows.
                </p>
              </div>
            </div>

            <div className="pt-8">
              <CursorPrompt prompt={cursorPrompt} heading="Don't need test user configuration?" />
            </div>
          </Card>
        </div>
      ) : (
        <div className="mx-auto text-center max-w-2xl w-full">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="features">
              <AccordionTrigger className="text-green-600 font-semibold">
                <div className="flex items-center gap-2">
                  <span>✓ Test User is configured!</span>
                </div>
              </AccordionTrigger>
              <AccordionContent>
                <div className="text-left">
                  <p className="mb-4">Your test configuration is ready. You can now:</p>
                  <ul className="list-disc pl-6 space-y-2">
                    <li>Run automated authentication tests</li>
                    <li>Test protected routes and features</li>
                    <li>Simulate user sessions</li>
                    <li>Verify email-based flows</li>
                  </ul>
                </div>
                <CopyOneliner className="w-[210px] mt-4">pnpm pw</CopyOneliner>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}
    </>
  )
}


--- File: app/get-started/page.tsx ---

import { Icon } from "@/components/graphics/icon"
import { HeroSection } from "@/components/home/hero-section"
import { Heading } from "@/components/typography/heading"
import { redirect } from "next/navigation"
import { headers } from "next/headers"
import GetStartedClerk from "./_components/getstarted-clerk"
import GetStartedConvex from "./_components/getstarted-convex"
import GetStartedStorage from "./_components/getstarted-storage"
import GetStartedEmail from "./_components/getstarted-email"
import GetStartedAI from "./_components/getstarted-ai"
import GetStartedPayments from "./_components/getstarted-payments"
import GetStartedAdmin from "./_components/getstarted-admin"
import GetStartedTesting from "./_components/getstarted-testing"
import GetStartedExample from "./_components/getstarted-example"
import GetStartedConfig from "./_components/getstarted-config"
import { siteConfig } from "@/lib/config"

export default async function GetStartedPage() {
  // Check if localhost
  const headersList = await headers()
  const host = headersList.get("host") || ""
  const isLocalhost = host.includes("localhost") || host.includes("127.0.0.1")

  // If not localhost, redirect to home
  if (!isLocalhost) {
    redirect("/")
  }

  const isTitleCustomized = siteConfig.title !== ("Vibecode Party Starter" as string)
  const isDescriptionCustomized = siteConfig.description !== ("A modern Next.js starter with authentication, database, storage, AI, and more." as string)
  const additionalInstructions = `

Please come up with an implementation plan that follows the project's architecture patterns and uses existing components where possible. Do NOT make any code changes yet, just plan the implementation.
  `

  const examplePrompts = {
    creative: `Please help me create an AI Creative Studio with:

1. Text-to-image generation with multiple Replicate models
2. AI-powered image editing and variations using OpenAI
3. Text generation with custom system prompts
4. Save generations to AWS S3 and organize in collections
5. Community showcase with likes and comments
6. Export options with watermarking

Please implement this following the project's architecture patterns and using:
- Replicate for text-to-image models
- OpenAI for variations and text
- AWS S3 for storage
- Convex for collections and social features
- Clerk for user authentication`,

    marketplace: `Please help me create a marketplace feature with:

1. Product listings with search and filters
2. Shopping cart functionality
3. Stripe checkout integration
4. Order management
5. Seller profiles and ratings
6. Inventory tracking

Please implement this following the project's architecture patterns and existing payment integration.`,

    community: `Please help me create a community feature with:

1. User profiles with avatars
2. Discussion forums
3. Direct messaging
4. Activity feed
5. Reputation system
6. Content moderation tools

Please implement this following the project's architecture patterns and using existing auth and storage systems.`,
  }

  const customPrompt = `I am building a new project starting from a Next.js starter template (see the project README and package.json for more info). Please help me come up with a plan for building ${siteConfig.title} - ${siteConfig.description}`
  const newHomePrompt = `I am building a new project starting from a Next.js starter template. Please update the home page by removing the default starter project content and creating new home page content for ${siteConfig.title} - ${siteConfig.description}. Use our custom Heading component from @/components/typography/heading for any h1-h6 headings. Also update the Icon component with an icon from Lucide or another icon or svg library that would be appropriate for ${siteConfig.title}.`
  const newRoadmapPrompt = `I am building a new project starting from a Next.js starter template. Please update the roadmap page by removing the default starter project content at /app/roadmap/data/features.json and /app/roadmap/data/featureRequests.json with new data for ${siteConfig.title} - ${siteConfig.description}. `

  return (
    <div className="flex min-h-screen flex-col bg-violet-100/10">
      <HeroSection gettingStarted={true} title={siteConfig.title} />
      <div className="w-full flex justify-center -mt-6">
        <div className="w-12 h-12 flex items-center justify-center rounded-full bg-purple-50 border-4 border-primary/20 ring-8 ring-primary/50 scale-150">
          <div className="scale-125 opacity-80">
            <Icon />
          </div>
        </div>
      </div>
      <section className="flex flex-col gap-4 py-16 px-4">
        <Heading variant="h2" className="text-center">
          Getting Started
        </Heading>
        <div>
          <GetStartedConfig />
          <GetStartedClerk />
          <GetStartedConvex />
          <GetStartedStorage />
          <GetStartedEmail />
          <GetStartedAI />
          <GetStartedPayments />
          <GetStartedAdmin />
          <GetStartedTesting />
        </div>
      </section>

      <section className="flex flex-col gap-8 pb-16 max-w-4xl mx-auto px-4 w-full">
        <Heading variant="h2" className="text-center">
          What&apos;s Next?
        </Heading>
        <p className="text-center text-muted-foreground max-w-2xl mx-auto">
          Once you have your starter configured, here are some example features you can build. Click a card to copy the Cursor prompt and get started!
        </p>
        <div className="space-y-6">
          {isTitleCustomized && isDescriptionCustomized ? (
            <>
              <GetStartedExample title="Update the home page" prompt={newHomePrompt} />
              <GetStartedExample title="Come up with a build plan" prompt={customPrompt + additionalInstructions} />
              <GetStartedExample title="Update the roadmap" prompt={newRoadmapPrompt} />
            </>
          ) : (
            <>
              <GetStartedExample title="AI Creative Studio" prompt={examplePrompts.creative + additionalInstructions} />
              <GetStartedExample title="Marketplace" prompt={examplePrompts.marketplace + additionalInstructions} />
              <GetStartedExample title="Community Platform" prompt={examplePrompts.community + additionalInstructions} />
            </>
          )}
          <GetStartedExample isCommand={true} title="Generate llm.txt" prompt={`pnpm generate:llm`}>
            <p>
              Generate llm.txt so you can provide the entire codebase to an AI agent with a large context window like{" "}
              <a className="text-primary" href="https://gemini.google.com" target="_blank" rel="noopener noreferrer">
                Gemini
              </a>
              .
            </p>
          </GetStartedExample>
        </div>
      </section>

      <section className="flex flex-col gap-8 pb-32 max-w-4xl mx-auto px-4 w-full">
        <Heading variant="h2" className="text-center">
          Ship It!
        </Heading>
        <p className="text-center text-muted-foreground max-w-2xl mx-auto">
          Once you have your starter configured, we have a collection of npm scripts that can help you deploy your project with Github and Vercel (requires Github and Vercel CLI).
        </p>
        <GetStartedExample isCommand={true} title="Boot Project" prompt={`pnpm boot`}>
          <p>This will install the Github and Vercel CLI, login, and link your project.</p>
        </GetStartedExample>
        <GetStartedExample isCommand={true} title="Ship It" prompt={`pnpm ship`}>
          <p>Lint and build the project, run the tests then generate a commit message and push your code to Github and Vercel.</p>
        </GetStartedExample>
        <GetStartedExample isCommand={true} title="YOLO Deploy" prompt={`pnpm go`}>
          <p>Skip the tests and deploy straight to production.</p>
        </GetStartedExample>
      </section>
    </div>
  )
}


--- File: app/globals.css ---

@import 'tailwindcss';
@plugin "@tailwindcss/typography";

@custom-variant dark (&:is(.dark *));

@theme {
  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --color-sidebar: hsl(var(--sidebar));
  --color-sidebar-foreground: hsl(var(--sidebar-foreground));
  --color-sidebar-border: hsl(var(--sidebar-border));
  --color-sidebar-primary: hsl(var(--sidebar-primary));
  --color-sidebar-primary-foreground: hsl(var(--sidebar-primary-foreground));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;
  --animate-float: float 15s ease-in-out infinite;

  --font-body: ['var(--font-rethink-sans)'];
  --font-sans: ['var(--font-rethink-sans)'];

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
  @keyframes float {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-20px);
    }
  }
}

@utility container {
  margin-inline: auto;
  padding-inline: 1rem;
  @media (width >= --theme(--breakpoint-sm)) {
    max-width: none;
  }
  @media (width >= 1400px) {
    max-width: 1400px;
  }
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 246 80% 60%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 246 80% 60%;
    --radius: 0.5rem;
    --sidebar: 0 0% 100%;
    --sidebar-foreground: 240 10% 3.9%;
    --sidebar-border: 240 5.9% 90%;
    --sidebar-primary: 246 80% 60%;
    --sidebar-primary-foreground: 0 0% 98%;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 246 100% 70%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 246 80% 60%;
    --sidebar: 240 10% 3.9%;
    --sidebar-foreground: 0 0% 98%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-primary: 246 80% 60%;
    --sidebar-primary-foreground: 0 0% 98%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

html {
  font-family: var(--font-rethink-sans);
  text-wrap: pretty;
}

button {
  cursor: pointer;
}


--- File: app/layout.tsx ---

import Link from "next/link"
import { Rethink_Sans } from "next/font/google"
import { ThemeProvider } from "@/components/layout/theme-provider"
import { MainNav } from "@/components/nav/main-nav"
import { MobileNav } from "@/components/nav/mobile-nav"
import { ThemeToggle } from "@/components/nav/theme-toggle"
import AuthButtons from "@/components/nav/auth-buttons"
import { cn } from "@/lib/utils"
import { Toaster } from "sonner"
import { auth } from "@clerk/nextjs/server"
import { headers } from "next/headers"
import { trackVisit } from "@/app/_actions/track-visit"
import { RouteTracker } from "@/components/analytics/route-tracker"
import { siteConfig } from "@/lib/config"
import "./globals.css"
import { Github } from "lucide-react"
import { Providers } from "./providers"

const rethinkSans = Rethink_Sans({
  subsets: ["latin"],
  variable: "--font-rethink-sans",
})

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  let userId: string | null = null
  let isAdmin = false

  try {
    const { userId: id } = await auth()
    userId = id
    const adminUserIds = process.env.ADMIN_USER_IDS?.split(",") || []
    isAdmin = userId ? adminUserIds.includes(userId) : false
  } catch (error) {
    // Silently handle auth initialization errors
    console.warn("Auth initialization error during initialization (this can be expected in development):", error)
  }

  // Track the visit
  const headersList = await headers()

  // Get path from x-matched-path, fallback to x-url, then x-invoke-path, then /
  const path = headersList.get("x-matched-path") || (headersList.get("x-url") ? new URL(headersList.get("x-url")!).pathname : null) || headersList.get("x-invoke-path") || "/"

  await trackVisit(path)

  const currentYear = new Date().getFullYear()

  return (
    <html lang="en" suppressHydrationWarning className={`${rethinkSans.variable}`}>
      <body className={cn("min-h-screen bg-background font-sans antialiased")}>
        <Providers>
          <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
            <RouteTracker />
            <div className="relative flex min-h-screen flex-col">
              <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur-sm supports-backdrop-filter:bg-background/60">
                <div className="px-4 sm:px-8 md:px-16 flex h-16 items-center justify-between">
                  <div className="flex items-center gap-2 md:gap-6">
                    <MobileNav />
                    <MainNav isAdmin={isAdmin} />
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="flex items-center pr-2 gap-2">
                      {siteConfig.x && (
                        <Link href={`https://x.com/${siteConfig.x}`} target="_blank" className="text-muted-foreground hover:text-primary">
                          <span className="text-xl font-extrabold px-2 mx-1">𝕏</span>
                        </Link>
                      )}
                      {siteConfig.github && (
                        <Link href={siteConfig.github} target="_blank" className="px-1 mx-1 text-muted-foreground hover:text-primary">
                          <Github className="w-5 h-5" />
                        </Link>
                      )}
                    </div>
                    <ThemeToggle />
                    <AuthButtons />
                  </div>
                </div>
              </header>
              <main className="flex-1">{children}</main>
              <footer className="border-t py-6">
                <div className="container px-4 md:px-6">
                  <div className="flex flex-col md:flex-row justify-between items-center gap-4 text-center md:text-left text-sm">
                    <p>© {currentYear} VibeSwipe. All rights reserved.</p>
                    <nav className="flex gap-4">
                      <Link href="#" className="hover:underline underline-offset-4">
                        Terms
                      </Link>
                      <Link href="#" className="hover:underline underline-offset-4">
                        Privacy
                      </Link>
                      <Link href="#" className="hover:underline underline-offset-4">
                        Contact
                      </Link>
                    </nav>
                  </div>
                </div>
              </footer>
            </div>
            <Toaster position="top-center" />
          </ThemeProvider>
        </Providers>
      </body>
    </html>
  )
}


--- File: app/mailing-list/page.tsx ---

import { MailingListForm } from "@/components/forms/mailing-list-form"
import { Heading } from "@/components/typography/heading"
import { getSubscription, unsubscribe } from "@/app/_actions/mailing-list"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ConfigCard } from "@/components/admin/config-card"

async function handleUnsubscribe() {
  "use server"
  const result = await getSubscription()
  const subscription = result.success ? result.data : null
  if (!subscription?.email) return
  await unsubscribe(subscription.email)
}

export default async function MailingListPage() {
  // Check if required environment variables are configured
  const missingEnvVars = [
    {
      key: "SENDGRID_API_KEY",
      description: "Your SendGrid API key",
      isMissing: !process.env.SENDGRID_API_KEY,
    },
  ].filter((item) => item.isMissing)

  if (missingEnvVars.length > 0) {
    return (
      <div className="container max-w-2xl py-8 md:py-12">
        <ConfigCard title="Mailing List Setup Required" description="The mailing list feature needs configuration before it can be used." configItems={missingEnvVars} />
      </div>
    )
  }

  const result = await getSubscription()
  const subscription = result.success ? result.data : null

  return (
    <div className="container relative">
      <div className="mx-auto flex max-w-[980px] flex-col items-center gap-8 py-8 md:py-12">
        <Heading variant="h2" className="text-center leading-tight">
          {subscription ? (
            <>
              {subscription.unsubscribedAt ? (
                <>
                  <span className="text-primary">Unsubscribed</span> <span className="text-muted-foreground">from our mailing list.</span>
                </>
              ) : (
                <>
                  <span className="text-primary">Subscribed</span> <span className="text-muted-foreground">to our mailing list.</span>
                </>
              )}
            </>
          ) : (
            <>
              Join the <span className="text-primary">Mailing List</span>
            </>
          )}
        </Heading>

        {subscription ? (
          <Card className="w-full max-w-[500px] p-4 md:p-8 md:mt-4">
            <CardHeader className="md:pt-4">
              <CardTitle>Subscription Status</CardTitle>
            </CardHeader>
            <CardContent className="md:pb-4">
              {subscription.unsubscribedAt ? (
                <div className="space-y-4">
                  <p>You are currently unsubscribed. Your previous email was {subscription.email}.</p>
                  <MailingListForm initialEmail={subscription.email} />
                </div>
              ) : (
                <div className="space-y-4">
                  <p>You are currently subscribed with {subscription.email}.</p>
                  <form action={handleUnsubscribe}>
                    <Button variant="destructive" type="submit">
                      Unsubscribe
                    </Button>
                  </form>
                </div>
              )}
            </CardContent>
          </Card>
        ) : (
          <MailingListForm />
        )}
      </div>
    </div>
  )
}


--- File: app/matches/page.tsx ---

import { MatchesView } from "@/components/views/matches-view"

export default function MatchesPage() {
  return <MatchesView />
}


--- File: app/page.tsx ---

import { HomeView } from "@/components/views/home-view"

export default async function HomePage() {
  return (
    <div className="flex min-h-screen flex-col bg-green-100/10">
      <HomeView />
    </div>
  )
}


--- File: app/pay/page.tsx ---

"use client"

import { useState } from "react"
import { Card } from "@/components/ui/card"
import { Heading } from "@/components/typography/heading"
import { SignInButton, useUser } from "@clerk/nextjs"
import { Button } from "@/components/ui/button"
import { LogIn, Coffee } from "lucide-react"
import { StripePaymentForm } from "@/components/checkout/stripe-payment-form"

export default function DonatePage() {
  const { isSignedIn, isLoaded, user } = useUser()
  const [clientSecret, setClientSecret] = useState<string>("")
  const [isLoading, setIsLoading] = useState(false)
  const [showSuccess, setShowSuccess] = useState(false)

  const handleDonate = async () => {
    try {
      setIsLoading(true)
      const response = await fetch("/api/pay/intent", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          amount: 500, // $5.00
        }),
      })
      const data = await response.json()
      setClientSecret(data.clientSecret)
    } catch (error) {
      console.error("Error creating payment intent:", error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleSuccess = () => {
    setShowSuccess(true)
    setClientSecret("")
  }

  if (!isLoaded) {
    return null
  }

  return (
    <div className="container py-8 md:py-12">
      <div className="mx-auto flex max-w-[58rem] flex-col items-center space-y-4 text-center">
        <span className="inline-block rounded-full bg-primary/10 px-3 py-1 text-sm text-primary">Support the Project</span>
        <Heading variant="h2" className="font-heading text-3xl leading-[1.1] sm:text-3xl md:text-6xl font-bold">
          Buy me a <span className="text-primary">Coffee</span>
        </Heading>
        <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7">If you find this project helpful, consider supporting its development with a small donation.</p>
      </div>

      <div className="mx-auto max-w-md mt-12">
        <Card className="p-6">
          {!isSignedIn ? (
            <div className="py-12 text-center space-y-4">
              <div className="flex justify-center mb-4">
                <div className="p-3 rounded-full bg-primary/10">
                  <LogIn className="w-6 h-6 text-primary" />
                </div>
              </div>
              <h3 className="text-lg font-medium">Sign in to Donate</h3>
              <p className="text-sm text-muted-foreground mb-6">You need to be signed in to make a donation.</p>
              <SignInButton mode="modal">
                <Button size="lg">Sign in to Continue</Button>
              </SignInButton>
            </div>
          ) : showSuccess ? (
            <div className="py-12 text-center space-y-4">
              <div className="flex justify-center mb-4">
                <div className="p-3 rounded-full bg-green-500/10">
                  <Coffee className="w-6 h-6 text-green-500" />
                </div>
              </div>
              <h3 className="text-lg font-medium">Thank You!</h3>
              <p className="text-sm text-muted-foreground text-balance">Your support is greatly appreciated. Thank you for your donation!</p>
            </div>
          ) : clientSecret ? (
            <div className="space-y-6">
              <StripePaymentForm clientSecret={clientSecret} quantity={1} userId={user.id} onSuccess={handleSuccess} discountCode="" />
            </div>
          ) : (
            <div className="space-y-6">
              <div className="flex justify-center mb-8">
                <div className="p-4 rounded-full bg-primary/10">
                  <Coffee className="w-8 h-8 text-primary" />
                </div>
              </div>
              <div className="text-center space-y-2 mb-6">
                <h3 className="text-lg font-medium">Buy me a coffee</h3>
                <p className="text-sm text-muted-foreground">Support this project with a $5 donation</p>
              </div>
              <Button onClick={handleDonate} disabled={isLoading} className="w-full" size="lg">
                {isLoading ? "Loading..." : "Donate $5"}
              </Button>
            </div>
          )}
        </Card>
      </div>
    </div>
  )
}


--- File: app/privacy/page.tsx ---

import { Heading } from "@/components/typography/heading"

export default function PrivacyPage() {
  return (
    <div className="container py-12">
      <div className="mx-auto max-w-4xl">
        <div className="mb-12 text-center">
          <Heading variant="h1" className="mb-8">
            Privacy Policy
          </Heading>
        </div>

        <p className="text-gray-700 mb-6">Put your privacy policy here.</p>
      </div>
    </div>
  )
}


--- File: app/providers.tsx ---

"use client"

import { ClerkProvider } from "@clerk/nextjs"
import { ConvexProvider, ConvexReactClient } from "convex/react"
import { PropsWithChildren } from "react"

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!)

export function Providers({ children }: PropsWithChildren) {
  return (
    <ClerkProvider>
      <ConvexProvider client={convex}>{children}</ConvexProvider>
    </ClerkProvider>
  )
}


--- File: app/roadmap/data/featureRequests.json ---

[]


--- File: app/roadmap/data/features.json ---

[
  {
    "id": "1",
    "title": "Feature Roadmap",
    "votes": 42,
    "status": "completed",
    "description": "Add a feature roadmap page"
  },
  {
    "id": "3",
    "title": "API integration",
    "votes": 28,
    "status": "planned",
    "description": "Support for third-party API integrations"
  },
  {
    "id": "4",
    "title": "User authentication",
    "votes": 24,
    "status": "completed",
    "description": "Secure login and authentication system"
  },
  {
    "id": "5",
    "title": "Better analytics",
    "votes": 18,
    "status": "planned",
    "description": "Improve the analytics dashboard to provide more insights"
  },
  {
    "id": "6",
    "title": "Mailing List",
    "votes": 15,
    "status": "completed",
    "description": "Allow users to create and manage mailing lists"
  },
  {
    "id": "7",
    "title": "Switch to Convex",
    "votes": 32,
    "status": "completed",
    "description": "Switch to Convex for better DX and support for more projects on the free tier"
  },
  {
    "id": "8",
    "title": "Realtime updates",
    "votes": 19,
    "status": "backlog",
    "description": "Integrate with realtime service"
  },
  {
    "id": "9",
    "title": "Custom themes",
    "votes": 22,
    "status": "backlog",
    "description": "Allow users to more easily customize the application theme"
  },
  {
    "id": "10",
    "title": "Better documentation",
    "votes": 12,
    "status": "in-progress",
    "description": "Improve the documentation getting started quickly on new projects"
  }
]


--- File: app/roadmap/page.tsx ---

import { RoadmapView, type Feature, type FeatureRequest } from "@/components/admin/roadmap-view"
import initialFeatures from "./data/features.json"
import initialRequests from "./data/featureRequests.json"

export default function RoadmapPage() {
  const features = initialFeatures as Feature[]
  const featureRequests = initialRequests as FeatureRequest[]

  return <RoadmapView features={features} featureRequests={featureRequests} />
}


--- File: app/terms/page.tsx ---

import { Heading } from "@/components/typography/heading"

export default function TermsPage() {
  return (
    <div className="container py-12">
      <div className="mx-auto max-w-4xl">
        <div className="mb-12 text-center">
          <Heading variant="h1" className="mb-8">
            Terms of Service
          </Heading>
        </div>

        <p className="text-gray-700 mb-6">Put your terms of service here.</p>
      </div>
    </div>
  )
}


--- File: app/unsubscribe/page.tsx ---

import { Heading } from "@/components/typography/heading"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import UnsubscribeForm from "./unsubscribe-form"

export default function UnsubscribePage() {
  return (
    <div className="container max-w-md py-12 flex flex-col items-center justify-center min-h-[60vh]">
      <Card className="w-full">
        <CardHeader>
          <CardTitle>
            <Heading variant="h2" className="text-center">
              Unsubscribe from Mailing List
            </Heading>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <UnsubscribeForm />
        </CardContent>
      </Card>
    </div>
  )
}


--- File: app/unsubscribe/unsubscribe-form.tsx ---

"use client"

import { useState } from "react"
import { unsubscribe } from "@/app/_actions/mailing-list"
import { Button } from "@/components/ui/button"

export default function UnsubscribeForm() {
  const [email, setEmail] = useState("")
  const [status, setStatus] = useState<"idle" | "success" | "error">("idle")
  const [error, setError] = useState<string | null>(null)

  async function handleUnsubscribe(e: React.FormEvent) {
    e.preventDefault()
    setStatus("idle")
    setError(null)
    try {
      const result = await unsubscribe(email)
      if (result.success) {
        setStatus("success")
      } else {
        setStatus("error")
        setError(result.error || "Could not unsubscribe. Please check your email.")
      }
    } catch (err: unknown) {
      setStatus("error")
      setError(err instanceof Error ? err.message : "Could not unsubscribe. Please try again.")
    }
  }

  return (
    <>
      {status === "success" ? (
        <div className="text-center text-green-600 font-semibold py-6">You have been unsubscribed from our mailing list.</div>
      ) : (
        <form onSubmit={handleUnsubscribe} className="space-y-6">
          <div>
            <label htmlFor="email" className="block mb-2 font-medium">
              Email address
            </label>
            <input id="email" type="email" className="w-full border rounded px-3 py-2" value={email} onChange={(e) => setEmail(e.target.value)} required autoFocus />
          </div>
          <Button type="submit" className="w-full" size="lg" variant="destructive">
            Unsubscribe
          </Button>
          {status === "error" && <div className="text-red-600 text-sm text-center mt-2">{error}</div>}
        </form>
      )}
    </>
  )
}


--- File: components/admin/admin-config-message.tsx ---

"use client"

import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { useUser } from "@clerk/nextjs"
import { Copy, ShieldUser } from "lucide-react"
import { toast } from "sonner"

export function AdminConfigMessage() {
  const { user } = useUser()

  const handleCopyId = () => {
    if (user?.id) {
      navigator.clipboard.writeText(user.id)
      toast.success("User ID copied to clipboard!")
    }
  }

  return (
    <Card className="p-6">
      <div className="space-y-4">
        <div className="flex justify-center mb-4">
          <div className="p-2 rounded-full bg-amber-500/10">
            <ShieldUser className="w-8 h-8 text-amber-600" />
          </div>
        </div>
        <h3 className="text-lg font-medium text-center">Configure Admin Access</h3>
        <p className="text-sm text-muted-foreground text-center text-balance">
          To access admin features, you need to add your Clerk User ID to the <code className="px-1.5 py-0.5 rounded-md bg-muted">ADMIN_USER_IDS</code> environment variable.
        </p>
        <div className="p-4 rounded-lg bg-muted space-y-4">
          <div className="space-y-2">
            <p className="text-sm font-medium">Your Clerk User ID:</p>
            <div className="flex items-center gap-2">
              <code className="flex-1 px-3 py-2 rounded bg-background">{user?.id || "Not signed in"}</code>
              <Button size="icon" variant="outline" onClick={handleCopyId} disabled={!user?.id}>
                <Copy className="h-4 w-4" />
              </Button>
            </div>
          </div>
          <div className="space-y-2">
            <p className="text-sm font-medium">Add to your .env file:</p>
            <code className="block px-3 py-2 rounded bg-background text-sm">ADMIN_USER_IDS={user?.id || "your_user_id"}</code>
          </div>
        </div>
        <p className="text-xs text-muted-foreground text-center">After updating your .env file, restart your development server for changes to take effect.</p>
      </div>
    </Card>
  )
}


--- File: components/admin/config-card.tsx ---

import { AlertCircle, CheckCircle, XCircle } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

interface ConfigItem {
  key: string
  description: string
  isMissing?: boolean
}

interface FileToRemove {
  path: string
  description?: string
}

interface ConfigCardProps {
  title: string
  description: string
  configItems: ConfigItem[]
  filesToRemove?: FileToRemove[]
  alternativeTitle?: string
  alternativeDescription?: string
}

export function ConfigCard({
  title,
  description,
  configItems,
  filesToRemove,
  alternativeTitle = "Alternative option",
  alternativeDescription = "If you don't plan to use this feature, you can remove the following files:",
}: ConfigCardProps) {
  return (
    <Card className="w-full max-w-3xl mx-auto">
      <CardHeader>
        <CardTitle className="text-xl text-primary">{title}</CardTitle>
        <CardDescription className="text-primary/80">{description}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-2">
          <p className="text-sm text-muted-foreground">
            To enable this functionality, you need to configure the following environment variables in your <code className="bg-muted px-1 py-0.5 rounded text-sm font-mono">.env</code> file:
          </p>

          <div className="space-y-3 mt-4">
            {configItems.map((item) => (
              <div key={item.key} className="grid grid-cols-2 gap-2 items-start">
                <div className="flex items-center gap-2">
                  {item.isMissing ? <XCircle className="h-4 w-4 text-destructive" /> : <CheckCircle className="h-4 w-4 text-green-500" />}
                  <code className={`font-semibold py-1 rounded text-xs font-mono ${item.isMissing ? "text-destructive" : "text-green-500"}`}>{item.key}</code>
                </div>
                <p className="text-sm">{item.description}</p>
              </div>
            ))}
          </div>
        </div>

        {filesToRemove && filesToRemove.length > 0 && (
          <Alert className="border-primary/20 bg-primary/5">
            <AlertCircle className="h-4 w-4 text-primary" />
            <AlertTitle className="text-primary">{alternativeTitle}</AlertTitle>
            <AlertDescription className="text-primary/80">
              {alternativeDescription}
              <ul className="list-disc pl-5 mt-2 space-y-1">
                {filesToRemove.map((file) => (
                  <li key={file.path} className="text-sm">
                    <code className="bg-muted px-1 py-0.5 rounded text-xs font-mono">{file.path}</code>
                    {file.description && <span className="text-primary/70 ml-2">- {file.description}</span>}
                  </li>
                ))}
              </ul>
            </AlertDescription>
          </Alert>
        )}
      </CardContent>
    </Card>
  )
}


--- File: components/admin/dev-env-notice.tsx ---

import { Card, CardContent } from "@/components/ui/card"
import { Heading } from "../typography/heading"

export function DevEnvNotice() {
  return (
    <Card className="mb-8 bg-blue-500/5 border-blue-500/20">
      <CardContent>
        <div className="flex items-start gap-4">
          <div className="space-y-4 text-balance">
            <Heading variant="h5" className="font-medium">
              Development Environment
            </Heading>
            <p className="text-sm text-muted-foreground">
              You are running this application in a local development environment. The <code className="px-1.5 py-0.5 rounded-md bg-muted">ADMIN_USER_IDS</code> environment variable is currently set
              to:
            </p>
            <div className="mt-2">
              <code className="block w-full px-3 py-2 text-sm bg-muted rounded-md">{process.env.ADMIN_USER_IDS || "Not configured"}</code>
            </div>
            <p className="text-sm text-muted-foreground mt-2">
              To add more admin users, update this variable in your <code className="px-1 py-0.5 rounded-md bg-muted">.env</code> file with a comma-separated list of Clerk user IDs.
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}


--- File: components/admin/ideas/edit-image-modal.tsx ---

import { useState } from "react"
import { useMutation } from "convex/react"
import { api } from "@/lib/convex"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Id } from "@/convex/_generated/dataModel"
import { toast } from "sonner"
import { ImageIcon, AlertCircle } from "lucide-react"

interface EditImageModalProps {
  ideaId: Id<"ideas">
  currentImageUrl?: string
  isOpen: boolean
  onClose: () => void
}

export function EditImageModal({ ideaId, currentImageUrl, isOpen, onClose }: EditImageModalProps) {
  const [imageUrl, setImageUrl] = useState(currentImageUrl || "")
  const [isImageError, setIsImageError] = useState(false)
  const updateIdea = useMutation(api.ideas.updateIdea)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      await updateIdea({
        id: ideaId,
        update: {
          imageUrl,
        },
      })
      toast.success("Image URL updated successfully")
      onClose()
    } catch (error) {
      toast.error("Failed to update image URL")
      console.error(error)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit Image URL</DialogTitle>
          <DialogDescription>Update the image URL for this idea. The image should be publicly accessible.</DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="imageUrl">Image URL</Label>
              <Input
                id="imageUrl"
                value={imageUrl}
                onChange={(e) => {
                  setImageUrl(e.target.value)
                  setIsImageError(false)
                }}
                placeholder="https://example.com/image.jpg"
              />
            </div>
            <div className="relative aspect-video w-full bg-muted rounded-lg overflow-hidden">
              {imageUrl ? (
                <>
                  {/* eslint-disable-next-line @next/next/no-img-element */}
                  <img
                    src={imageUrl}
                    alt="Preview"
                    className={`w-full h-full object-cover transition-opacity duration-200 ${isImageError ? "opacity-0" : "opacity-100"}`}
                    onError={() => setIsImageError(true)}
                    onLoad={() => setIsImageError(false)}
                  />
                  {isImageError && (
                    <div className="absolute inset-0 flex flex-col items-center justify-center gap-2 p-4 text-center">
                      <AlertCircle className="w-8 h-8 text-destructive" />
                      <p className="text-sm text-muted-foreground">Failed to load image. Please check the URL and try again.</p>
                    </div>
                  )}
                </>
              ) : (
                <div className="absolute inset-0 flex flex-col items-center justify-center gap-2">
                  <ImageIcon className="w-8 h-8 text-muted-foreground" />
                  <p className="text-sm text-muted-foreground">Enter an image URL above to see a preview</p>
                </div>
              )}
            </div>
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button type="submit" disabled={isImageError && imageUrl !== ""}>
              Save changes
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}


--- File: components/admin/ideas/editable-cell.tsx ---

import { useState, useRef, useEffect } from "react"
import { useMutation } from "convex/react"
import { api } from "@/lib/convex"
import { Id } from "@/convex/_generated/dataModel"
import { toast } from "sonner"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { cn } from "@/lib/utils"

interface EditableCellProps {
  id: Id<"ideas">
  value: string
  field: "name" | "description"
  className?: string
}

export function EditableCell({ id, value, field, className }: EditableCellProps) {
  const [isEditing, setIsEditing] = useState(false)
  const [editValue, setEditValue] = useState(value)
  const textareaRef = useRef<HTMLTextAreaElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)
  const updateIdea = useMutation(api.ideas.updateIdea)

  useEffect(() => {
    if (isEditing) {
      if (field === "description") {
        textareaRef.current?.focus()
      } else {
        inputRef.current?.focus()
      }
    }
  }, [isEditing, field])

  const handleSave = async () => {
    if (editValue.trim() === "") {
      toast.error(`${field.charAt(0).toUpperCase() + field.slice(1)} cannot be empty`)
      return
    }

    try {
      await updateIdea({
        id,
        update: {
          [field]: editValue,
        },
      })
      setIsEditing(false)
      toast.success(`${field.charAt(0).toUpperCase() + field.slice(1)} updated successfully`)
    } catch (error) {
      toast.error(`Failed to update ${field}`)
      console.error(error)
    }
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSave()
    } else if (e.key === "Escape") {
      setEditValue(value)
      setIsEditing(false)
    }
  }

  if (isEditing) {
    if (field === "description") {
      return (
        <Textarea
          ref={textareaRef}
          value={editValue}
          onChange={(e) => setEditValue(e.target.value)}
          onBlur={handleSave}
          onKeyDown={handleKeyDown}
          className={cn("w-full focus-visible:ring-1 h-[80px] resize-none", className)}
        />
      )
    }
    return (
      <Input ref={inputRef} value={editValue} onChange={(e) => setEditValue(e.target.value)} onBlur={handleSave} onKeyDown={handleKeyDown} className={cn("w-full focus-visible:ring-1", className)} />
    )
  }

  return (
    <div onClick={() => setIsEditing(true)} className={cn("cursor-pointer rounded px-1 -mx-1 py-0.5 hover:bg-muted/50", className)}>
      {value}
    </div>
  )
}


--- File: components/admin/ideas/ideas-table.tsx ---

"use client"

import { useQuery } from "convex/react"
import { api } from "@/lib/convex"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Doc, Id } from "@/convex/_generated/dataModel"
import { Button } from "@/components/ui/button"
import { useState } from "react"
import Image from "next/image"
import { EditImageModal } from "./edit-image-modal"
import { ImageIcon } from "lucide-react"
import { EditableCell } from "./editable-cell"

type Idea = Doc<"ideas">

export function IdeasTable() {
  const [cursor, setCursor] = useState<string | null>(null)
  const [editingIdea, setEditingIdea] = useState<{ id: string; imageUrl?: string } | null>(null)
  const [failedImages, setFailedImages] = useState<Set<string>>(new Set())
  const PAGE_SIZE = 20

  const paginatedIdeas = useQuery(api.ideas.getAllIdeas, {
    paginationOpts: {
      cursor: cursor ?? undefined,
      numItems: PAGE_SIZE,
    },
  }) as { ideas: Idea[]; nextCursor: string | null } | undefined

  const handleImageError = (ideaId: string) => {
    setFailedImages((prev) => new Set(prev).add(ideaId))
  }

  if (!paginatedIdeas) {
    return <div>Loading...</div>
  }

  const { ideas, nextCursor } = paginatedIdeas

  if (ideas.length === 0 && !cursor) {
    return <div className="text-center text-muted-foreground py-8">No ideas found</div>
  }

  return (
    <div className="space-y-4">
      <div className="relative overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Image</TableHead>
              <TableHead>Name</TableHead>
              <TableHead>Description</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {ideas.map((idea: Idea) => (
              <TableRow key={idea._id}>
                <TableCell>
                  <div className="relative w-16 h-16 cursor-pointer group" onClick={() => setEditingIdea({ id: idea._id, imageUrl: idea.imageUrl })}>
                    {idea.imageUrl && !failedImages.has(idea._id) ? (
                      <>
                        <Image src={idea.imageUrl} alt={idea.name} fill className="object-cover rounded-md transition-opacity group-hover:opacity-50" onError={() => handleImageError(idea._id)} />
                        <div className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                          <ImageIcon className="w-6 h-6 text-foreground" />
                        </div>
                      </>
                    ) : (
                      <div className="w-full h-full bg-muted rounded-md flex items-center justify-center group-hover:bg-muted/80 transition-colors">
                        <span className="text-muted-foreground text-sm text-center px-1">{failedImages.has(idea._id) ? "Failed to load" : "No image"}</span>
                      </div>
                    )}
                  </div>
                </TableCell>
                <TableCell>
                  <EditableCell id={idea._id} value={idea.name} field="name" className="font-medium" />
                </TableCell>
                <TableCell>
                  <EditableCell id={idea._id} value={idea.description} field="description" className="w-full truncate" />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {(cursor || (nextCursor && ideas.length >= PAGE_SIZE)) && (
        <div className="flex justify-between items-center">
          <Button variant="outline" onClick={() => setCursor(null)} disabled={!cursor}>
            First Page
          </Button>
          <Button variant="outline" onClick={() => setCursor(nextCursor)} disabled={!nextCursor || ideas.length < PAGE_SIZE}>
            Next Page
          </Button>
        </div>
      )}

      {editingIdea && (
        <EditImageModal
          ideaId={editingIdea.id as Id<"ideas">}
          currentImageUrl={editingIdea.imageUrl}
          isOpen={true}
          onClose={() => {
            setEditingIdea(null)
            // Clear failed image state when closing modal
            setFailedImages((prev) => {
              const newSet = new Set(prev)
              newSet.delete(editingIdea.id)
              return newSet
            })
          }}
        />
      )}
    </div>
  )
}


--- File: components/admin/ideas/ideas-uploader.tsx ---

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { useMutation } from "convex/react"
import { api } from "@/lib/convex"
import { toast } from "sonner"
import { Doc } from "@/convex/_generated/dataModel"

// Type for new ideas (without system fields)
type IdeaInput = Omit<Doc<"ideas">, "_id" | "_creationTime" | "createdAt" | "updatedAt">

export function IdeasUploader() {
  const [file, setFile] = useState<File | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const importIdeas = useMutation(api.ideas.importIdeas)

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0]
    if (selectedFile && selectedFile.type === "application/json") {
      setFile(selectedFile)
    } else {
      toast.error("Please select a valid JSON file")
      e.target.value = ""
    }
  }

  const handleUpload = async () => {
    if (!file) return

    setIsLoading(true)
    try {
      const text = await file.text()
      const ideas = JSON.parse(text)

      // Validate ideas structure
      if (!Array.isArray(ideas)) {
        throw new Error("Invalid JSON format. Expected an array of ideas.")
      }

      // Basic validation of each idea
      const validIdeas = ideas.filter((idea): idea is IdeaInput => {
        return (
          typeof idea.name === "string" &&
          typeof idea.description === "string" &&
          (typeof idea.imageUrl === "string" || typeof idea.imageUrl === "undefined") &&
          (typeof idea.srcUrl === "string" || typeof idea.srcUrl === "undefined")
        )
      })

      if (validIdeas.length === 0) {
        throw new Error("No valid ideas found in the file")
      }

      // Import ideas
      await importIdeas({ ideas: validIdeas })
      toast.success(`Successfully imported ${validIdeas.length} ideas`)

      // Reset form
      setFile(null)
      const input = document.querySelector('input[type="file"]') as HTMLInputElement
      if (input) input.value = ""
    } catch (error) {
      toast.error(error instanceof Error ? error.message : "Failed to import ideas")
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex flex-col gap-4">
      <div className="flex gap-4">
        <Input type="file" accept=".json" onChange={handleFileChange} className="flex-1" />
        <Button onClick={handleUpload} disabled={!file || isLoading}>
          {isLoading ? "Importing..." : "Import"}
        </Button>
      </div>
      <div className="text-sm text-muted-foreground">Upload a JSON file containing an array of ideas. Each idea must have name and description. Optional fields: imageUrl, srcUrl.</div>
    </div>
  )
}


--- File: components/admin/mailing-list/mailing-list-subscriber-table.tsx ---

"use client"

import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Id } from "@/convex/_generated/dataModel"
import { formatDate } from "@/lib/utils"

type Subscriber = {
  id: Id<"mailing_list_subscriptions">
  userId: string
  email: string
  name: string | null
  preferences: {
    marketing: boolean
    updates: boolean
  }
  subscribedAt: string
  unsubscribedAt: string | null
  createdAt: string
  updatedAt: string
}

interface MailingListSubscriberTableProps {
  subscribers: Subscriber[]
}

export function MailingListSubscriberTable({ subscribers }: MailingListSubscriberTableProps) {
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Email</TableHead>
          <TableHead>Name</TableHead>
          <TableHead>Subscribed</TableHead>
          <TableHead>Status</TableHead>
          <TableHead>Preferences</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {subscribers.map((subscriber) => {
          return (
            <TableRow key={subscriber.id}>
              <TableCell>{subscriber.email}</TableCell>
              <TableCell>{subscriber.name || "-"}</TableCell>
              <TableCell>{formatDate(new Date(subscriber.subscribedAt).getTime())}</TableCell>
              <TableCell>{subscriber.unsubscribedAt ? <Badge variant="destructive">Unsubscribed</Badge> : <Badge variant="default">Active</Badge>}</TableCell>
              <TableCell>
                <div className="flex gap-2">
                  {subscriber.preferences.marketing && <Badge variant="outline">Marketing</Badge>}
                  {subscriber.preferences.updates && <Badge variant="outline">Updates</Badge>}
                </div>
              </TableCell>
            </TableRow>
          )
        })}
      </TableBody>
    </Table>
  )
}


--- File: components/admin/roadmap-view.tsx ---

"use client"

import { useState } from "react"
import { ChevronDown, ChevronUp, ArrowRight } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Heading } from "@/components/typography/heading"

export type Feature = {
  id: string
  title: string
  votes: number // Keeping this in the type for data compatibility
  status: "backlog" | "planned" | "in-progress" | "completed"
  description?: string
}

export type FeatureRequest = {
  id: string
  title: string
  votes: number // Keeping this in the type for data compatibility
  description?: string
}

interface RoadmapViewProps {
  features: Feature[]
  featureRequests: FeatureRequest[]
}

export function RoadmapView({ features, featureRequests }: RoadmapViewProps) {
  const [expanded, setExpanded] = useState<Record<string, boolean>>({
    backlog: false,
    planned: false,
    "in-progress": false,
    completed: false,
  })

  // Group features by status
  const backlogFeatures = features.filter((f) => f.status === "backlog").sort((a, b) => b.votes - a.votes)
  const plannedFeatures = features.filter((f) => f.status === "planned").sort((a, b) => b.votes - a.votes)
  const inProgressFeatures = features.filter((f) => f.status === "in-progress").sort((a, b) => b.votes - a.votes)
  const completedFeatures = features.filter((f) => f.status === "completed").sort((a, b) => b.votes - a.votes)

  // Sort feature requests by votes
  const sortedRequests = [...featureRequests].sort((a, b) => b.votes - a.votes)

  const toggleExpand = (section: string) => {
    setExpanded((prev) => ({
      ...prev,
      [section]: !prev[section],
    }))
  }

  // Function to limit and display cards
  const renderFeatureCards = (featureList: Feature[], status: string) => {
    const isExpanded = expanded[status]
    const displayedFeatures = isExpanded ? featureList : featureList.slice(0, 4)
    const hasMore = featureList.length > 4

    return (
      <>
        <div className="space-y-3">
          {displayedFeatures.map((feature) => (
            <Card key={feature.id} className="gap-2">
              <CardHeader>
                <CardTitle className="font-bold">{feature.title}</CardTitle>
              </CardHeader>
              <CardContent>{feature.description && <p className="text-xs text-muted-foreground">{feature.description}</p>}</CardContent>
            </Card>
          ))}
        </div>
        {hasMore && (
          <Button variant="ghost" size="sm" className="w-full mt-2 text-xs" onClick={() => toggleExpand(status)}>
            {isExpanded ? (
              <>
                Show Less <ChevronUp className="ml-1 h-3 w-3" />
              </>
            ) : (
              <>
                Show More ({featureList.length - 4} more) <ChevronDown className="ml-1 h-3 w-3" />
              </>
            )}
          </Button>
        )}
      </>
    )
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="container max-w-7xl mx-auto">
        <div className="text-center mb-8 space-y-2">
          <Heading variant="h2">Product Roadmap</Heading>
          <p className="text-muted-foreground">See what features are coming next and share your ideas</p>
        </div>

        <div className="mb-8">
          <div className="grid md:grid-cols-2 lg:grid-cols-4 p-4 gap-6">
            <div>
              <div className="font-medium text-lg mb-2 flex items-center gap-2">
                Backlog{" "}
                <Badge variant="outline" className="bg-gray-100 text-gray-700 hover:bg-gray-100 border-gray-200">
                  {backlogFeatures.length}
                </Badge>
              </div>
              {renderFeatureCards(backlogFeatures, "backlog")}
            </div>

            <div>
              <div className="font-medium text-lg mb-2 flex items-center gap-2">
                Up Next{" "}
                <Badge variant="outline" className="bg-amber-100 text-amber-700 hover:bg-amber-100 border-amber-200">
                  {plannedFeatures.length}
                </Badge>
              </div>
              {renderFeatureCards(plannedFeatures, "planned")}
            </div>

            <div>
              <div className="font-medium text-lg mb-2 flex items-center gap-2">
                In Progress{" "}
                <Badge variant="secondary" className="bg-sky-100 text-sky-700 hover:bg-sky-100 border-sky-200">
                  {inProgressFeatures.length}
                </Badge>
              </div>
              {renderFeatureCards(inProgressFeatures, "in-progress")}
            </div>

            <div>
              <div className="font-medium text-lg mb-2 flex items-center gap-2">
                Completed <Badge className="bg-emerald-100 text-emerald-700 hover:bg-emerald-100 border-emerald-200">{completedFeatures.length}</Badge>
              </div>
              {renderFeatureCards(completedFeatures, "completed")}
            </div>
          </div>
        </div>

        <div className="grid gap-8 md:grid-cols-[2fr_1fr] container border-t-2 border-dashed border-primary/50 pt-12">
          <Card>
            <CardHeader>
              <CardTitle>Feature Ideas</CardTitle>
              <CardDescription>Community suggestions that may be added to the roadmap.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {sortedRequests.map((request) => (
                  <div key={request.id} className="flex items-start gap-4 p-3 rounded-lg border">
                    <div className="flex-1 space-y-1">
                      <div className="flex items-center gap-2">
                        <span className="font-medium">{request.title}</span>
                        <Badge variant="outline" className="bg-foreground/10 text-foreground">
                          Idea
                        </Badge>
                      </div>
                      {request.description && <p className="text-sm text-muted-foreground">{request.description}</p>}
                    </div>
                  </div>
                ))}
                {featureRequests.length === 0 && (
                  <p className="text-sm text-muted-foreground border border-dashed border-foreground/10 rounded-md px-4 py-12 justify-center items-center flex">
                    No feature requests yet. Be the first to suggest a feature!
                  </p>
                )}
              </div>
            </CardContent>
          </Card>

          <div className="space-y-8">
            <Card>
              <CardHeader>
                <CardTitle>Suggest a Feature</CardTitle>
                <CardDescription>What would you like to see in our product?</CardDescription>
              </CardHeader>
              <CardContent>
                <Button asChild className="w-full">
                  <a href="/contact">
                    Suggest a Feature <ArrowRight className="ml-2 h-4 w-4" />
                  </a>
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Get Updates</CardTitle>
                <CardDescription>Subscribe to be notified when features are released</CardDescription>
              </CardHeader>
              <CardContent>
                <Button asChild className="w-full">
                  <a href="/subscribe">
                    Subscribe to Updates <ArrowRight className="ml-2 h-4 w-4" />
                  </a>
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}


--- File: components/admin/user-list.tsx ---

"use client"

import * as React from "react"
import { useState } from "react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { banUser } from "@/app/_actions/ban-user"
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { toast } from "sonner"

interface User {
  id: string
  email: string | undefined
  username: string | null
  firstName: string | null
  lastName: string | null
  imageUrl: string
  createdAt: string
  isAdmin: boolean
  banned: boolean
  publicMetadata?: {
    banReason?: string
  }
}

interface AdminUserListProps {
  initialUsers: User[]
}

export function AdminUserList({ initialUsers }: AdminUserListProps) {
  const [users, setUsers] = useState<User[]>(initialUsers)
  const [showBanDialog, setShowBanDialog] = useState(false)
  const [selectedUser, setSelectedUser] = useState<User | null>(null)
  const [banReason, setBanReason] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const handleBanClick = (user: User) => {
    setSelectedUser(user)
    setShowBanDialog(true)
  }

  const handleBanConfirm = async () => {
    if (!selectedUser) return

    setIsLoading(true)
    try {
      const result = await banUser(selectedUser.id, banReason)

      if (result.success) {
        // Update the local users state
        setUsers(
          users.map((user) => {
            if (user.id === selectedUser.id) {
              return {
                ...user,
                banned: !user.banned,
                publicMetadata: {
                  ...user.publicMetadata,
                  banReason: !user.banned ? banReason : undefined,
                },
              }
            }
            return user
          })
        )

        toast.success(selectedUser.banned ? "User unbanned successfully" : "User banned successfully")
        setShowBanDialog(false)
        setBanReason("")
        setSelectedUser(null)
      } else {
        toast.error("Failed to manage user ban status: " + result.error)
      }
    } catch {
      toast.error("An error occurred while managing user ban status")
    } finally {
      setIsLoading(false)
    }
  }

  const formatDate = (date: string | null) => {
    if (!date) return "Never"
    return new Date(date).toLocaleDateString()
  }

  return (
    <>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[30px]"></TableHead>
              <TableHead>User</TableHead>
              <TableHead>Email</TableHead>
              <TableHead>Username</TableHead>
              <TableHead>Joined</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {users.map((user) => (
              <React.Fragment key={user.id}>
                <TableRow>
                  <TableCell>{/* Placeholder for user action button */}</TableCell>
                  <TableCell className="flex items-center gap-2">
                    <Avatar className="h-8 w-8">
                      <AvatarImage src={user.imageUrl} alt={user.username || ""} />
                      <AvatarFallback>
                        {user.firstName?.[0]}
                        {user.lastName?.[0]}
                      </AvatarFallback>
                    </Avatar>
                    <span>
                      {user.firstName} {user.lastName}
                    </span>
                  </TableCell>
                  <TableCell>{user.email}</TableCell>
                  <TableCell>{user.username}</TableCell>
                  <TableCell>{formatDate(user.createdAt)}</TableCell>
                  <TableCell>{user.isAdmin ? <Badge>Admin</Badge> : user.banned ? <Badge variant="destructive">Banned</Badge> : <Badge variant="secondary">User</Badge>}</TableCell>
                  <TableCell>
                    {!user.isAdmin && (
                      <Button variant={user.banned ? "outline" : "destructive"} size="sm" onClick={() => handleBanClick(user)} disabled={isLoading}>
                        {user.banned ? "Unban User" : "Ban User"}
                      </Button>
                    )}
                  </TableCell>
                </TableRow>
              </React.Fragment>
            ))}
          </TableBody>
        </Table>
      </div>

      <AlertDialog open={showBanDialog} onOpenChange={setShowBanDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>{selectedUser?.banned ? "Unban User" : "Ban User"}</AlertDialogTitle>
            <AlertDialogDescription>
              {selectedUser?.banned ? (
                <>
                  Are you sure you want to unban {selectedUser?.firstName} {selectedUser?.lastName}?
                </>
              ) : (
                <>
                  Are you sure you want to ban {selectedUser?.firstName} {selectedUser?.lastName}? This action can be undone later.
                </>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          {!selectedUser?.banned && (
            <div className="py-4">
              <Label htmlFor="reason">Reason for ban (optional)</Label>
              <Input id="reason" value={banReason} onChange={(e) => setBanReason(e.target.value)} placeholder="Enter reason for ban" />
            </div>
          )}
          <AlertDialogFooter>
            <AlertDialogCancel
              onClick={() => {
                setShowBanDialog(false)
                setBanReason("")
                setSelectedUser(null)
              }}
            >
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction onClick={handleBanConfirm} disabled={isLoading}>
              {selectedUser?.banned ? "Unban User" : "Ban User"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  )
}


--- File: components/analytics/route-tracker.tsx ---

"use client"

import { usePathname } from "next/navigation"
import { useEffect, useRef } from "react"
import { trackVisit } from "@/app/_actions/track-visit"

export function RouteTracker() {
  const pathname = usePathname()
  const isFirstMount = useRef(true)

  useEffect(() => {
    // Don't track the initial page load since that's handled by the server component
    if (isFirstMount.current) {
      isFirstMount.current = false
      return
    }

    // Track subsequent route changes
    trackVisit(pathname)
  }, [pathname])

  return null // This is a utility component that doesn't render anything
}


--- File: components/checkout/stripe-payment-form.tsx ---

"use client"

import { useState } from "react"
import { loadStripe } from "@stripe/stripe-js"
import { PaymentElement, Elements, useStripe, useElements } from "@stripe/react-stripe-js"
import { Button } from "@/components/ui/button"

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!)

interface PaymentFormProps {
  quantity: number
  userId: string
  onSuccess?: () => void
  discountCode: string
}

function PaymentForm({ quantity, userId, onSuccess, discountCode }: PaymentFormProps) {
  const stripe = useStripe()
  const elements = useElements()
  const [loading, setLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!stripe || !elements || loading) return

    setLoading(true)

    try {
      const { error, paymentIntent } = await stripe.confirmPayment({
        elements,
        redirect: "if_required",
      })

      if (error) {
        console.error("Payment error:", error)
        return
      }

      if (paymentIntent.status === "succeeded") {
        await fetch("/api/credits/add", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            paymentIntentId: paymentIntent.id,
            userId,
            quantity,
            discountCode,
          }),
        })

        onSuccess?.()
      }
    } catch (error) {
      console.error("Payment processing error:", error)
    } finally {
      setLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="max-h-[400px] overflow-y-auto pr-2">
        <PaymentElement />
      </div>
      <Button type="submit" disabled={!stripe || loading} className="w-full mt-4">
        {loading ? "Processing..." : "Pay Now"}
      </Button>
    </form>
  )
}

interface StripePaymentFormProps extends PaymentFormProps {
  clientSecret: string
}

export function StripePaymentForm({ clientSecret, quantity, userId, onSuccess, discountCode }: StripePaymentFormProps) {
  return (
    <Elements stripe={stripePromise} options={{ clientSecret }}>
      <PaymentForm quantity={quantity} userId={userId} onSuccess={onSuccess} discountCode={discountCode} />
    </Elements>
  )
}


--- File: components/contact/contact-dialog.tsx ---

"use client"

import { useState } from "react"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { ContactForm } from "./contact-form"

interface ContactDialogProps {
  trigger: React.ReactNode
  subject?: string
}

export function ContactDialog({ trigger, subject }: ContactDialogProps) {
  const [open, setOpen] = useState(false)

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>{trigger}</DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Contact Us</DialogTitle>
          <DialogDescription>Send us a message and we&apos;ll get back to you as soon as possible.</DialogDescription>
        </DialogHeader>
        <ContactForm subject={subject} onSuccess={() => setOpen(false)} />
      </DialogContent>
    </Dialog>
  )
}


--- File: components/contact/contact-form.tsx ---

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { toast } from "sonner"
import { sendContactEmail } from "@/app/_actions/contact"
import { useTheme } from "next-themes"
import ReCAPTCHA from "react-google-recaptcha"

interface ContactFormProps {
  subject?: string
  onSuccess?: () => void
  requireCaptcha?: boolean
}

export function ContactForm({ subject = "Contact Message", onSuccess, requireCaptcha = false }: ContactFormProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [captchaToken, setCaptchaToken] = useState<string | null>(null)
  const { theme } = useTheme()

  async function onSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault()
    setIsLoading(true)

    const formData = new FormData(event.currentTarget)
    const data = {
      name: formData.get("name") as string,
      email: formData.get("email") as string,
      message: formData.get("message") as string,
      subject,
      ...(requireCaptcha && captchaToken && { captchaToken }),
    }

    try {
      if (requireCaptcha && !captchaToken) {
        throw new Error("Please complete the reCAPTCHA verification")
      }

      const result = await sendContactEmail(data)

      if (result.success) {
        toast.success("Message sent", {
          description: "We'll get back to you as soon as possible.",
        })
        onSuccess?.()
        // Reset form
        event.currentTarget.reset()
        setCaptchaToken(null)
      } else {
        throw new Error(result.error)
      }
    } catch (err) {
      const error = err as Error
      toast.error("Error", {
        description: error.message || "There was a problem sending your message. Please try again.",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <form onSubmit={onSubmit}>
      <div className="grid gap-4">
        <div className="grid gap-2">
          <Label htmlFor="name">Name</Label>
          <Input id="name" name="name" placeholder="Your name" required />
        </div>
        <div className="grid gap-2">
          <Label htmlFor="email">Email</Label>
          <Input id="email" name="email" type="email" placeholder="your@email.com" required />
        </div>
        <div className="grid gap-2">
          <Label htmlFor="message">Message</Label>
          <Textarea id="message" name="message" placeholder="Your message" required />
        </div>
        {requireCaptcha && (
          <div className="w-full">
            <ReCAPTCHA sitekey={process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY || ""} theme={theme === "dark" ? "dark" : "light"} onChange={(value) => setCaptchaToken(value)} />
          </div>
        )}
      </div>
      <div className="mt-4 flex justify-end">
        <Button type="submit" disabled={isLoading || (requireCaptcha && !captchaToken)}>
          {isLoading ? "Sending..." : "Send Message"}
        </Button>
      </div>
    </form>
  )
}


--- File: components/copy-prompt-buttons.tsx ---

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Copy, Check } from "lucide-react"
import { generatePRDPrompt, generateDevPrompt, copyToClipboard } from "@/lib/prompts"
import { toast } from "sonner"

interface CopyPromptButtonsProps {
  idea: {
    name: string
    description: string
  }
}

export function CopyPromptButtons({ idea }: CopyPromptButtonsProps) {
  const [copying, setCopying] = useState<"prd" | "dev" | null>(null)

  const handleCopy = async (type: "prd" | "dev") => {
    const prompt = type === "prd" ? generatePRDPrompt(idea) : generateDevPrompt(idea)
    setCopying(type)

    try {
      await copyToClipboard(prompt)
      toast.success(`${type === "prd" ? "PRD" : "Development"} prompt copied!`, {
        description: "Ready to use in your favorite AI assistant",
      })
    } catch (error) {
      console.error("Failed to copy", error)
      toast.error("Failed to copy", {
        description: "Please try again",
      })
    }

    // Reset copying state after a short delay
    setTimeout(() => setCopying(null), 2000)
  }

  return (
    <div className="flex gap-3">
      <Button variant="outline" size="sm" onClick={() => handleCopy("prd")} className="flex-1">
        {copying === "prd" ? <Check className="mr-2 h-4 w-4" /> : <Copy className="mr-2 h-4 w-4" />}
        Copy PRD Prompt
      </Button>
      <Button variant="outline" size="sm" onClick={() => handleCopy("dev")} className="flex-1">
        {copying === "dev" ? <Check className="mr-2 h-4 w-4" /> : <Copy className="mr-2 h-4 w-4" />}
        Copy Dev Prompt
      </Button>
    </div>
  )
}


--- File: components/demo/ai-demo-client.tsx ---

"use client"
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { useGenerateText } from "@/app/_hooks/useGenerateText"
import { useGenerateStrings } from "@/app/_hooks/useGenerateStrings"
import { useGenerateObject } from "@/app/_hooks/useGenerateObject"
import { useGenerateImage } from "@/app/_hooks/useGenerateImage"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import Image from "next/image"

export function AIDemoClient({ isMissingReplicateToken }: { isMissingReplicateToken: boolean }) {
  const [generatedText, setGeneratedText] = useState("")
  const [generatedStrings, setGeneratedStrings] = useState<string[]>([])
  const [isGenerating, setIsGenerating] = useState(false)
  const { streamText } = useGenerateText()
  const { generate: generateStrings } = useGenerateStrings()
  const { generate: generateObject, object: generatedObject, isLoading: isGeneratingObject } = useGenerateObject()
  const { generate: generateImage, imageUrl, isLoading: isGeneratingImage, error: imageError } = useGenerateImage()

  const handleGenerateText = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    const formData = new FormData(e.currentTarget)
    const prompt = formData.get("prompt") as string

    if (!prompt) return

    setIsGenerating(true)
    try {
      await streamText(prompt, (output: string) => {
        setGeneratedText(output)
      })
    } catch (error) {
      console.error("Error generating text:", error)
    } finally {
      setIsGenerating(false)
    }
  }

  const handleGenerateStrings = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    const formData = new FormData(e.currentTarget)
    const prompt = formData.get("prompt") as string
    const count = Number(formData.get("count")) || 6

    if (!prompt) return

    setIsGenerating(true)
    try {
      const strings = await generateStrings(prompt, count)
      setGeneratedStrings(strings)
    } catch (error) {
      console.error("Error generating strings:", error)
    } finally {
      setIsGenerating(false)
    }
  }

  const handleGenerateObject = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    const formData = new FormData(e.currentTarget)
    const prompt = formData.get("prompt") as string

    if (!prompt) return

    await generateObject(prompt)
  }

  const handleGenerateImage = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    const formData = new FormData(e.currentTarget)
    const prompt = formData.get("prompt") as string

    if (!prompt) return

    await generateImage(prompt)
  }

  return (
    <Tabs defaultValue="text" className="space-y-8">
      <TabsList className="grid w-full grid-cols-4">
        <TabsTrigger value="text">Text</TabsTrigger>
        <TabsTrigger value="strings">String Array</TabsTrigger>
        <TabsTrigger value="object">Structured Data</TabsTrigger>
        <TabsTrigger value="image">Image</TabsTrigger>
      </TabsList>

      <TabsContent value="text" className="space-y-8">
        <Card>
          <CardHeader>
            <CardTitle className="flex justify-between items-center">
              <div>Text Generation</div>
              <div className="font-mono text-sm font-normal text-primary">useGenerateText()</div>
            </CardTitle>
            <CardDescription>Enter a prompt and the AI will generate text based on your input.</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleGenerateText} className="space-y-4">
              <Textarea name="prompt" placeholder="Enter your prompt here..." className="min-h-[100px]" />
              <Button type="submit" className="w-full" disabled={isGenerating}>
                {isGenerating ? "Generating..." : "Generate Text"}
              </Button>
            </form>
          </CardContent>
        </Card>

        {generatedText && (
          <Card>
            <CardHeader>
              <CardTitle>Generated Text</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="whitespace-pre-wrap">{generatedText}</div>
            </CardContent>
          </Card>
        )}
      </TabsContent>

      <TabsContent value="strings" className="space-y-8">
        <Card>
          <CardHeader>
            <CardTitle className="flex justify-between items-center">
              <div>String Array Generation</div>
              <div className="font-mono text-sm font-normal text-primary">useGenerateStrings()</div>
            </CardTitle>
            <CardDescription>Generate multiple strings based on your prompt. Useful for brainstorming names, titles, or ideas.</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleGenerateStrings} className="space-y-4">
              <Textarea name="prompt" placeholder="Enter your prompt here..." className="min-h-[100px]" />
              <div className="flex items-center gap-4">
                <Input type="number" name="count" defaultValue="6" min="1" max="20" className="w-24" />
                <span className="text-sm text-muted-foreground">Number of strings to generate</span>
              </div>
              <Button type="submit" className="w-full" disabled={isGenerating}>
                {isGenerating ? "Generating..." : "Generate Strings"}
              </Button>
            </form>
          </CardContent>
        </Card>

        {generatedStrings.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>Generated Strings</CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="list-disc pl-6 space-y-2">
                {generatedStrings.map((string, index) => (
                  <li key={index}>{string}</li>
                ))}
              </ul>
            </CardContent>
          </Card>
        )}
      </TabsContent>

      <TabsContent value="object" className="space-y-8">
        <Card>
          <CardHeader>
            <CardTitle className="flex justify-between items-center">
              <div>Structured Data Generation</div>
              <div className="font-mono text-sm font-normal text-primary">useGenerateObject()</div>
            </CardTitle>
            <CardDescription>Generate structured data about a person. The AI will create a profile with name, age, occupation, interests, and contact information.</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleGenerateObject} className="space-y-4">
              <Textarea name="prompt" placeholder="Describe the person you want to generate data for..." className="min-h-[100px]" />
              <Button type="submit" className="w-full" disabled={isGeneratingObject}>
                {isGeneratingObject ? "Generating..." : "Generate Profile"}
              </Button>
            </form>
          </CardContent>
        </Card>

        {generatedObject && (
          <Card>
            <CardHeader>
              <CardTitle>Generated Profile</CardTitle>
            </CardHeader>
            <CardContent>
              <dl className="space-y-4">
                <div>
                  <dt className="font-semibold">Name</dt>
                  <dd>{generatedObject.name}</dd>
                </div>
                <div>
                  <dt className="font-semibold">Age</dt>
                  <dd>{generatedObject.age}</dd>
                </div>
                <div>
                  <dt className="font-semibold">Occupation</dt>
                  <dd>{generatedObject.occupation}</dd>
                </div>
                {generatedObject.interests && (
                  <div>
                    <dt className="font-semibold">Interests</dt>
                    <dd>
                      <ul className="list-disc pl-6">
                        {generatedObject.interests.map((interest, index) => (
                          <li key={index}>{interest}</li>
                        ))}
                      </ul>
                    </dd>
                  </div>
                )}
                {generatedObject.contact && (
                  <div>
                    <dt className="font-semibold">Contact</dt>
                    <dd className="space-y-1">
                      <div>Email: {generatedObject.contact.email}</div>
                      <div>Phone: {generatedObject.contact.phone}</div>
                    </dd>
                  </div>
                )}
              </dl>
            </CardContent>
          </Card>
        )}
      </TabsContent>

      <TabsContent value="image" className="space-y-8">
        <Card>
          <CardHeader>
            <CardTitle className="flex justify-between items-center">
              <div>Image Generation</div>
              <div className="font-mono text-sm font-normal text-primary">useGenerateImage()</div>
            </CardTitle>
            <CardDescription>Generate an image based on your description.</CardDescription>
          </CardHeader>
          <CardContent>
            {isMissingReplicateToken ? (
              <div className="flex flex-col items-center justify-center h-32 p-4 bg-muted rounded-lg text-red-600">
                <p>Please configure your Replicate API token to enable image generation.</p>
              </div>
            ) : (
              <>
                <div className="font-mono text-xs -mt-4 mb-1 w-full text-right text-muted-foreground">black-forest-labs/flux-schnell</div>
                <form onSubmit={handleGenerateImage} className="space-y-4">
                  <Textarea name="prompt" placeholder="Describe the image you want to generate..." className="min-h-[100px]" />
                  <Button type="submit" className="w-full" disabled={isGeneratingImage}>
                    {isGeneratingImage ? "Generating..." : "Generate Image"}
                  </Button>
                </form>
              </>
            )}
          </CardContent>
        </Card>

        {imageError && (
          <Card className="border-destructive">
            <CardHeader>
              <CardTitle className="text-destructive">Error</CardTitle>
            </CardHeader>
            <CardContent>
              <p>{imageError}</p>
            </CardContent>
          </Card>
        )}

        {imageUrl && !imageError && (
          <Card>
            <CardHeader>
              <CardTitle>Generated Image</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="relative aspect-[2/3] w-full overflow-hidden rounded-lg">
                <Image src={imageUrl} alt="AI generated image" fill className="object-cover" sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw" priority />
              </div>
            </CardContent>
          </Card>
        )}
      </TabsContent>
    </Tabs>
  )
}


--- File: components/demo/upload-demo-client.tsx ---

"use client"

import { useState } from "react"
import { ImageUpload } from "@/components/ui/image-upload"
import { Card } from "@/components/ui/card"
import { SignInButton, useUser } from "@clerk/nextjs"
import { Button } from "@/components/ui/button"
import { LogIn } from "lucide-react"

export function UploadDemoClient() {
  const [imageUrl, setImageUrl] = useState("")
  const { isSignedIn, isLoaded } = useUser()

  if (!isLoaded) {
    return null // or a loading spinner
  }

  return (
    <Card className="p-6">
      {isSignedIn ? (
        <div className="space-y-8">
          <div>
            <h3 className="text-lg font-medium mb-2">Upload an Image</h3>
            <p className="text-sm text-muted-foreground mb-4">Drag and drop an image file or click to select one from your computer.</p>
            <ImageUpload value={imageUrl} onChange={setImageUrl} onRemove={() => setImageUrl("")} />
          </div>
          {imageUrl && (
            <div>
              <h3 className="text-lg font-medium mb-2">Uploaded Image URL</h3>
              <code className="block w-full p-4 bg-muted rounded-lg text-sm break-all">{imageUrl}</code>
            </div>
          )}
        </div>
      ) : (
        <div className="py-12 text-center space-y-4">
          <div className="flex justify-center mb-4">
            <div className="p-3 rounded-full bg-primary/10">
              <LogIn className="w-6 h-6 text-primary" />
            </div>
          </div>
          <h3 className="text-lg font-medium">Sign in to Upload Files</h3>
          <p className="text-sm text-muted-foreground mb-6">You need to be signed in to use the file upload system.</p>
          <SignInButton mode="modal">
            <Button size="lg">Sign in to Continue</Button>
          </SignInButton>
        </div>
      )}
    </Card>
  )
}


--- File: components/edit-profile/index.tsx ---

"use client"

import { useState } from "react"
import { toast } from "sonner"
import { useUser } from "@clerk/nextjs"
import { Edit2, Plus, X } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { updateProfile } from "@/app/_actions/profile"

interface UserData {
  id: string
  username: string | null
  firstName: string | null
  lastName: string | null
  imageUrl: string
  unsafeMetadata?: Record<string, unknown>
}

interface Link {
  label: string
  url: string
}

interface EditProfileProps {
  user: UserData
  bio: string
  onUpdate: () => void
  isEditing: boolean
  onCancel: () => void
  onStartEdit: () => void
}

export function EditProfile({ user, bio, onUpdate, isEditing, onCancel, onStartEdit }: EditProfileProps) {
  const { user: currentUser } = useUser()
  const [loading, setLoading] = useState(false)
  const [profileData, setProfileData] = useState({
    firstName: user.firstName || "",
    lastName: user.lastName || "",
    bio: bio || "",
    website: {
      label: "Website",
      url: (user.unsafeMetadata?.website as string) || "",
    },
    twitter: {
      label: "Twitter",
      url: (user.unsafeMetadata?.twitter as string) || "",
    },
    github: {
      label: "GitHub",
      url: (user.unsafeMetadata?.github as string) || "",
    },
    customLinks: ((user.unsafeMetadata?.customLinks as Link[]) || []).map((link) => ({
      label: link.label || "",
      url: link.url || "",
    })),
  })

  const addCustomLink = () => {
    setProfileData((prev) => ({
      ...prev,
      customLinks: [...prev.customLinks, { label: "", url: "" }],
    }))
  }

  const removeCustomLink = (index: number) => {
    setProfileData((prev) => ({
      ...prev,
      customLinks: prev.customLinks.filter((_, i) => i !== index),
    }))
  }

  const updateCustomLink = (index: number, field: "label" | "url", value: string) => {
    setProfileData((prev) => ({
      ...prev,
      customLinks: prev.customLinks.map((link, i) => (i === index ? { ...link, [field]: value } : link)),
    }))
  }

  const isOwnProfile = currentUser?.username?.toLowerCase() === user.username?.toLowerCase()

  const handleSave = async () => {
    if (!currentUser || !isOwnProfile) return

    setLoading(true)
    try {
      const result = await updateProfile(currentUser.id, {
        firstName: profileData.firstName,
        lastName: profileData.lastName,
        bio: profileData.bio,
        website: profileData.website.url,
        twitter: profileData.twitter.url,
        github: profileData.github.url,
        customLinks: profileData.customLinks,
      })

      if (!result.success) {
        throw new Error(result.error)
      }

      toast.success("Profile updated", {
        description: "Your profile has been successfully updated.",
      })

      onUpdate()
    } catch (error) {
      console.error("Error updating profile:", error)
      toast.error("Error", {
        description: "Failed to update profile. Please try again.",
      })
    }
    setLoading(false)
  }

  if (!isOwnProfile) {
    return null
  }

  if (!isEditing) {
    return (
      <Button variant="outline" size="sm" onClick={onStartEdit}>
        <Edit2 className="mr-2 h-4 w-4" />
        Edit Profile
      </Button>
    )
  }

  return (
    <div className="space-y-4 w-full -mt-6">
      <h3 className="text-lg font-medium">Edit Profile</h3>
      <div>
        <Input placeholder="First Name" value={profileData.firstName} onChange={(e) => setProfileData({ ...profileData, firstName: e.target.value })} className="mb-2" />
        <Input placeholder="Last Name" value={profileData.lastName} onChange={(e) => setProfileData({ ...profileData, lastName: e.target.value })} />
      </div>
      <div>
        <h2 className="font-medium mb-2">About</h2>
        <Textarea placeholder="Tell us about yourself..." value={profileData.bio} onChange={(e) => setProfileData({ ...profileData, bio: e.target.value })} rows={4} />
      </div>
      <div>
        <div className="space-y-4">
          <div className="space-y-2 pt-2">
            <Label>Website</Label>
            <Input
              data-testid="website-url"
              value={profileData.website.url}
              onChange={(e) => setProfileData({ ...profileData, website: { ...profileData.website, url: e.target.value } })}
              placeholder="URL (e.g. https://example.com)"
            />
          </div>

          <div className="space-y-2">
            <Label>Twitter/X</Label>
            <Input
              data-testid="twitter-username"
              value={profileData.twitter.url}
              onChange={(e) => setProfileData({ ...profileData, twitter: { ...profileData.twitter, url: e.target.value } })}
              placeholder="Username (without @)"
            />
          </div>

          <div className="space-y-2">
            <Label>GitHub</Label>
            <Input
              data-testid="github-username"
              value={profileData.github.url}
              onChange={(e) => setProfileData({ ...profileData, github: { ...profileData.github, url: e.target.value } })}
              placeholder="Username"
            />
          </div>

          {profileData.customLinks.map((link, index) => (
            <div key={index} className="space-y-2">
              <div className="flex items-center justify-between">
                <div className="h-4" />
                <Button type="button" variant="ghost" size="sm" onClick={() => removeCustomLink(index)} className="h-8 w-8 p-0">
                  <X className="h-4 w-4" />
                </Button>
              </div>
              <div className="flex gap-2">
                <Input data-testid={`custom-link-${index}-label`} value={link.label} onChange={(e) => updateCustomLink(index, "label", e.target.value)} placeholder="Label" className="w-1/3" />
                <Input data-testid={`custom-link-${index}-url`} value={link.url} onChange={(e) => updateCustomLink(index, "url", e.target.value)} placeholder="URL" className="flex-1" />
              </div>
            </div>
          ))}

          <Button type="button" variant="outline" size="sm" onClick={addCustomLink} className="w-full">
            <Plus className="mr-2 h-4 w-4" />
            Add Custom Link
          </Button>
        </div>
      </div>
      <div className="flex justify-end gap-6 pt-4">
        <Button variant="ghost" onClick={onCancel} disabled={loading}>
          Cancel
        </Button>
        <Button id="saveProfileChanges" onClick={handleSave} disabled={loading} className="w-1/2">
          {loading ? "Saving..." : "Save Changes"}
        </Button>
      </div>
    </div>
  )
}


--- File: components/forms/mailing-list-form.tsx ---

"use client"

import { useState } from "react"
import { useUser } from "@clerk/nextjs"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { subscribe, updatePreferences } from "@/app/_actions/mailing-list"
import { toast } from "sonner"
import { MailingListPreferences } from "@/types/mailing-list"
import { useRouter } from "next/navigation"

export function MailingListForm({ initialEmail }: { initialEmail?: string }) {
  const router = useRouter()
  const { user, isSignedIn, isLoaded } = useUser()
  const [isLoading, setIsLoading] = useState(false)
  const [preferences, setPreferences] = useState<MailingListPreferences>({
    marketing: true,
    updates: true,
  })

  if (!isLoaded) {
    return null
  }

  const handleSubscribe = async () => {
    if (!isSignedIn || !user?.emailAddresses?.[0]?.emailAddress) {
      toast.error("Please sign in to subscribe")
      return
    }

    try {
      setIsLoading(true)
      await subscribe({
        userId: user.id,
        email: initialEmail || user.emailAddresses[0].emailAddress,
        name: user.fullName || user.firstName || null,
        preferences,
      })
      toast.success("Successfully subscribed to the mailing list!")
      router.refresh()
    } catch (error) {
      console.error("Error subscribing:", error)
      toast.error("Failed to subscribe. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  const handlePreferenceChange = async (key: keyof MailingListPreferences) => {
    const newPreferences = {
      ...preferences,
      [key]: !preferences[key],
    }
    setPreferences(newPreferences)

    if (isSignedIn) {
      try {
        await updatePreferences({ preferences: newPreferences })
        toast.success("Preferences updated successfully")
        router.refresh()
      } catch (error) {
        console.error("Error updating preferences:", error)
        toast.error("Failed to update preferences")
        setPreferences(preferences)
      }
    }
  }

  return (
    <Card className="w-full max-w-[500px] p-4 md:mt-4">
      <CardHeader className="md:pt-4">
        <CardTitle className="text-lg">Subscribe to Our Mailing List</CardTitle>
        <CardDescription>Stay updated with our latest news and updates</CardDescription>
      </CardHeader>
      <CardContent className="md:pb-4">
        <div className="space-y-4">
          <div className="space-y-2">
            <Label>Email Preferences</Label>
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Checkbox id="marketing" checked={preferences.marketing} onCheckedChange={() => handlePreferenceChange("marketing")} />
                <label htmlFor="marketing" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                  Marketing emails
                </label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox id="updates" checked={preferences.updates} onCheckedChange={() => handlePreferenceChange("updates")} />
                <label htmlFor="updates" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                  Product updates
                </label>
              </div>
            </div>
          </div>

          {isSignedIn ? (
            <div className="flex gap-4">
              <Button onClick={handleSubscribe} disabled={isLoading || !isSignedIn}>
                Subscribe
              </Button>
            </div>
          ) : (
            <p className="border p-4 rounded-lg mt-6">
              Please{" "}
              <a href="/sign-in" className="text-primary hover:underline">
                sign in
              </a>{" "}
              to subscribe to our mailing list.
            </p>
          )}
          <p className="text-sm text-muted-foreground pt-4">We respect your privacy and will never share your information. You can unsubscribe at any time.</p>
        </div>
      </CardContent>
    </Card>
  )
}


--- File: components/graphics/icon.tsx ---

import { SparklesIcon } from "@heroicons/react/24/solid"

export function Icon() {
  return (
    <span className="inline-flex flex-col items-center text-fuchsia-600 dark:text-fuchsia-500 select-none">
      <SparklesIcon className="w-3.5 h-3.5 -mb-2.5 relative" />
      <span className="scale-x-200 text-lg font-medium">V</span>
    </span>
  )
}


--- File: components/graphics/logo-lockup.tsx ---

import { Icon } from "./icon"

export function LogoLockup() {
  return (
    <div className="flex items-center gap-3">
      <Icon />
      <span className="text-xl font-bold bg-clip-text text-transparent bg-linear-to-br dark:bg-linear-to-br from-blue-500 via-purple-700 to-indigo-500 dark:from-blue-300 dark:via-purple-500 dark:to-indigo-500">
        party starter
      </span>
    </div>
  )
}


--- File: components/hero-idea-preview.tsx ---

"use client"

import { useEffect, useState } from "react"
import { Card } from "@/components/ui/card"
import { mockIdeas } from "@/lib/data/mock-ideas"
import Image from "next/image"
export function HeroIdeaPreview() {
  const [currentIndex, setCurrentIndex] = useState(0)

  // Slower animation - 5 seconds per card
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentIndex((current) => (current + 1) % mockIdeas.length)
    }, 5000) // 5 seconds per card

    return () => clearInterval(interval)
  }, [])

  // Determine rotation direction based on card index (alternating)
  const getRotation = (index: number): string => {
    return index % 2 === 0 ? "3deg" : "-3deg"
  }

  return (
    <div id="idea-carousel-preview" className="relative w-[300px] h-[450px] md:w-[350px] md:h-[525px] rounded-xl shadow-xl overflow-hidden bg-black ring-8 ring-primary/20">
      {/* All card images pre-rendered with CSS transitions */}
      {mockIdeas.map((idea, index) => (
        <Card
          key={idea.id}
          className="absolute inset-0 w-full h-full border-2 border-white/20 overflow-hidden flex flex-col items-center justify-end transition-all ease-in-out duration-500"
          style={{
            opacity: index === currentIndex ? 1 : 0,
            transform: index === currentIndex ? "rotate(0deg)" : `rotate(${getRotation(index)})`,
            zIndex: index === currentIndex ? 1 : 0,
            pointerEvents: "none",
            scale: index === currentIndex ? 1 : 1.1,
          }}
        >
          {idea.imageUrl ? (
            <Image src={idea.imageUrl} alt={idea.title} className="object-cover w-full h-full absolute inset-0" />
          ) : (
            <div className="absolute inset-0 w-full h-full bg-gray-900 flex items-center justify-center">
              <p className="text-white text-center">No image available</p>
            </div>
          )}
          <div className="absolute bottom-0 left-0 z-10 w-full h-full bg-gradient-to-t from-black via-transparent to-transparent" />
          <div className="absolute bottom-0 left-0 z-10 w-full h-full bg-gradient-to-b from-background/30 via-transparent to-transparent" />
          <div className="absolute bottom-0 left-0 w-full pt-6 pb-8 z-10 px-2 flex flex-col items-center">
            <h4 className="text-2xl md:text-3xl lg:text-4xl font-extrabold text-balance text-white text-center drop-shadow-lg pb-2">{idea.title}</h4>
            <p className="text-sm md:text-base text-balance text-white/80 text-center drop-shadow-lg">{idea.description}</p>
          </div>
        </Card>
      ))}
    </div>
  )
}


--- File: components/hero-section.tsx ---

"use client"

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { HeroIdeaPreview } from "@/components/hero-idea-preview"

export function HeroSection() {
  return (
    <section className="relative w-full py-12 md:py-16 bg-gradient-to-b from-background via-primary/5 to-primary/20 overflow-hidden">
      {/* Ultra-dense ocean wavy lines SVG background */}
      <div className="w-full h-64 absolute -bottom-24 left-0 bg-gradient-to-t from-background via-background z-10 to-transparent pointer-events-none" />
      <div className="absolute -top-4 left-0 w-full h-full pointer-events-none z-0 opacity-40 animate-wave-slow">
        <svg viewBox="0 0 1440 60" fill="none" xmlns="http://www.w3.org/2000/svg" className="w-full h-full" preserveAspectRatio="none">
          <g stroke="#38bdf8" strokeWidth="0.7" opacity="0.18">
            {Array.from({ length: 60 }).map((_, i) => (
              <path
                key={i}
                d={`M0 ${1 + i} Q 30 ${-1 + i} 60 ${1 + i} T 120 ${1 + i} T 180 ${1 + i} T 240 ${1 + i} T 300 ${1 + i} T 360 ${1 + i} T 420 ${1 + i} T 480 ${1 + i} T 540 ${1 + i} T 600 ${1 + i} T 660 ${1 + i} T 720 ${1 + i} T 780 ${1 + i} T 840 ${1 + i} T 900 ${1 + i} T 960 ${1 + i} T 1020 ${1 + i} T 1080 ${1 + i} T 1140 ${1 + i} T 1200 ${1 + i} T 1260 ${1 + i} T 1320 ${1 + i} T 1380 ${1 + i} T 1440 ${1 + i}`}
              />
            ))}
          </g>
        </svg>
      </div>
      {/* End ultra-dense ocean wavy lines SVG background */}
      <div className="container px-4 md:px-6 relative z-10">
        <div className="grid gap-6 lg:grid-cols-2 items-center max-w-6xl mx-auto">
          <div className="space-y-4">
            <h1 className="text-3xl font-medium tracking-tighter sm:text-4xl md:text-5xl lg:text-6xl">
              Find Your Next <span className="text-primary font-extrabold tracking-wide">Vibe</span>
            </h1>
            <p className="max-w-[600px] md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">Swipe through project ideas, vibe the ones you love.</p>
            <div className="flex flex-col gap-2 min-[400px]:flex-row">
              <Link href="/explore">
                <Button size="lg">Start Swiping</Button>
              </Link>
              <Link href="/submit">
                <Button size="lg" variant="outline">
                  Submit an Idea
                </Button>
              </Link>
            </div>
          </div>
          <div className="flex justify-center">
            <HeroIdeaPreview />
          </div>
        </div>
      </div>

      {/* Add animation keyframes via style tag */}
      <style jsx>{`
        @keyframes waveAnimation {
          0% {
            transform: translateY(0);
          }
          100% {
            transform: translateY(-15px);
          }
        }

        .animate-wave-slow {
          animation: waveAnimation 3s infinite alternate ease-in-out;
        }
      `}</style>
    </section>
  )
}


--- File: components/home/content-section.tsx ---

/* eslint-disable max-lines */

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "../ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../ui/tabs"
import { Rocket, Zap, Terminal, FileCode, FileCode2, Sparkles, CloudUpload, ShieldCheck, Blocks, Database } from "lucide-react"
import { Heading } from "@/components/typography/heading"
import { FeatureCard } from "./feature-card"
import { ContactFormPreview, AuthFlowPreview } from "./feature-previews"
import { ContactIcon, AuthIcon, FileUploadIcon } from "./feature-icons"
import { CopyToClipboard } from "@/components/ui/copy-to-clipboard"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { isDev } from "@/lib/auth-utils"
import Link from "next/link"
import { Button } from "../ui/button"
import { BoltIcon } from "@heroicons/react/24/solid"
import { CopyOneliner } from "../ui/copy-oneliner"

export function ContentSection() {
  return (
    <>
      <section className="container mt-12 lg:-mb-8">
        <div className="mx-auto max-w-[58rem]">
          <Card className="border-primary/30 border-dotted border-2 bg-background/60 backdrop-blur-sm">
            <CardContent>
              <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
                <div className="flex items-start sm:items-center gap-4">
                  <svg viewBox="0 0 24 24" className="h-9 w-9" fill="currentColor">
                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.237 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                  </svg>
                  <div className="flex flex-col">
                    <a href="https://github.com/johnpolacek/vibecode.party.starter" className="text-lg font-semibold hover:text-primary">
                      vibecode.party.starter
                    </a>
                    <p className="text-sm text-muted-foreground">A Next.js starter template for building full-stack apps with auth, database, storage, and more! 🚀</p>
                  </div>
                </div>
                <div className="flex gap-2">
                  <a
                    href="https://github.com/johnpolacek/vibecode.party.starter/stargazers"
                    className="inline-flex items-center justify-center gap-1 rounded-md bg-primary/10 px-3 py-1.5 text-sm font-medium text-primary hover:bg-primary/20"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4">
                      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
                    </svg>
                    Star
                  </a>
                  <a
                    href="https://github.com/johnpolacek/vibecode.party.starter/watchers"
                    className="inline-flex items-center justify-center gap-1 rounded-md bg-primary/10 px-3 py-1.5 text-sm font-medium text-primary hover:bg-primary/20"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-4 w-4">
                      <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" />
                      <circle cx="12" cy="12" r="3" />
                    </svg>
                    Watch
                  </a>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>
      {isDev() && (
        <section id="welcome" className="container mt-20">
          <Card className="text-center lg:p-8 !bg-linear-to-tl from-primary/20 to-primary/5 dark:!bg-black/70 text-primary max-w-3xl mx-auto">
            <CardHeader>
              <Heading variant="h3" className="dark:text-white">
                Welcome to the Vibecode Party Starter!
              </Heading>
            </CardHeader>
            <CardContent>
              <p className="text-balance dark:text-purple-300 text-sm sm:text-base">
                This is a dev environment where you can build your app locally before you&apos;re ready to ship it to production.
              </p>
              <div className="flex justify-center pt-6">
                <Button
                  asChild
                  size="lg"
                  className="text-2xl h-auto py-3 px-12 font-extrabold hover:scale-105 !bg-primary hover:bg-primary transition-all duration-300 hover:ring-8 hover:ring-primary/20"
                >
                  <Link href="/get-started" className="font-extrabold tracking-wide">
                    <BoltIcon className="h-5 w-5 text-amber-300 scale-150" />
                    Get Started
                  </Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        </section>
      )}
      <section id="features" className="container space-y-6 pt-8 md:pt-12 lg:pt-24">
        <div className="mx-auto flex max-w-[58rem] flex-col items-center space-y-4 text-center">
          <span className="inline-block rounded-full bg-primary/10 px-3 py-1 text-sm text-primary">The Good Stuff</span>
          <Heading variant="h2" className="font-heading text-3xl leading-[1.1] sm:text-3xl md:text-6xl font-bold">
            Party <span className="text-primary">Favors</span> Included
          </Heading>
          <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7">We packed all these awesome goodies so you can focus on vibing, not configuring!</p>
        </div>
        <div className="mx-auto grid justify-center gap-4 sm:grid-cols-2 md:max-w-[64rem] md:grid-cols-3">
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10 hover:-translate-y-1">
            <CardHeader className="flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium">UI Components</CardTitle>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="h-4 w-4 text-primary"
              >
                <path d="M12 2L2 7l10 5 10-5-10-5z"></path>
                <path d="M2 17l10 5 10-5"></path>
                <path d="M2 12l10 5 10-5"></path>
              </svg>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">Gorgeous Shadcn/UI components that make your app look like a million bucks! 💅</p>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10 hover:-translate-y-1">
            <CardHeader className="flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium">Authentication</CardTitle>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="h-4 w-4 text-primary"
              >
                <path d="M16 16v-3a2 2 0 0 0-2-2H10a2 2 0 0 0-2 2v3"></path>
                <circle cx="12" cy="7" r="3"></circle>
                <path d="M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20z"></path>
              </svg>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">Clerk auth that&apos;s so easy, you&apos;ll set it up before your coffee gets cold! ☕</p>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10 hover:-translate-y-1">
            <CardHeader className="flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium">Database</CardTitle>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="h-4 w-4 text-primary"
              >
                <path d="M12 2C6.5 2 2 4 2 7v10c0 3 4.5 5 10 5s10-2 10-5V7c0-3-4.5-5-10-5z"></path>
                <path d="M2 7c0 3 4.5 5 10 5s10-2 10-5"></path>
                <path d="M2 12c0 3 4.5 5 10 5s10-2 10-5"></path>
              </svg>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">Keep the party going with Convex! Our database setup lets you vibe with real-time data and automatic scaling. 🔥</p>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10 hover:-translate-y-1">
            <CardHeader className="flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium">File Storage</CardTitle>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="h-4 w-4 text-primary"
              >
                <path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
                <path d="M2 15h10"></path>
                <path d="M9 18l3-3-3-3"></path>
              </svg>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">AWS S3 storage that&apos;s ready to handle all your party pics! 📸</p>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10 hover:-translate-y-1">
            <CardHeader className="flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium">Email Service</CardTitle>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="h-4 w-4 text-primary"
              >
                <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                <polyline points="22,6 12,13 2,6"></polyline>
              </svg>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">SendGrid to make sure your messages slide into inboxes, not spam! 📨</p>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10 hover:-translate-y-1">
            <CardHeader className="flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium">Payments</CardTitle>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="h-4 w-4 text-primary"
              >
                <rect x="2" y="5" width="20" height="14" rx="2"></rect>
                <line x1="2" y1="10" x2="22" y2="10"></line>
              </svg>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">Stripe integration so smooth, money just slides right in! 💸</p>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10 hover:-translate-y-1">
            <CardHeader className="flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium">AI SDK Integration</CardTitle>
              <Sparkles className="h-4 w-4 text-primary" />
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">Use AI to generate text, structured data, and images.</p>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10">
            <CardHeader className="flex flex-row items-center justify-between space-y-0">
              <CardTitle className="text-sm font-medium">End-to-End Testing</CardTitle>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="h-4 w-4 text-primary"
              >
                <path d="M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"></path>
                <line x1="16" y1="8" x2="2" y2="22"></line>
                <line x1="17.5" y1="15" x2="9" y2="15"></line>
              </svg>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">Playwright testing with visual regression and CI/CD integration! 🧪</p>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="h-4 w-4 text-primary"
                >
                  <path d="M3 3v18h18"></path>
                  <path d="M18 17V9"></path>
                  <path d="M13 17V5"></path>
                  <path d="M8 17v-3"></path>
                </svg>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">Built-in visit tracking and route analytics with Convex! 📊</p>
            </CardContent>
          </Card>
        </div>
      </section>
      <section id="get-started" className="container pt-8 md:pt-12 lg:pt-24 relative">
        <div className="absolute inset-0 -z-10 overflow-hidden">
          <div className="absolute top-0 left-0 w-full h-full opacity-10 bg-[radial-gradient(circle_at_70%_30%,hsl(var(--secondary))_0,transparent_50%),radial-gradient(circle_at_30%_70%,hsl(var(--primary))_0,transparent_50%)]"></div>
        </div>
        <div className="mx-auto flex max-w-[58rem] flex-col items-center justify-center gap-4 text-center">
          <span className="inline-block rounded-full bg-primary/10 px-3 py-1 text-sm text-primary">Let&apos;s Go!</span>
          <Heading variant="h2" className="font-heading text-3xl leading-[1.1] sm:text-3xl md:text-6xl font-bold">
            Join the <span className="text-primary">Party</span>
          </Heading>
          <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7">Follow these simple steps and you&apos;ll be vibing in no time! 🕺💃</p>
        </div>
        <div className="mx-auto grid max-w-4xl items-center gap-10 py-12">
          <Tabs defaultValue="install" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="install" className="text-base">
                🚀 Installation
              </TabsTrigger>
              <TabsTrigger value="env" className="text-base">
                ⚙️ Environment
              </TabsTrigger>
              <TabsTrigger value="vibes" className="text-base">
                ✨ Vibes
              </TabsTrigger>
            </TabsList>
            <TabsContent value="install" className="mt-6">
              <Card className="border-primary/20 bg-background/60 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Rocket className="h-5 w-5 text-primary" />
                    Installation
                  </CardTitle>
                  <CardDescription>Get the party started on your machine in seconds!</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-1">
                      <Terminal className="h-4 w-4 text-primary" />
                      <p className="font-medium">Run the command and follow the prompts...</p>
                    </div>
                    <CopyOneliner className="mt-2 bg-background border-primary/70">npx vibecode-party-starter</CopyOneliner>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            <TabsContent value="env" className="mt-6">
              <Card className="border-primary/20 bg-background/60 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Zap className="h-5 w-5 text-primary" />
                    Environment Setup
                  </CardTitle>
                  <CardDescription>Set the mood with these environment variables! 🌈</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-muted-foreground">
                    Create a <code className="rounded-md bg-muted px-1.5 py-0.5">.env</code> file in the root of your project and add these magic spells:
                  </p>
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-2">
                      <p className="font-mono text-sm">🌐 App URLs</p>
                    </div>
                    <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                      <code className="text-sm font-mono">NEXT_PUBLIC_APP_URL=</code>
                    </pre>
                  </div>
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-2">
                      <p className="font-mono text-sm">✨ Clerk Authentication</p>
                    </div>
                    <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                      <code className="text-sm font-mono">
                        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=
                        <br />
                        CLERK_SECRET_KEY=
                        <br />
                        <br />
                        # Replace with your Clerk user ID after signing in
                        <br />
                        ADMIN_USER_IDS=
                      </code>
                    </pre>
                  </div>
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-2">
                      <p className="font-mono text-sm flex items-center gap-2">
                        <Database className="h-4 w-4 text-amber-600" /> Convex Database
                      </p>
                    </div>
                    <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                      <code className="text-sm font-mono">CONVEX_DEPLOY_KEY=</code>
                    </pre>
                  </div>
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-2">
                      <p className="font-mono text-sm">💾 AWS S3 & CloudFront</p>
                    </div>
                    <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                      <code className="text-sm font-mono">
                        AWS_KEY=
                        <br />
                        AWS_SECRET=
                        <br />
                        AWS_REGION=
                        <br />
                        AWS_BUCKET_PUBLIC=
                        <br />
                        CLOUDFRONT_DOMAIN=
                      </code>
                    </pre>
                  </div>
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-2">
                      <p className="font-mono text-sm">📨 Contact Form & Mailing List</p>
                    </div>
                    <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                      <code className="text-sm font-mono">
                        NEXT_PUBLIC_RECAPTCHA_SITE_KEY=
                        <br />
                        RECAPTCHA_SECRET_KEY=
                        <br />
                        SENDGRID_API_KEY=
                        <br />
                        SENDGRID_SENDER=
                        <br />
                        CONTACT_EMAIL=
                        <br />
                        UNSUBSCRIBE_SECRET=
                      </code>
                    </pre>
                  </div>
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-2">
                      <p className="font-mono text-sm">💳 Stripe Payments</p>
                    </div>
                    <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                      <code className="text-sm font-mono">
                        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=
                        <br />
                        STRIPE_SECRET_KEY=
                      </code>
                    </pre>
                  </div>
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-2">
                      <p className="font-mono text-sm">🧪 Testing</p>
                    </div>
                    <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                      <code className="text-sm font-mono">
                        TEST_USER_EMAIL=
                        <br />
                        TEST_USER_PASSWORD=
                        <br />
                        TEST_USER_ID=
                      </code>
                    </pre>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            <TabsContent value="vibes" className="mt-6">
              <Card className="border-primary/20 bg-background/60 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Zap className="h-5 w-5 text-primary" />
                    Vibecoding Workflows
                  </CardTitle>
                  <CardDescription>Get inspired with these example prompts to enhance your project! 🎨</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-2">
                      <FileCode className="h-4 w-4 text-primary" />
                      <p className="font-mono text-sm">Import components from a v0 project</p>
                    </div>
                    <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                      <code className="text-sm font-mono font-medium">{`npx shadcn@latest add "https://v0.dev/chat/b/asdfghjkl1234567890"`}</code>
                    </pre>
                    <p className="mt-2 text-sm text-muted-foreground">
                      Visit{" "}
                      <a href="https://v0.dev" className="text-primary hover:underline">
                        v0.dev
                      </a>{" "}
                      to generate components and import them into your project by selecting the &quot;Add to Codebase&quot; option.
                    </p>
                    <div className="flex items-center space-x-2 mt-6">
                      <FileCode2 className="h-4 w-4 text-primary" />
                      <p className="font-mono text-sm">Import shadcn/ui compatible components from the community.</p>
                    </div>
                    <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                      <code className="text-sm font-mono font-medium">{`pnpm dlx shadcn@latest add "https://21st.dev/r/designali-in/gradient-text"`}</code>
                    </pre>
                    <p className="mt-2 text-sm text-muted-foreground">
                      Find libraries and components like{" "}
                      <a href="https://21st.dev" className="text-primary hover:underline">
                        21st.dev
                      </a>
                      ,{" "}
                      <a href="https://magicui.design/" className="text-primary hover:underline">
                        Magic UI
                      </a>{" "}
                      &{" "}
                      <a href="https://bundui.io/docs/components/animated-gradient-text" className="text-primary hover:underline">
                        bundui
                      </a>{" "}
                      on{" "}
                      <a href="https://github.com/birobirobiro/awesome-shadcn-ui" className="text-primary hover:underline">
                        awesome-shadcn-ui
                      </a>
                    </p>
                  </div>
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-2">
                      <Terminal className="h-4 w-4 text-primary" />
                      <p className="font-mono text-sm">Example Cursor prompts</p>
                    </div>
                    <div id="cursor-prompts" className="mt-4 space-y-4">
                      <div className="rounded-lg border bg-background p-3">
                        <p className="font-mono text-sm text-primary mb-2"># Use shadcn/ui compatible components</p>
                        <div className="relative text-sm py-3 px-3 rounded-md border">
                          <CopyToClipboard position="top-right" className="!absolute !right-2 !top-1.5">
                            {"Update the header text to use the new @animated-gradient-text component."}
                          </CopyToClipboard>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="rounded-md bg-muted p-4">
                    <div className="flex items-center space-x-2">
                      <Terminal className="h-4 w-4 text-primary" />
                      <p className="font-mono text-sm">Vibe-code Friendly NPM Scripts</p>
                    </div>
                    <div id="npm-scripts" className="mt-4 space-y-4">
                      <div className="rounded-lg border bg-background p-3">
                        <p className="font-mono text-sm text-primary mb-2"># Go straight to production without even writing a commit message.</p>
                        <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                          <code className="text-sm font-mono">pnpm go</code>
                        </pre>
                        <p className="mt-2 text-sm text-muted-foreground">
                          Requires{" "}
                          <a href="https://github.com/Nutlope/aicommits" className="text-primary hover:underline">
                            aicommits
                          </a>{" "}
                          to be installed on your local dev environment.
                        </p>
                      </div>
                      <div className="rounded-lg border bg-background p-3">
                        <p className="font-mono text-sm text-primary mb-2"># Ship it to production with full CI checks.</p>
                        <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                          <code className="text-sm font-mono">pnpm ship</code>
                        </pre>
                        <p className="mt-2 text-sm text-muted-foreground">Runs linting, runs tests, backs up the database then pushes db changes to production - all in one command! 🚀</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </section>
      <section id="full-stack-components" className="container pt-4 md:pt-8 lg:pt-12">
        <div className="mx-auto flex max-w-[58rem] flex-col items-center justify-center gap-4 text-center">
          <span className="inline-block rounded-full bg-primary/10 px-3 py-1 text-sm text-primary">Ready-to-Use</span>
          <Heading variant="h2" className="font-heading text-3xl leading-[1.1] sm:text-3xl md:text-6xl font-bold">
            Full-Stack <span className="text-primary">Components</span>
          </Heading>
          <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7 text-balance">
            Plug-and-play full stack components that integrate with <span className="whitespace-nowrap">best-in-class</span> services! Just add your API keys and you&apos;re good to go!
          </p>
        </div>

        <div className="w-full pt-8 flex justify-center items-center">
          <iframe
            width="720"
            height="405"
            src="https://www.youtube.com/embed/1gzCvATzUdM?si=XSGrKNvWvSIcOiAW"
            title="YouTube video player"
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            referrerPolicy="strict-origin-when-cross-origin"
            allowFullScreen
          ></iframe>
        </div>

        <div id="feature-cards" className="mx-auto grid max-w-6xl gap-8 py-12">
          <FeatureCard
            title="Complete Auth Flow"
            description="A fully implemented authentication system with Clerk, including sign-up, login, password reset, and profile management."
            icon={<AuthIcon />}
            badgeText="Authentication"
            features={["Social login with Google, GitHub, etc.", "Email verification and password reset", "Protected routes and middleware", "Admin user role management"]}
            envVars={["NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY", "CLERK_SECRET_KEY"]}
            preview={<AuthFlowPreview />}
            gradientFrom="from-fuchsia-500/5"
            gradientTo="to-fuchsia-500/30"
            gradientCirclePosition="70% 30%"
            link="/account"
            linkText="Go to Account Page"
          />

          {/* File Upload Card */}
          <FeatureCard
            title="S3 File Upload System"
            description="A complete file upload system with AWS S3 integration, progress tracking, and image optimization."
            icon={<FileUploadIcon />}
            badgeText="File Upload"
            features={["Drag-and-drop file uploads", "Image preview and optimization", "Progress tracking with cancel option", "CloudFront CDN integration"]}
            envVars={["AWS_KEY", "AWS_SECRET", "AWS_BUCKET_PUBLIC"]}
            preview={
              <div className="bg-background/80 backdrop-blur-sm rounded-lg border border-blue-500/20 shadow-xl w-full max-w-md p-6">
                <div className="border-2 border-dashed border-blue-500/30 rounded-lg p-8 flex flex-col items-center justify-center">
                  <div className="w-16 h-16 rounded-full bg-blue-500/20 mb-4 flex items-center justify-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      className="h-8 w-8 text-blue-500"
                    >
                      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                      <polyline points="17 8 12 3 7 8"></polyline>
                      <line x1="12" y1="3" x2="12" y2="15"></line>
                    </svg>
                  </div>
                  <div className="h-4 w-48 bg-blue-500/20 rounded mb-2"></div>
                  <div className="h-4 w-32 bg-muted rounded mb-6"></div>
                  <div className="h-8 w-36 bg-blue-500/70 rounded"></div>
                </div>
                <div className="mt-4 space-y-2">
                  <div className="flex items-center">
                    <div className="h-10 w-10 bg-muted rounded mr-3"></div>
                    <div className="flex-1">
                      <div className="h-4 w-32 bg-muted rounded mb-2"></div>
                      <div className="h-2 w-full bg-muted/50 rounded-full overflow-hidden">
                        <div className="h-full w-3/4 bg-blue-500 rounded-full"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            }
            gradientFrom="from-blue-500/5"
            gradientTo="to-blue-500/30"
            gradientCirclePosition="50% 50%"
            link="/demo/upload"
            linkText="Try File Upload"
          />

          {/* Payment Processing Card */}
          <FeatureCard
            title="Stripe Payment System"
            description="A complete payment processing system with Stripe, including checkout, subscriptions, and webhooks."
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-1">
                <rect x="2" y="5" width="20" height="14" rx="2"></rect>
                <line x1="2" y1="10" x2="22" y2="10"></line>
              </svg>
            }
            badgeText="Payments"
            features={["One-time and subscription payments", "Secure checkout with Stripe Elements", "Webhook handling for payment events", "Customer portal for subscription management"]}
            envVars={["NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY", "STRIPE_SECRET_KEY"]}
            preview={
              <div className="bg-background/80 backdrop-blur-sm rounded-lg border border-emerald-500/20 shadow-xl w-full max-w-md p-6">
                <div className="space-y-4">
                  <div className="flex justify-between items-center mb-6">
                    <div className="h-8 w-24 bg-emerald-500/20 rounded"></div>
                    <div className="h-8 w-16 bg-muted rounded"></div>
                  </div>
                  <div className="space-y-2">
                    <div className="h-4 w-32 bg-emerald-500/20 rounded"></div>
                    <div className="h-10 w-full bg-muted rounded"></div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <div className="h-4 w-16 bg-emerald-500/20 rounded"></div>
                      <div className="h-10 w-full bg-muted rounded"></div>
                    </div>
                    <div className="space-y-2">
                      <div className="h-4 w-16 bg-emerald-500/20 rounded"></div>
                      <div className="h-10 w-full bg-muted rounded"></div>
                    </div>
                  </div>
                  <div className="h-10 w-full bg-emerald-500/70 rounded mt-4"></div>
                  <div className="flex justify-center">
                    <div className="h-4 w-48 bg-muted/50 rounded"></div>
                  </div>
                </div>
              </div>
            }
            gradientFrom="from-emerald-500/5"
            gradientTo="to-emerald-500/30"
            gradientCirclePosition="30% 70%"
            link="/pay"
            linkText="Try Payment System"
          />

          <FeatureCard
            title="Ready-to-Use Contact Form"
            description="A complete contact form solution with SendGrid email integration and Google ReCAPTCHA protection against bots."
            icon={<ContactIcon />}
            badgeText="Contact Form + SendGrid"
            features={["Sends emails via SendGrid API", "Protected with Google ReCAPTCHA v3", "Configurable recipient email via env vars", "Form validation with error handling"]}
            envVars={["SENDGRID_API_KEY", "CONTACT_EMAIL", "RECAPTCHA_SECRET_KEY"]}
            preview={<ContactFormPreview />}
            link="/contact"
            linkText="Go to Contact Form"
          />

          <FeatureCard
            title="Cloud Database"
            description="A complete database management interface with table views, data editing, and backup management."
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-1">
                <path d="M12 2C6.5 2 2 4 2 7v10c0 3 4.5 5 10 5s10-2 10-5V7c0-3-4.5-5-10-5z"></path>
                <path d="M2 7c0 3 4.5 5 10 5s10-2 10-5"></path>
                <path d="M2 12c0 3 4.5 5 10 5s10-2 10-5"></path>
              </svg>
            }
            badgeText="Cloud DB"
            features={["Easy local development database setup", "Basic user analytics tracking"]}
            envVars={["CONVEX_DEPLOY_KEY", "NEXT_PUBLIC_CONVEX_URL"]}
            preview={
              <div className="bg-background/80 backdrop-blur-sm rounded-lg border border-violet-500/20 shadow-xl w-full max-w-md p-6">
                <div className="space-y-4">
                  <div className="flex justify-between items-center mb-6">
                    <div className="h-8 w-32 bg-violet-500/20 rounded"></div>
                    <div className="h-8 w-20 bg-muted rounded"></div>
                  </div>
                  <div className="space-y-2">
                    <div className="grid grid-cols-4 gap-2">
                      <div className="h-8 w-full bg-violet-500/20 rounded"></div>
                      <div className="h-8 w-full bg-violet-500/20 rounded"></div>
                      <div className="h-8 w-full bg-violet-500/20 rounded"></div>
                      <div className="h-8 w-full bg-violet-500/20 rounded"></div>
                    </div>
                    <div className="space-y-2">
                      {[1, 2, 3].map((i) => (
                        <div key={i} className="h-12 w-full bg-muted rounded flex items-center px-4 gap-2">
                          <div className="h-4 w-1/4 bg-violet-500/20 rounded"></div>
                          <div className="h-4 w-1/4 bg-violet-500/20 rounded"></div>
                          <div className="h-4 w-1/4 bg-violet-500/20 rounded"></div>
                          <div className="h-4 w-1/4 bg-violet-500/20 rounded"></div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            }
            gradientFrom="from-violet-500/5"
            gradientTo="to-violet-500/30"
            gradientCirclePosition="40% 60%"
            link="/admin"
            linkText="Admin Dashboard"
          />

          <FeatureCard
            title="AI SDK Hooks"
            description="A complete AI integration with OpenAI and Replicate, including text generation, structured data, and image generation."
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-1">
                <path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z" />
                <circle cx="7.5" cy="8.5" r="1" />
                <circle cx="16.5" cy="8.5" r="1" />
                <path d="M12 18.5c-2.5 0-4-1.5-4-1.5" />
                <path d="M16 18.5c-2.5 0-4-1.5-4-1.5" />
              </svg>
            }
            badgeText="AI Integration"
            features={["Text generation with useGenerateText() and useGenerateTextStrings()", "Structured data generation with useGenerateObject()", "Image generation with useGenerateImage()"]}
            envVars={["OPENAI_API_KEY", "REPLICATE_API_TOKEN"]}
            preview={
              <div className="bg-background/80 backdrop-blur-sm rounded-lg border border-indigo-500/20 shadow-xl w-full max-w-md p-6">
                <div className="space-y-4">
                  <div className="flex justify-between items-center mb-6">
                    <div className="h-8 w-32 bg-indigo-500/20 rounded"></div>
                    <div className="h-8 w-20 bg-muted rounded"></div>
                  </div>
                  <div className="space-y-2">
                    <div className="h-24 w-full bg-muted rounded p-3">
                      <div className="h-4 w-3/4 bg-indigo-500/20 rounded mb-2"></div>
                      <div className="h-4 w-1/2 bg-indigo-500/20 rounded"></div>
                    </div>
                    <div className="h-10 w-full bg-indigo-500/70 rounded"></div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="h-32 w-full bg-muted rounded"></div>
                    <div className="space-y-2">
                      <div className="h-6 w-full bg-indigo-500/20 rounded"></div>
                      <div className="h-6 w-3/4 bg-indigo-500/20 rounded"></div>
                      <div className="h-6 w-1/2 bg-indigo-500/20 rounded"></div>
                    </div>
                  </div>
                </div>
              </div>
            }
            gradientFrom="from-indigo-500/5"
            gradientTo="to-indigo-500/30"
            gradientCirclePosition="60% 40%"
            link="/demo/ai"
            linkText="Try AI Demo"
          />

          <FeatureCard
            title="Built-In Cursor Rules"
            description="A complete set of project guidelines and best practices enforced through Cursor rules, helping maintain consistency and quality across your codebase."
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-1">
                <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                <polyline points="14 2 14 8 20 8" />
                <path d="M12 18v-6" />
                <path d="m9 15 3 3 3-3" />
              </svg>
            }
            badgeText="Project Guidelines"
            features={[
              "Project structure and file organization guidelines",
              "Component location and naming conventions",
              "Authentication patterns and best practices",
              "Database and frontend development rules",
            ]}
            preview={
              <div className="bg-background/80 backdrop-blur-sm rounded-lg border border-amber-500/20 shadow-xl w-full max-w-md p-6">
                <div className="space-y-3 font-mono text-amber-700/60 divide-y divide-amber-700/20">
                  <div className="pb-2 px-8">000-tooling</div>
                  <div className="pb-2 px-8">100-architecture</div>
                  <div className="pb-2 px-8">200-database</div>
                  <div className="pb-2 px-8">300-auth</div>
                  <div className="pb-2 px-8">400-frontend</div>
                  <div className="pb-2 px-8">999-meta</div>
                </div>
              </div>
            }
            gradientFrom="from-amber-500/5"
            gradientTo="to-amber-500/30"
            gradientCirclePosition="45% 55%"
            link="/.cursor/rules"
            linkText="View Cursor Rules"
          />

          <FeatureCard
            title="End-to-End Testing"
            description="A complete end-to-end testing setup with Playwright, including visual regression and CI/CD integration."
            icon={
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-1">
                <path d="M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"></path>
                <line x1="16" y1="8" x2="2" y2="22"></line>
                <line x1="17.5" y1="15" x2="9" y2="15"></line>
              </svg>
            }
            badgeText="E2E Tests"
            features={["Interactive test development with `pnpm pw`", "Visual regression testing built-in", "CI/CD ready test automation", "Cross-browser test coverage"]}
            envVars={["TEST_USER_EMAIL", "TEST_USER_PASSWORD", "TEST_USER_ID"]}
            preview={
              <div className="bg-background/80 backdrop-blur-sm rounded-lg border border-indigo-500/20 shadow-xl w-full max-w-xl sm:w-md p-6">
                <div className="space-y-4">
                  <div className="flex items-center gap-2 mb-6">
                    <div className="h-8 w-8 bg-emerald-500/20 rounded-full flex items-center justify-center">
                      <div className="h-4 w-4 bg-emerald-500/30 rounded-full"></div>
                    </div>
                    <div className="h-8 flex-1 bg-emerald-500/20 rounded"></div>
                  </div>
                  <div className="space-y-3">
                    {[1, 2, 3].map((i) => (
                      <div key={i} className="flex items-center gap-3">
                        <div className="h-4 w-4 bg-emerald-500/20 rounded-full flex-shrink-0"></div>
                        <div className="h-8 flex-1 bg-emerald-500/10 rounded flex items-center px-4">
                          <div className="h-3 w-3/4 bg-emerald-500/20 rounded"></div>
                        </div>
                        <div className="h-6 w-16 bg-emerald-500/20 rounded flex items-center justify-center">
                          <div className="h-2 w-8 bg-emerald-500/50 rounded"></div>
                        </div>
                      </div>
                    ))}
                  </div>
                  <div className="h-24 bg-emerald-500/10 rounded p-3">
                    <div className="space-y-2">
                      <div className="h-3 w-3/4 bg-emerald-500/20 rounded"></div>
                      <div className="h-3 w-1/2 bg-emerald-500/20 rounded"></div>
                      <div className="h-3 w-2/3 bg-emerald-500/20 rounded"></div>
                    </div>
                  </div>
                </div>
              </div>
            }
            gradientFrom="from-emerald-500/5"
            gradientTo="to-emerald-500/30"
            gradientCirclePosition="60% 40%"
          />
        </div>
      </section>
      <section id="services" className="container py-8 md:py-12">
        <div className="mx-auto flex max-w-[58rem] flex-col items-center justify-center gap-4 text-center">
          <span className="inline-block rounded-full bg-primary/10 px-3 py-1 text-sm text-primary">The VIP Section</span>
          <Heading variant="h2" className="font-heading text-3xl leading-[1.1] sm:text-3xl md:text-6xl font-bold">
            Built for <span className="text-primary">Vibecoding</span>
          </Heading>
          <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7">We&apos;ve got the hottest services ready to make your app the life of the party! 🔥</p>
        </div>
        <div className="mx-auto grid max-w-5xl gap-8 py-12 lg:grid-cols-2">
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="h-5 w-5 text-primary"
                >
                  <path d="M12 2L2 7l10 5 10-5-10-5z"></path>
                  <path d="M2 17l10 5 10-5"></path>
                  <path d="M2 12l10 5 10-5"></path>
                </svg>
                Shadcn/UI for Components
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 text-pretty">
              <p className="text-muted-foreground">
                Built on a foundation of{" "}
                <a href="https://ui.shadcn.com/" className="text-primary">
                  Shadcn/UI
                </a>{" "}
                with{" "}
                <a href="https://tailwindcss.com/" className="text-primary">
                  TailwindCSS
                </a>
                , you will be able to prompt Cursor and other LLMs to produce great UI/UX designs with components that are accessible and easy to use.
              </p>
              <p className="text-muted-foreground">
                Add more components auto-magically with{" "}
                <a href="https://v0.dev" className="text-primary">
                  v0
                </a>{" "}
                or other AI tools.
              </p>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileCode className="h-5 w-5 text-primary" />
                Vibecode-Friendly NPM Scripts
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 text-pretty">
              <p className="text-muted-foreground">
                Deploy your code quickly with scripts like <code className="rounded-md text-foreground text-semibold bg-muted px-1.5 py-0.5">pnpm go</code> or{" "}
                <code className="rounded-md text-foreground text-semibold bg-muted px-1.5 py-0.5">pnpm ship</code> that automatically run tests, write commit messages and get your changes into
                production so you can keep vibing.
              </p>
            </CardContent>
          </Card>
        </div>
      </section>
      <section id="development" className="container py-8 md:py-12 bg-primary/5 rounded-lg">
        <div className="mx-auto flex max-w-[58rem] flex-col items-center justify-center gap-4 text-center">
          <span className="inline-block rounded-full bg-primary/10 px-3 py-1 text-sm text-primary">Party Tricks</span>
          <Heading variant="h2" className="font-heading text-3xl leading-[1.1] sm:text-3xl md:text-6xl font-bold">
            Dev <span className="text-primary">Superpowers</span>
          </Heading>
          <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7">Tools to keep your code quality high and your vibes even higher! 🚀</p>
        </div>
        <div className="mx-auto grid max-w-4xl gap-8 py-12 lg:grid-cols-2">
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10 col-span-2">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Sparkles className="h-5 w-5 text-primary" />
                AI SDK Integration
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">Use AI to generate text, structured data and images.</p>
              <div className="mt-4 space-y-6">
                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <FileCode className="h-4 w-4 text-primary" />
                    <p className="text-sm">Text Generation with Streaming</p>
                  </div>
                  <Accordion type="single" collapsible>
                    <AccordionItem value="text" className="ring ring-foreground/10 rounded-lg">
                      <AccordionTrigger className="px-4 hover:no-underline hover:bg-muted [&[data-state=open]>svg]:rotate-180">
                        <code className="text-sm font-mono">{"const { generate, isLoading } = useGenerateText()"}</code>
                      </AccordionTrigger>
                      <AccordionContent className="px-4 pb-4">
                        <pre className="overflow-x-auto rounded-lg bg-background">
                          <code className="text-sm font-mono">
                            {`// Generate text with streaming
const handleGenerate = async () => {
  await generate({
    prompt: "Write a story about...",
    onStream: (text) => {
      // Handle streaming text updates
    }
  })
}`}
                          </code>
                        </pre>
                      </AccordionContent>
                    </AccordionItem>
                  </Accordion>
                </div>

                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <FileCode className="h-4 w-4 text-primary" />
                    <p className="text-sm">Structured Data Generation</p>
                  </div>
                  <Accordion type="single" collapsible>
                    <AccordionItem value="object" className="ring ring-foreground/10 rounded-lg">
                      <AccordionTrigger className="px-4 hover:no-underline hover:bg-muted [&[data-state=open]>svg]:rotate-180">
                        <code className="text-sm font-mono">{"const { generate, isLoading } = useGenerateObject()"}</code>
                      </AccordionTrigger>
                      <AccordionContent className="px-4 pb-4">
                        <pre className="overflow-x-auto rounded-lg bg-background">
                          <code className="text-sm font-mono">
                            {`// Generate structured data
const handleGenerate = async () => {
  const result = await generate({
    prompt: "Generate a profile for...",
    schema: {
      name: z.string(),
      age: z.number(),
      bio: z.string(),
      interests: z.array(z.string())
    }
  })
}`}
                          </code>
                        </pre>
                      </AccordionContent>
                    </AccordionItem>
                  </Accordion>
                </div>

                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <FileCode className="h-4 w-4 text-primary" />
                    <p className="text-sm">String Array Generation</p>
                  </div>
                  <Accordion type="single" collapsible>
                    <AccordionItem value="strings" className="ring ring-foreground/10 rounded-lg">
                      <AccordionTrigger className="px-4 hover:no-underline hover:bg-muted [&[data-state=open]>svg]:rotate-180">
                        <code className="text-sm font-mono">{"const { generate, isLoading } = useGenerateStrings()"}</code>
                      </AccordionTrigger>
                      <AccordionContent className="px-4 pb-4">
                        <pre className="overflow-x-auto rounded-lg bg-background">
                          <code className="text-sm font-mono">
                            {`// Generate array of strings
const handleGenerate = async () => {
  const strings = await generate({
    prompt: "Generate 5 creative names for...",
    count: 5
  })
}`}
                          </code>
                        </pre>
                      </AccordionContent>
                    </AccordionItem>
                  </Accordion>
                </div>

                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <FileCode className="h-4 w-4 text-primary" />
                    <p className="text-sm">Image Generation</p>
                  </div>
                  <Accordion type="single" collapsible>
                    <AccordionItem value="image" className="ring ring-foreground/10 rounded-lg">
                      <AccordionTrigger className="px-4 hover:no-underline hover:bg-muted [&[data-state=open]>svg]:rotate-180">
                        <code className="text-sm font-mono">{"const { generate, isLoading } = useGenerateImage()"}</code>
                      </AccordionTrigger>
                      <AccordionContent className="px-4 pb-4">
                        <pre className="overflow-x-auto rounded-lg bg-background">
                          <code className="text-sm font-mono">
                            {`// Generate an image
const handleGenerate = async () => {
  const imageUrl = await generate({
    prompt: "A beautiful landscape with...",
    width: 1024,
    height: 1024
  })
}`}
                          </code>
                        </pre>
                      </AccordionContent>
                    </AccordionItem>
                  </Accordion>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <ShieldCheck className="h-5 w-5 text-primary" />
                Test
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">
                Keep the party going without crashes! Our Playwright testing setup lets you vibe with confidence. Even AI can&apos;t break your app when you&apos;ve got tests! 🧪
              </p>
              <div className="mt-4 space-y-4">
                <div className="rounded-md bg-muted p-4">
                  <div className="flex items-center space-x-2">
                    <Terminal className="h-4 w-4 text-primary" />
                    <p className="font-mono text-sm">Open the test console</p>
                  </div>
                  <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                    <code className="text-sm font-mono">pnpm pw</code>
                  </pre>
                </div>
                <div className="rounded-md bg-muted p-4">
                  <div className="flex items-center space-x-2">
                    <Terminal className="h-4 w-4 text-primary" />
                    <p className="font-mono text-sm">Run the whole test suite</p>
                  </div>
                  <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                    <code className="text-sm font-mono">pnpm test</code>
                  </pre>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card className="border-primary/20 bg-background/60 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CloudUpload className="h-5 w-5 text-primary" />
                Ship
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">Vibe-code friendly NPM scripts 🌊</p>
              <div className="mt-4 space-y-4">
                <div className="rounded-md bg-muted p-4">
                  <div className="flex items-start space-x-2">
                    <Terminal className="h-4 w-4 relative top-0.5 text-primary flex-shrink-0" />
                    <p className="font-mono text-sm">Go straight to production without even writing a commit message.</p>
                  </div>
                  <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                    <code className="text-sm font-mono">pnpm go</code>
                  </pre>
                </div>
                <div className="rounded-md bg-muted p-4">
                  <div className="flex items-start space-x-2">
                    <Terminal className="h-4 w-4 relative top-0.5 text-primary flex-shrink-0" />
                    <p className="font-mono text-sm">Ship it to production with full CI checks.</p>
                  </div>
                  <pre className="mt-2 overflow-x-auto rounded-lg border bg-background p-4">
                    <code className="text-sm font-mono">pnpm ship</code>
                  </pre>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>
      <section className="container py-8 md:py-12 lg:py-24">
        <div className="mx-auto flex max-w-[58rem] flex-col items-center justify-center gap-4 text-center">
          <span className="inline-block rounded-full bg-primary/10 px-3 py-1 text-sm text-primary">Stay Connected</span>
          <Heading variant="h2" className="font-heading text-3xl leading-[1.1] sm:text-3xl md:text-6xl font-bold">
            Join the <span className="text-primary">Vibe Tribe</span>
          </Heading>
          <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7 text-balance">
            Sign up for our mailing list and stay up to date with the latest features, updates, and community vibes! 🎉
          </p>
          <Button asChild size="lg" className="mt-4">
            <Link href="/mailing-list" className="gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-5 w-5">
                <path d="M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10c0-.63.3-1.22.8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z" />
                <path d="m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10" />
              </svg>
              Sign Up for Mailing List
            </Link>
          </Button>
        </div>
      </section>
      <section className="container py-8 md:py-12 lg:py-24">
        <div className="mx-auto flex max-w-[58rem] flex-col items-center justify-center gap-4 text-center">
          <Heading variant="h2" className="font-heading text-3xl leading-[1.1] sm:text-3xl md:text-6xl font-bold">
            Features <span className="text-green-500">Roadmap</span>
          </Heading>
          <p className="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7 text-balance">See what&apos;s coming next and share your ideas.</p>
          <Button asChild size="lg" className="mt-4 bg-green-500 hover:bg-green-600">
            <Link href="/roadmap">
              <Blocks className="h-5 w-5 scale-125" />
              View Roadmap
            </Link>
          </Button>
        </div>
      </section>
    </>
  )
}


--- File: components/home/feature-card.tsx ---

import { Card } from "@/components/ui/card"
import { Check, ArrowRight } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { cn } from "@/lib/utils"
import { Heading } from "@/components/typography/heading"

interface FeatureCardProps {
  title: string
  description: string
  icon: React.ReactNode
  badgeText: string
  features: string[]
  envVars?: string[]
  preview: React.ReactNode
  gradientFrom?: string
  gradientTo?: string
  gradientCirclePosition?: string
  link?: string
  linkText?: string
}

export function FeatureCard({
  title,
  description,
  icon,
  badgeText,
  features,
  envVars,
  preview,
  gradientFrom = "from-primary/5",
  gradientTo = "to-primary/30",
  gradientCirclePosition = "30% 20%",
  link,
  linkText = "Try it",
}: FeatureCardProps) {
  return (
    <Card className="border-primary/20 bg-background/60 py-0 backdrop-blur-sm hover:bg-background/80 transition-all hover:shadow-md hover:shadow-primary/10 overflow-hidden">
      <div className="grid md:grid-cols-2 gap-0">
        <div className="p-6 flex flex-col justify-between">
          <div>
            <div className="inline-flex items-center rounded-full border border-primary/20 bg-primary/10 px-3 py-1 text-sm text-primary mb-4">
              {icon}
              {badgeText}
            </div>
            <Heading variant="h3" className="text-2xl font-bold mb-2">
              {title}
            </Heading>
            <p className="text-muted-foreground mb-4">{description}</p>
          </div>
          <ul className="space-y-2 mb-6">
            {features.map((feature, index) => (
              <li key={index} className="flex items-start">
                <Check className="mr-2 h-4 w-4 mt-1 text-green-500" />
                <span>{feature}</span>
              </li>
            ))}
          </ul>
          <div className="space-y-4">
            {envVars && envVars.length > 0 && (
              <div className="flex flex-wrap gap-x-2 gap-y-1 justify-start text-sm text-muted-foreground">
                {envVars.map((envVar) => (
                  <code key={envVar} className={`rounded-md bg-muted px-1.5 py-0.5 text-xs`}>
                    {envVar}
                  </code>
                ))}
              </div>
            )}
            {link && (
              <div>
                <Link href={link}>
                  <Button className="group">
                    {linkText}
                    <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                  </Button>
                </Link>
              </div>
            )}
          </div>
        </div>
        <div className={cn("p-6 flex items-center justify-center relative overflow-hidden bg-gradient-to-br", gradientFrom, gradientTo)}>
          <div className={`absolute inset-0 bg-[radial-gradient(circle_at_${gradientCirclePosition},currentColor_0,transparent_60%)] opacity-20`} />
          <div className="relative z-10">{preview}</div>
        </div>
      </div>
    </Card>
  )
}


--- File: components/home/feature-icons.tsx ---

export function ContactIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-1">
      <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
      <polyline points="22,6 12,13 2,6"></polyline>
    </svg>
  )
}

export function AuthIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-1">
      <path d="M16 16v-3a2 2 0 0 0-2-2H10a2 2 0 0 0-2 2v3"></path>
      <circle cx="12" cy="7" r="3"></circle>
      <path d="M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20z"></path>
    </svg>
  )
}

export function FileUploadIcon() {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-3.5 w-3.5 mr-1">
      <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 1 1 0 9h-2.5"></path>
      <path d="M12 12v9"></path>
      <path d="m16 16-4-4-4 4"></path>
    </svg>
  )
}


--- File: components/home/feature-previews.tsx ---

export function ContactFormPreview() {
  return (
    <div className="bg-background/80 backdrop-blur-sm rounded-lg border border-primary/20 shadow-xl w-full sm:w-96 max-w-md pt-6 px-6">
      <div className="space-y-4">
        <div className="space-y-2">
          <div className="h-4 w-24 bg-primary/20 rounded"></div>
          <div className="h-8 w-full bg-muted rounded"></div>
        </div>
        <div className="space-y-2">
          <div className="h-4 w-24 bg-primary/20 rounded"></div>
          <div className="h-8 w-full bg-muted rounded"></div>
        </div>
        <div className="space-y-2">
          <div className="h-4 w-24 bg-primary/20 rounded"></div>
          <div className="h-24 w-full bg-muted rounded"></div>
        </div>
        <div className="flex justify-end">
          <div className="h-10 w-28 bg-primary/70 rounded"></div>
        </div>
        <div className="h-4 w-full bg-muted/50 rounded"></div>
      </div>
    </div>
  )
}

export function AuthFlowPreview() {
  return (
    <div className="grid grid-cols-2 gap-4 relative z-10 w-full max-w-md">
      <div className="bg-background/80 backdrop-blur-sm rounded-lg border border-secondary/20 shadow-xl p-4 flex flex-col items-center justify-center aspect-[4/5]">
        <div className="w-12 h-12 rounded-full bg-secondary/20 mb-4 flex items-center justify-center">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-6 w-6 text-secondary">
            <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path>
            <polyline points="10 17 15 12 10 7"></polyline>
            <line x1="15" y1="12" x2="3" y2="12"></line>
          </svg>
        </div>
        <div className="h-4 w-16 bg-fuchsia-100 rounded mb-2"></div>
        <div className="h-8 w-full bg-fuchsia-100 rounded mb-2"></div>
        <div className="h-8 w-full bg-fuchsia-100 rounded mb-4"></div>
        <div className="h-8 w-full bg-fuchsia-100 rounded"></div>
      </div>
      <div className="bg-background/80 backdrop-blur-sm rounded-lg border border-secondary/20 shadow-xl p-4 flex flex-col items-center justify-center aspect-[4/5]">
        <div className="w-12 h-12 rounded-full bg-secondary/20 mb-4 flex items-center justify-center">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="h-6 w-6 text-secondary">
            <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
            <circle cx="9" cy="7" r="4"></circle>
            <path d="M22 21v-2a4 4 0 0 0-3-3.87"></path>
            <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
          </svg>
        </div>
        <div className="h-4 w-16 bg-fuchsia-100 rounded mb-2"></div>
        <div className="h-16 w-16 rounded-full bg-fuchsia-100 mb-4"></div>
        <div className="h-4 w-24 bg-fuchsia-100 rounded mb-2"></div>
        <div className="h-4 w-20 bg-fuchsia-100 rounded"></div>
      </div>
    </div>
  )
}


--- File: components/home/hero-section.tsx ---

"use client"

import Link from "next/link"
import { Github, PartyPopper } from "lucide-react"
import { useState, useEffect } from "react"
import { useUser } from "@clerk/nextjs"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import AnimateIn from "@/components/ui/animate-in"
import { CopyOneliner } from "../ui/copy-oneliner"
import { Heading } from "@/components/typography/heading"

type RandomStyle = {
  top: string
  left: string
  transform: string
  opacity: number
}

export function HeroSection({ gettingStarted, title }: { gettingStarted?: boolean; title?: string }) {
  const [randomStyles, setRandomStyles] = useState<RandomStyle[]>([])
  const { user } = useUser()

  useEffect(() => {
    const styles: RandomStyle[] = Array.from({ length: 50 }).map(() => ({
      top: `${Math.random() * 100}%`,
      left: `${Math.random() * 100}%`,
      transform: `scale(${Math.random() * 0.8 + 0.2})`,
      opacity: Math.random() * 0.5 + 0.1,
    }))
    setRandomStyles(styles)
  }, [])

  return (
    <section
      className={cn(
        "relative overflow-hidden dark:bg-linear-to-br dark:from-indigo-700/30 dark:via-purple-600 dark:to-blue-500/70 bg-linear-to-br from-indigo-700 via-purple-600 to-blue-600 py-12 text-white md:py-16 border-b-8 border-purple-100 dark:border-background/80",
        gettingStarted && "!pt-8 !pb-"
      )}
    >
      <AnimateIn from="opacity-0" to="opacity-100" duration={8000}>
        <div className="absolute inset-0 z-0 opacity-20">
          {randomStyles.map((style, i) => (
            <div key={i} className="absolute h-16 w-16 rounded-full bg-white animate-float" style={style} />
          ))}
        </div>
      </AnimateIn>

      <div className="absolute bottom-0 left-0 h-48 w-full bg-gradient-to-b from-transparent to-background/30 via-background/5 pointer-events-none" />

      <div className="container relative z-10">
        <div className="mx-auto max-w-3xl text-center">
          <Heading variant="h1" className="mb-6 sm:mb-12 scale-x-110 tracking-wide" style={{ textShadow: "0 0 10px rgba(255, 255, 255, 0.5)" }}>
            {title && title !== "Vibecode Party Starter" ? (
              title
            ) : (
              <>
                <span className="text-5xl tracking-wide">vibe code</span>
                <span className="block leading-12">party starter</span>
              </>
            )}
          </Heading>
          {!gettingStarted && (
            <>
              <Heading variant="h2" className="mb-8 text-lg md:text-xl font-medium text-balance">
                The Next.js starter project for vibe coding full stack web apps.
              </Heading>
              <div className="pt-4 pb-8 max-w-lg mx-auto">
                <CopyOneliner
                  iconClassName="w-4 sm:w-6 h-4 sm:h-6 opacity-70 mx-1"
                  className="bg-black/30 ring-8 hover:ring-[12px] transition-all duration-300 ease-in-out ring-black/10 tracking-wide font-semibold sm:text-lg"
                >
                  npx vibecode-party-starter
                </CopyOneliner>
              </div>
              <div className="flex flex-col justify-center gap-4 sm:gap-6 sm:flex-row pb-4 sm:pb-0">
                <>
                  <Button
                    asChild
                    size="xl"
                    className={cn(
                      "bg-gradient-to-br hover:drop-shadow-lg from-white via-fuchsia-50 to-fuchsia-300 text-indigo-900/80 hover:text-indigo-900 font-bold saturate-150 hover:scale-105 hover:saturate-200 transition-all duration-300 ease-out",
                      user === undefined ? "opacity-0 translate-y-4" : "opacity-100 translate-y-0"
                    )}
                  >
                    <Link href="https://github.com/johnpolacek/vibecode.party.starter">
                      View on GitHub
                      <Github className="ml-1 h-4 w-4 scale-150" />
                    </Link>
                  </Button>
                  <Button
                    asChild
                    size="xl"
                    className={cn(
                      "bg-gradient-to-br from-purple-400 via-purple-600 to-purple-500 saturate-[1.66] hover:saturate-[1.8] text-white hover:scale-105 transition-all duration-300 ease-out delay-100",
                      user === undefined ? "opacity-0 translate-y-4" : "opacity-100 translate-y-0"
                    )}
                  >
                    <Link href="https://vibecode.party">
                      Go Party
                      <PartyPopper className="ml-1 h-6 w-6 scale-150 text-yellow-300 relative -top-px" />
                    </Link>
                  </Button>
                </>
              </div>
            </>
          )}
        </div>
      </div>
    </section>
  )
}


--- File: components/home/sign-up-button.tsx ---

"use client"

import { Button } from "@/components/ui/button"
import { useUser, SignUpButton } from "@clerk/nextjs"

export function ParticipationButton() {
  const { isSignedIn, isLoaded } = useUser()

  if (!isLoaded || isSignedIn) {
    return null
  }

  return (
    <SignUpButton mode="modal">
      <Button size="xl">Sign Up to Participate</Button>
    </SignUpButton>
  )
}


--- File: components/idea-carousel.tsx ---

"use client"

import { useState, useEffect } from "react"
import Image from "next/image"
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Check, X } from "lucide-react"
import { motion, AnimatePresence, type PanInfo } from "motion/react"
import * as VisuallyHidden from "@radix-ui/react-visually-hidden"
import type { StartupIdea } from "@/lib/data"
import { getGradient } from "@/lib/utils"
import { saveIdeaSwipe } from "@/app/_actions/save-idea-swipe"
import { useUser, SignInButton } from "@clerk/nextjs"
import { getUserSwipedIdeaIds } from "@/lib/services/ideas"
import Link from "next/link"

interface IdeaCarouselProps {
  ideas: StartupIdea[]
  isOpen: boolean
  onClose: () => void
  isGuest?: boolean
}

export function IdeaCarousel({ ideas, isOpen, onClose, isGuest }: IdeaCarouselProps) {
  const [currentIndex, setCurrentIndex] = useState(0)
  const [liked, setLiked] = useState<string[]>([])
  const [exitX, setExitX] = useState<number | null>(null)
  const [unratedIdeas, setUnratedIdeas] = useState<StartupIdea[]>([])
  const [loading, setLoading] = useState(true)
  const [previewFinished, setPreviewFinished] = useState(false)
  const { user } = useUser()

  useEffect(() => {
    if (isGuest) {
      setUnratedIdeas(ideas)
      setCurrentIndex(0)
      setLoading(false)
      setPreviewFinished(false)
      return
    }
    async function fetchUnrated() {
      if (!user) {
        setUnratedIdeas([])
        setLoading(false)
        return
      }
      setLoading(true)
      try {
        const swipedIds = await getUserSwipedIdeaIds(user.id)
        const filtered = ideas.filter((idea) => !swipedIds.includes(idea.id))
        setUnratedIdeas(filtered)
        setCurrentIndex(0)
        setLoading(false)
      } catch {
        setUnratedIdeas([])
        setLoading(false)
      }
    }
    fetchUnrated()
  }, [user, ideas, isGuest])

  const currentIdea = unratedIdeas[currentIndex]

  // Handle like/dislike actions
  const handleAction = async (action: "like" | "dislike") => {
    if (isGuest) {
      // Just move to next idea, do not save
      if (currentIndex < unratedIdeas.length - 1) {
        if (action === "like") {
          setLiked([...liked, currentIdea.id])
          setExitX(500)
        } else {
          setExitX(-500)
        }
        setTimeout(() => {
          setCurrentIndex(currentIndex + 1)
          setExitX(null)
        }, 300)
      } else {
        setPreviewFinished(true)
      }
      return
    }
    if (!user) return // Optionally, show sign-in prompt

    // Save swipe
    try {
      const args = {
        userId: user.id,
        ideaId: currentIdea.id,
        liked: action === "like",
        createdAt: Date.now(),
      }
      await saveIdeaSwipe(args)
    } catch {}

    if (currentIndex < unratedIdeas.length - 1) {
      if (action === "like") {
        setLiked([...liked, currentIdea.id])
        setExitX(500)
      } else {
        setExitX(-500)
      }
      // Move to next idea after a short delay
      setTimeout(() => {
        setCurrentIndex(currentIndex + 1)
        setExitX(null)
      }, 300)
    } else {
      // Last idea: animate the swipe before showing completion
      if (action === "like") {
        setLiked([...liked, currentIdea.id])
        setExitX(500)
      } else {
        setExitX(-500)
      }
      setTimeout(() => {
        setCurrentIndex(currentIndex + 1)
        setExitX(null)
      }, 300)
    }
  }

  // Handle drag end for swiping
  const handleDragEnd = (_: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {
    if (info.offset.x > 100) {
      handleAction("like")
    } else if (info.offset.x < -100) {
      handleAction("dislike")
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent hideClose={true} className="sm:max-w-md p-0 h-[90vh] max-h-[800px] flex flex-col gap-0 overflow-hidden">
        <VisuallyHidden.Root>
          <DialogTitle>Startup Ideas</DialogTitle>
        </VisuallyHidden.Root>
        {loading ? (
          <div className="flex-1 flex items-center justify-center p-6">
            <div className="sr-only">Loading...</div>
          </div>
        ) : previewFinished && isGuest ? (
          <div className="flex-1 flex items-center justify-center p-6">
            <div className="text-center">
              <h3 className="text-xl font-bold mb-2">We hope you enjoyed the preview!</h3>
              <p className="text-gray-600 mb-4 text-balance">Sign up for an account to access all ideas, save your matches, discover trending ideas, and submit your own.</p>
              <SignInButton mode="modal">
                <Button size="lg" className="bg-primary hover:bg-primary/90">
                  Sign up to Continue
                </Button>
              </SignInButton>
            </div>
          </div>
        ) : currentIndex < unratedIdeas.length ? (
          <div id="idea-carousel" className="flex-1 overflow-hidden relative bg-gradient-to-br from-black/70 to-black">
            <AnimatePresence mode="wait">
              <motion.div
                key={currentIdea.id}
                initial={{ opacity: 1, x: 0 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: exitX || 0 }}
                transition={{ duration: 0.3 }}
                drag="x"
                dragConstraints={{ left: 0, right: 0 }}
                onDragEnd={handleDragEnd}
                className="h-full w-full"
              >
                <div className="relative h-full w-full flex flex-col">
                  {/* Image or gradient */}
                  {currentIdea.imageUrl ? (
                    <div className="pointer-events-none absolute inset-0 w-full aspect-[9/16] flex-shrink-0 z-0">
                      <div className="absolute inset-0 w-full h-full bg-gradient-to-t from-black to-transparent z-10" />
                      <Image src={currentIdea.imageUrl || "/placeholder.svg"} alt={currentIdea.title} fill className="object-cover" />
                    </div>
                  ) : (
                    <div className={`pointer-events-none absolute inset-0 w-full aspect-[9/16] flex-shrink-0 bg-gradient-to-br z-0 ${getGradient(currentIdea.id)}`} />
                  )}

                  {/* Overlay for LIKE/NOPE indicators */}
                  <div
                    className="absolute top-4 left-4 bg-red-500 text-white px-4 py-2 rounded-lg text-xl font-bold rotate-[-12deg] opacity-0 transition-opacity duration-200 z-20"
                    style={{ opacity: exitX && exitX < 0 ? 1 : 0 }}
                  >
                    NOPE
                  </div>
                  <div
                    className="absolute top-4 right-4 bg-primary text-white px-4 py-2 rounded-lg text-xl font-bold rotate-12 opacity-0 transition-opacity duration-200 z-20"
                    style={{ opacity: exitX && exitX > 0 ? 1 : 0 }}
                  >
                    LIKE
                  </div>

                  {/* Content */}
                  <div className="relative z-10 p-6 flex-1 overflow-auto flex flex-col justify-end text-white">
                    <div className="flex flex-col items-center mb-4">
                      <h2 className="text-4xl md:text-5xl font-extrabold text-center leading-tight drop-shadow-lg">{currentIdea.title}</h2>
                      <div className="text-lg text-center text-balance">{currentIdea.description}</div>
                    </div>
                  </div>
                </div>
              </motion.div>
            </AnimatePresence>
          </div>
        ) : isGuest ? null : (
          <div className="flex-1 flex items-center justify-center p-6 bg-background text-foreground">
            <div className="text-center">
              <h3 className="text-xl font-bold mb-2">You&apos;ve seen all ideas!</h3>
              <p className="text-gray-600 mb-4">Check back later for more or submit your own.</p>
              <div className="flex justify-center w-full gap-3">
                <Button asChild size="lg" className="bg-primary hover:bg-primary/90">
                  <Link href="/matches">View Matches</Link>
                </Button>
                <Button size="lg" onClick={onClose} variant="outline">
                  Close
                </Button>
              </div>
            </div>
          </div>
        )}

        {currentIndex < unratedIdeas.length && !loading && !previewFinished && (
          <div className="flex justify-center gap-8 py-8 border-t border-white/30 bg-black">
            <Button variant="outline" size="icon" className="rounded-full h-16 w-16 border-2 border-red-500 text-red-500 hover:scale-105" onClick={() => handleAction("dislike")}>
              <X className="scale-150" size={32} />
            </Button>
            <Button variant="outline" size="icon" className="rounded-full h-16 w-16 border-2 border-primary text-primary hover:scale-105" onClick={() => handleAction("like")}>
              <Check className="scale-150" size={32} />
            </Button>
          </div>
        )}
      </DialogContent>
    </Dialog>
  )
}


--- File: components/idea-detail-modal.tsx ---

"use client"

import Image from "next/image"
import { Dialog, DialogContent } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Check, X, Star } from "lucide-react"
import type { StartupIdea } from "@/lib/data"

interface IdeaDetailModalProps {
  idea: StartupIdea
  isOpen: boolean
  onClose: () => void
  onLike: () => void
  onDislike: () => void
  onSave: () => void
  isSaved: boolean
}

export function IdeaDetailModal({ idea, isOpen, onClose, onLike, onDislike, onSave, isSaved }: IdeaDetailModalProps) {
  // Generate a gradient based on the idea's id
  const getGradient = (id: number) => {
    const gradients = [
      "from-pink-500 to-purple-500",
      "from-blue-500 to-teal-500",
      "from-green-500 to-emerald-500",
      "from-yellow-500 to-orange-500",
      "from-purple-500 to-indigo-500",
      "from-red-500 to-pink-500",
    ]
    return gradients[id % gradients.length]
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md p-0 h-[90vh] max-h-[800px] flex flex-col overflow-hidden">
        <div className="flex-1 overflow-auto">
          {idea.imageUrl ? (
            <div className="relative w-full aspect-[9/16]">
              <Image src={idea.imageUrl || "/placeholder.svg"} alt={idea.title} fill className="object-cover" />
            </div>
          ) : (
            <div className={`w-full aspect-[9/16] bg-gradient-to-br ${getGradient(Number(idea.id))}`} />
          )}

          <div className="p-6">
            <div className="flex justify-between items-start mb-4">
              <h2 className="text-3xl font-bold">{idea.title}</h2>
              <Button variant="ghost" size="icon" className={`rounded-full ${isSaved ? "text-yellow-500" : ""}`} onClick={onSave}>
                <Star className={isSaved ? "fill-yellow-500" : ""} size={24} />
              </Button>
            </div>
            <p className="text-gray-600">{idea.description}</p>

            {typeof idea.likeCount === "number" && (
              <div className="flex gap-4 mt-6 text-sm text-gray-500">
                <div>{idea.likeCount} likes</div>
              </div>
            )}
          </div>
        </div>

        <div className="flex justify-center gap-4 p-4 border-t">
          <Button variant="outline" size="icon" className="rounded-full h-16 w-16 border-2 border-red-500 text-red-500" onClick={onDislike}>
            <X size={32} />
          </Button>
          <Button variant="outline" size="icon" className="rounded-full h-16 w-16 border-2 border-primary text-primary" onClick={onLike}>
            <Check size={32} />
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  )
}


--- File: components/layout/theme-provider.tsx ---

"use client"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import type { ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}



--- File: components/nav/admin-breadcrumb.tsx ---

import { Breadcrumb, type BreadcrumbItem } from "./breadcrumb"

interface AdminBreadcrumbProps {
  items: BreadcrumbItem[]
}

export function AdminBreadcrumb({ items }: AdminBreadcrumbProps) {
  return (
    <div className="mb-6">
      <Breadcrumb items={items} homeHref="/admin" homeLabel="Admin" />
    </div>
  )
}


--- File: components/nav/admin-nav-item.tsx ---

"use client"

import { useEffect, useState } from "react"
import Link from "next/link"
import { usePathname } from "next/navigation"
import { useUser } from "@clerk/nextjs"
import { cn } from "@/lib/utils"
import { ShieldCheckIcon } from "lucide-react"

export function AdminNavItem() {
  const pathname = usePathname()
  const { user, isSignedIn, isLoaded } = useUser()
  const [isAdmin, setIsAdmin] = useState(false)

  useEffect(() => {
    // Check if the user is an admin when the component mounts or user changes
    const checkAdminStatus = async () => {
      if (!isLoaded || !isSignedIn || !user?.id) {
        setIsAdmin(false)
        return
      }

      try {
        // Fetch admin status from the server
        const response = await fetch("/api/check-admin")
        if (response.ok) {
          const data = await response.json()
          setIsAdmin(data.isAdmin)
        } else {
          setIsAdmin(false)
        }
      } catch (error) {
        console.error("Error checking admin status:", error)
        setIsAdmin(false)
      }
    }

    checkAdminStatus()
  }, [isLoaded, isSignedIn, user?.id])

  // Only render the admin link if the user is an admin
  if (!isAdmin) {
    return null
  }

  return (
    <Link href="/admin" className={cn("text-sm font-medium transition-colors hover:text-primary flex items-center gap-1", pathname.startsWith("/admin") ? "text-primary" : "text-muted-foreground")}>
      <ShieldCheckIcon className="h-4 w-4" />
      Admin
    </Link>
  )
}


--- File: components/nav/auth-buttons.tsx ---

"use client"

import { SignedIn, SignedOut, SignInButton, SignUpButton, UserButton, useAuth } from "@clerk/nextjs"
import { Button } from "@/components/ui/button"

export default function AuthButtons() {
  const { isSignedIn } = useAuth()

  return (
    <div className={`flex items-center overflow-hidden transition-[width] duration-300 ease-in-out ${isSignedIn === undefined ? "w-[40px]" : isSignedIn ? "w-[40px]" : "w-[180px] sm:w-[180px]"}`}>
      <SignedOut>
        <div className="flex gap-2 whitespace-nowrap">
          <SignInButton mode="modal">
            <Button variant="outline">Sign In</Button>
          </SignInButton>
          <SignUpButton mode="modal">
            <Button variant="outline">Sign Up</Button>
          </SignUpButton>
        </div>
      </SignedOut>
      <SignedIn>
        <div className="flex items-center">
          <UserButton afterSignOutUrl="/" userProfileUrl="/account" />
        </div>
      </SignedIn>
    </div>
  )
}


--- File: components/nav/breadcrumb.tsx ---

import Link from "next/link"
import { ChevronRight } from "lucide-react"

export interface BreadcrumbItem {
  label: string
  href?: string
}

interface BreadcrumbProps {
  items: BreadcrumbItem[]
  homeHref?: string
  homeLabel?: string
}

export function Breadcrumb({ items, homeHref = "/", homeLabel = "Home" }: BreadcrumbProps) {
  return (
    <nav className="flex items-center text-sm text-muted-foreground">
      <Link href={homeHref} className="hover:text-foreground transition-colors">
        {homeLabel}
      </Link>
      {items.map((item, index) => (
        <div key={item.label} className="flex items-center">
          <ChevronRight className="h-4 w-4 mx-1" />
          {index === items.length - 1 ? (
            <span className="text-foreground font-medium">{item.label}</span>
          ) : (
            <Link href={item.href!} className="hover:text-foreground transition-colors">
              {item.label}
            </Link>
          )}
        </div>
      ))}
    </nav>
  )
}


--- File: components/nav/main-nav.tsx ---

"use client"

import Link from "next/link"
import { usePathname } from "next/navigation"
import { cn } from "@/lib/utils"
import { navItems } from "@/lib/config/navigation"
import { GalleryHorizontalEnd } from "lucide-react"
import { useUser } from "@clerk/nextjs"

interface MainNavProps {
  isAdmin: boolean
}

export function MainNav({ isAdmin }: MainNavProps) {
  const pathname = usePathname()
  const { isSignedIn } = useUser()

  return (
    <nav className="hidden md:flex md:gap-6 items-center">
      <Link href="/" className="mr-4">
        <div className="flex items-center">
          <GalleryHorizontalEnd className="w-6 h-6 text-primary mr-3" />
          <span className="text-2xl tracking-wide font-extrabold text-primary">Vibe</span>
          <span className="text-2xl tracking-wide font-extrabold">Swipe</span>
        </div>
      </Link>

      {navItems.map((item) => (
        <Link key={item.href} href={item.href} className={cn("text-sm mt-1 font-medium transition-colors hover:text-primary", pathname === item.href ? "text-primary" : "text-muted-foreground")}>
          {item.title}
        </Link>
      ))}

      {isSignedIn && (
        <Link href="/matches" className={cn("text-sm mt-1 font-medium transition-colors hover:text-primary", pathname === "/matches" ? "text-primary" : "text-muted-foreground")}>
          Matches
        </Link>
      )}

      {isAdmin && (
        <Link href="/admin" className={cn("text-sm mt-1 font-medium transition-colors hover:text-primary", pathname?.startsWith("/admin") ? "text-primary" : "text-muted-foreground")}>
          Admin
        </Link>
      )}
    </nav>
  )
}


--- File: components/nav/mobile-nav.tsx ---

"use client"

import { useState } from "react"
import Link from "next/link"
import { usePathname } from "next/navigation"
import { GalleryHorizontalEnd, Menu, ShieldCheck } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Sheet, SheetContent, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import { cn } from "@/lib/utils"
import { useUser } from "@clerk/nextjs"
import { useEffect } from "react"
import { SignedIn, SignedOut, SignInButton, SignUpButton, UserButton } from "@clerk/nextjs"
import { navItems } from "@/lib/config/navigation"

export function MobileNav() {
  const [open, setOpen] = useState(false)
  const [isAdmin, setIsAdmin] = useState(false)
  const pathname = usePathname()
  const { user, isSignedIn, isLoaded } = useUser()

  useEffect(() => {
    // Check if the user is an admin when the component mounts or user changes
    const checkAdminStatus = async () => {
      if (!isLoaded || !isSignedIn || !user?.id) {
        setIsAdmin(false)
        return
      }

      try {
        // Fetch admin status from the server
        const response = await fetch("/api/check-admin")
        if (response.ok) {
          const data = await response.json()
          setIsAdmin(data.isAdmin)
        } else {
          setIsAdmin(false)
        }
      } catch (error) {
        console.error("Error checking admin status:", error)
        setIsAdmin(false)
      }
    }

    checkAdminStatus()
  }, [isLoaded, isSignedIn, user?.id])

  return (
    <Sheet open={open} onOpenChange={setOpen}>
      <SheetTrigger asChild>
        <Button variant="ghost" size="icon" className="md:hidden">
          <Menu className="h-5 w-5" />
          <span className="sr-only">Toggle menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="flex flex-col">
        <SheetTitle className="sr-only">Menu</SheetTitle>
        <div className="flex items-center gap-1 pl-3 pt-3">
          <GalleryHorizontalEnd className="w-5 h-5 text-primary mr-1" />
          <span className="text-xl tracking-wide font-extrabold text-primary">Startup</span>
          <span className="text-xl tracking-wide font-extrabold">Swiper</span>
        </div>
        <nav className="mt-6 flex flex-col gap-4 pl-10">
          {navItems.map((item) => (
            <Link
              key={item.href}
              href={item.href}
              className={cn("text-lg font-medium transition-colors hover:text-primary", pathname === item.href ? "text-primary" : "text-muted-foreground")}
              onClick={() => setOpen(false)}
            >
              {item.title}
            </Link>
          ))}

          {/* Admin link - only visible to admin users */}
          {isAdmin && (
            <Link
              href="/admin"
              className={cn("text-lg font-medium transition-colors hover:text-primary flex items-center gap-2", pathname.startsWith("/admin") ? "text-primary" : "text-muted-foreground")}
              onClick={() => setOpen(false)}
            >
              <ShieldCheck className="h-5 w-5" />
              Admin
            </Link>
          )}
        </nav>
        <div className="mt-auto flex flex-col gap-4 p-8">
          <SignedOut>
            <SignUpButton mode="modal">
              <Button className="w-full" onClick={() => setOpen(false)}>
                Sign Up
              </Button>
            </SignUpButton>
            <SignInButton mode="modal">
              <Button variant="outline" className="w-full" onClick={() => setOpen(false)}>
                Sign In
              </Button>
            </SignInButton>
          </SignedOut>
          <SignedIn>
            <div className="flex items-center justify-center">
              <UserButton afterSignOutUrl="/" userProfileUrl="/settings/profile" />
            </div>
          </SignedIn>
        </div>
      </SheetContent>
    </Sheet>
  )
}


--- File: components/nav/theme-toggle.tsx ---

"use client"

import { useTheme } from "next-themes"
import { Moon, Sun } from "lucide-react"

import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

export function ThemeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}



--- File: components/profile/profile-card.tsx ---

"use client"

import { useState } from "react"
import Link from "next/link"
import { cn } from "@/lib/utils"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import { Calendar, CheckCircle, Globe, Twitter, Github, Link as LinkIcon } from "lucide-react"
import { EditProfile } from "@/components/edit-profile"
import { refreshProfile } from "@/app/_actions/profile"
import { Heading } from "@/components/typography/heading"

interface Link {
  label: string
  url: string
}

interface ProfileCardProps {
  user: {
    id: string
    username: string | null
    firstName: string | null
    lastName: string | null
    imageUrl: string
    unsafeMetadata?: Record<string, unknown>
  }
  bio: string
  status: string
  joinedDate: string
  path: string
}

export function ProfileCard({ user, bio, status, joinedDate, path }: ProfileCardProps) {
  const [isEditing, setIsEditing] = useState(false)
  const name = user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.firstName || user.username || "Anonymous"
  const website = user.unsafeMetadata?.website as string
  const twitter = user.unsafeMetadata?.twitter as string
  const github = user.unsafeMetadata?.github as string
  const customLinks = (user.unsafeMetadata?.customLinks as Link[]) || []

  const handleUpdate = async () => {
    setIsEditing(false)
    await refreshProfile(path)
  }

  if (isEditing) {
    return (
      <Card>
        <CardContent className="pt-6">
          <EditProfile user={user} bio={bio} onUpdate={handleUpdate} isEditing={true} onCancel={() => setIsEditing(false)} onStartEdit={() => setIsEditing(true)} />
        </CardContent>
      </Card>
    )
  }

  const hasLinks = website || twitter || github || customLinks.length > 0

  return (
    <Card>
      <CardContent className="pt-6">
        <div className="flex flex-col items-center text-center">
          <Link href={`/participants/${user.username}`} className="block hover:opacity-80 transition-opacity">
            <Avatar className="h-24 w-24 mb-4">
              {user.imageUrl && <AvatarImage src={user.imageUrl} alt={name} />}
              <AvatarFallback>{name.substring(0, 2).toUpperCase()}</AvatarFallback>
            </Avatar>
          </Link>
          <div className="space-y-2">
            <Link href={`/participants/${user.username}`} className="block hover:text-primary transition-colors">
              <Heading variant="h1" className="text-2xl font-bold">
                {name}
              </Heading>
            </Link>
            <div className="inline-flex items-center rounded-full bg-green-100 px-3 py-1 text-sm font-medium text-green-800 dark:bg-green-900 dark:text-green-100">
              <CheckCircle className="mr-1 h-3 w-3" />
              {status.charAt(0).toUpperCase() + status.slice(1)}
            </div>
          </div>

          {hasLinks && (
            <div className="flex flex-wrap gap-2 mt-4 justify-center">
              {website && (
                <Button size="sm" variant="outline" asChild>
                  <a href={website.startsWith("http") ? website : `https://${website}`} target="_blank" rel="noopener noreferrer">
                    <Globe className="mr-2 h-4 w-4" />
                    Website
                  </a>
                </Button>
              )}
              {twitter && (
                <Button size="sm" variant="outline" asChild>
                  <a href={`https://x.com/${twitter}`} target="_blank" rel="noopener noreferrer">
                    <Twitter className="mr-2 h-4 w-4" />
                    Twitter/X
                  </a>
                </Button>
              )}
              {github && (
                <Button size="sm" variant="outline" asChild>
                  <a href={`https://github.com/${github}`} target="_blank" rel="noopener noreferrer">
                    <Github className="mr-2 h-4 w-4" />
                    GitHub
                  </a>
                </Button>
              )}
              {customLinks.map((link, index) => (
                <Button key={index} size="sm" variant="outline" asChild>
                  <a href={link.url.startsWith("http") ? link.url : `https://${link.url}`} target="_blank" rel="noopener noreferrer">
                    <LinkIcon className="mr-2 h-4 w-4" />
                    {link.label}
                  </a>
                </Button>
              ))}
            </div>
          )}
        </div>

        <Separator className="my-6" />

        <div className="space-y-4">
          <div>
            <div className="flex items-center justify-between mb-2">
              <Heading variant="h2" className="font-medium">
                About
              </Heading>
              <EditProfile user={user} bio={bio} onUpdate={handleUpdate} isEditing={false} onCancel={() => setIsEditing(false)} onStartEdit={() => setIsEditing(true)} />
            </div>
            <p className={cn("text-sm", bio ? "text-foreground" : "text-muted-foreground italic")}>{bio || "No bio created yet"}</p>
          </div>

          <div className="flex items-center gap-2">
            <Calendar className="h-4 w-4 text-muted-foreground" />
            <span className="text-sm">Joined on {joinedDate}</span>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}


--- File: components/trending-ideas-section.tsx ---

import Link from "next/link"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { ArrowRight, Heart, TrendingUp } from "lucide-react"
import { getTrendingIdeas } from "@/lib/data"

export function TrendingIdeasSection() {
  // Get top 3 trending ideas for homepage
  const trendingIdeas = getTrendingIdeas(3)

  return (
    <section className="bg-gradient-to-b from-background to-transparent py-12 md:py-20">
      <div className="container px-4 md:px-6">
        <div className="flex flex-col md:flex-row justify-between items-center mb-10">
          <div>
            <h2 className="text-3xl font-bold flex items-center gap-2">
              <TrendingUp className="text-primary" />
              Trending Ideas
            </h2>
            <p className="text-gray-500 mt-2">See what&apos;s hot in the startup community right now</p>
          </div>
          <Link href="/trending">
            <Button variant="outline" className="mt-4 md:mt-0">
              View All Trending
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </Link>
        </div>

        <div className="grid gap-6 md:grid-cols-3">
          {trendingIdeas.map((idea) => (
            <Card key={idea.id} className="overflow-hidden pt-0">
              {idea.imageUrl ? (
                <div className="relative aspect-[9/16] w-full max-h-[300px]">
                  <Image src={idea.imageUrl || "/placeholder.svg"} alt={idea.title} fill className="object-cover" />
                </div>
              ) : (
                <div className={`aspect-[9/16] w-full max-h-[300px] bg-gradient-to-br from-primary/90 to-primary/70`} />
              )}
              <CardContent className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <h3 className="font-bold">{idea.title}</h3>
                </div>
                <p className="text-gray-600 text-sm mb-4 line-clamp-2">{idea.description}</p>
                <div className="flex justify-between text-sm">
                  {typeof idea.likeCount === "number" && (
                    <div className="flex items-center gap-1">
                      <Heart className="h-4 w-4 text-red-500" />
                      <span>{idea.likeCount} likes</span>
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter className="bg-muted/20 pb-4 flex justify-center w-full">
                <Link href={`/idea/${idea.id}`}>
                  <Button className="px-8 h-auto py-3 bg-primary hover:bg-primary/90">View Details</Button>
                </Link>
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>
    </section>
  )
}


--- File: components/trending-ideas.tsx ---

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ArrowRight, Heart, TrendingUp, Users } from "lucide-react"

export function TrendingIdeas() {
  // Sample trending ideas with metrics (shortened list for homepage)
  const trendingIdeas = [
    {
      id: 1,
      title: "AI-Powered Personal Shopping Assistant",
      category: "E-commerce",
      likes: 342,
      matches: 78,
      isHot: true,
    },
    {
      id: 2,
      title: "Sustainable Food Delivery Platform",
      category: "Food Tech",
      likes: 287,
      matches: 62,
      isHot: true,
    },
    {
      id: 6,
      title: "Carbon Footprint Tracker for Businesses",
      category: "Sustainability",
      likes: 187,
      matches: 39,
      isHot: true,
    },
  ]

  return (
    <section className="bg-green-50 py-12 md:py-20">
      <div className="container px-4 md:px-6">
        <div className="flex flex-col md:flex-row justify-between items-center mb-10">
          <div>
            <h2 className="text-3xl font-bold flex items-center gap-2">
              <TrendingUp className="text-primary" />
              Trending Ideas
            </h2>
            <p className="text-gray-500 mt-2">See what&apos;s hot in the startup community right now</p>
          </div>
          <Link href="/trending">
            <Button variant="outline" className="mt-4 md:mt-0">
              View All Trending
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </Link>
        </div>

        <div className="grid gap-6 md:grid-cols-3">
          {trendingIdeas.map((idea) => (
            <Card key={idea.id} className="overflow-hidden">
              <CardContent className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <h3 className="font-bold">{idea.title}</h3>
                  {idea.isHot && <span className="inline-flex items-center rounded-full bg-red-100 px-2.5 py-0.5 text-xs font-medium text-red-800">🔥 Hot</span>}
                </div>
                <Badge variant="outline" className="bg-green-50 mb-4">
                  {idea.category}
                </Badge>
                <div className="flex justify-between text-sm">
                  <div className="flex items-center gap-1">
                    <Heart className="h-4 w-4 text-red-500" />
                    <span>{idea.likes}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Users className="h-4 w-4 text-blue-500" />
                    <span>{idea.matches} matches</span>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="bg-muted/20 p-4">
                <Link href={`/idea/${idea.id}`} className="w-full">
                  <Button size="sm" className="w-full bg-green-500 hover:bg-green-600">
                    View Details
                  </Button>
                </Link>
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>
    </section>
  )
}


--- File: components/typography/heading.tsx ---

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const headingVariants = cva("text-balance font-extrabold", {
  variants: {
    variant: {
      h1: "text-4xl sm:text-5xl md:text-7xl scale-x-110 tracking-wide",
      h2: "text-3xl sm:text-5xl font-extrabold",
      h3: "text-2xl sm:text-4xl font-extrabold text-primary",
      h4: "text-xl sm:text-2xl font-bold",
      h5: "text-lg sm:text-xl font-bold",
      h6: "text-base sm:text-lg font-bold",
    },
  },
  defaultVariants: {
    variant: "h1",
  },
})

type HeadingVariant = "h1" | "h2" | "h3" | "h4" | "h5" | "h6"

interface HeadingProps extends Omit<React.HTMLAttributes<HTMLHeadingElement>, "className">, Omit<VariantProps<typeof headingVariants>, "as"> {
  variant: HeadingVariant
  as?: HeadingVariant
  className?: string
}

export function Heading({ className, variant, as, ...props }: HeadingProps) {
  const Tag = as || variant

  return (
    <Tag
      className={cn(
        headingVariants({
          variant,
          className,
        })
      )}
      {...props}
    />
  )
}


--- File: components/typography/markdown.tsx ---

import ReactMarkdown from "react-markdown"

const Markdown = ReactMarkdown as unknown as React.FC<{ children: string }>

export { Markdown }


--- File: components/ui/accordion.tsx ---

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Accordion({ ...props }: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({ className, ...props }: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return <AccordionPrimitive.Item data-slot="accordion-item" className={cn("border-b last:border-b-0", className)} {...props} />
}

function AccordionTrigger({ className, children, ...props }: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180 cursor-pointer",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({ className, children, ...props }: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content data-slot="accordion-content" className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm" {...props}>
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


--- File: components/ui/alert-dialog.tsx ---

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<React.ElementRef<typeof AlertDialogPrimitive.Overlay>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>>(
  ({ className, ...props }, ref) => (
    <AlertDialogPrimitive.Overlay
      className={cn("fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0", className)}
      {...props}
      ref={ref}
    />
  )
)
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<React.ElementRef<typeof AlertDialogPrimitive.Content>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>>(
  ({ className, ...props }, ref) => (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        ref={ref}
        className={cn(
          "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
)
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<React.ElementRef<typeof AlertDialogPrimitive.Title>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<React.ElementRef<typeof AlertDialogPrimitive.Description>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>>(
  ({ className, ...props }, ref) => <AlertDialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
)
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<React.ElementRef<typeof AlertDialogPrimitive.Action>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<React.ElementRef<typeof AlertDialogPrimitive.Cancel>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel ref={ref} className={cn(buttonVariants({ variant: "outline" }), "mt-2 sm:mt-0", className)} {...props} />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


--- File: components/ui/alert.tsx ---

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }


--- File: components/ui/animate-in.tsx ---

import React, { useEffect, useState } from "react"
import type { JSX } from "react"
import { cn } from "@/lib/utils"

const AnimateIn = ({
  children,
  delay = 0,
  duration = 500,
  className = "",
  from,
  to,
  style,
  as = "div",
}: {
  from: string
  to: string
  children?: React.ReactNode
  delay?: number
  duration?: number
  className?: string
  style?: React.CSSProperties
  as?: keyof JSX.IntrinsicElements
}) => {
  const [animate, setAnimate] = useState(from)
  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false)

  useEffect(() => {
    const mediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)")

    const mediaQueryChangeHandler = (e: MediaQueryListEvent) => {
      setPrefersReducedMotion(e.matches)
    }

    setPrefersReducedMotion(mediaQuery.matches)
    mediaQuery.addEventListener("change", mediaQueryChangeHandler)

    return () => {
      mediaQuery.removeEventListener("change", mediaQueryChangeHandler)
    }
  }, [])

  useEffect(() => {
    if (prefersReducedMotion) {
      // If the user prefers reduced motion, skip the animation
      setAnimate(to)
      return
    }

    const timer = setTimeout(() => {
      setAnimate(to)
    }, delay)

    return () => clearTimeout(timer)
  }, [delay, to, prefersReducedMotion])

  return React.createElement(
    as,
    {
      className: cn("transition-all ease-in-out", className, animate),
      style: { transitionDuration: prefersReducedMotion ? "0ms" : `${duration}ms`, ...style },
    },
    children
  )
}

export default AnimateIn


--- File: components/ui/avatar.tsx ---

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const AvatarContext = React.createContext<{ hasError: boolean; setHasError: (error: boolean) => void }>({
  hasError: false,
  setHasError: () => {},
})

function Avatar({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  const [hasError, setHasError] = React.useState(false)

  return (
    <AvatarContext.Provider value={{ hasError, setHasError }}>
      <AvatarPrimitive.Root data-slot="avatar" className={cn("relative flex size-8 shrink-0 overflow-hidden rounded-full", className)} {...props} />
    </AvatarContext.Provider>
  )
}

function AvatarImage({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  const { setHasError } = React.useContext(AvatarContext)
  const [isLoaded, setIsLoaded] = React.useState(false)

  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full transition-opacity duration-300", isLoaded ? "opacity-100" : "opacity-0", className)}
      onLoad={() => setIsLoaded(true)}
      onError={() => {
        setHasError(true)
        setIsLoaded(false)
      }}
      {...props}
    />
  )
}

function AvatarFallback({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  const { hasError } = React.useContext(AvatarContext)

  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn("bg-muted flex size-full items-center justify-center rounded-full transition-opacity duration-200", !hasError && "hidden", className)}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }


--- File: components/ui/badge.tsx ---

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }


--- File: components/ui/button.tsx ---

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex cursor-pointer items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-hidden focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-all duration-300 ease-in-out select-none",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow-2xs hover:bg-primary/90",
        destructive: "bg-destructive text-white shadow-2xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline: "border border-input bg-background shadow-2xs hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground shadow-2xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        xl: "h-12 rounded-md text-lg px-8 has-[>svg]:px-6",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return <Comp data-slot="button" className={cn(buttonVariants({ variant, size, className }))} {...props} />
}

export { Button, buttonVariants }


--- File: components/ui/calendar.tsx ---

"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(buttonVariants({ variant: "outline" }), "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(buttonVariants({ variant: "ghost" }), "h-8 w-8 p-0 font-normal aria-selected:opacity-100"),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside: "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => <ChevronLeft className={cn("h-4 w-4", className)} {...props} />,
        IconRight: ({ className, ...props }) => <ChevronRight className={cn("h-4 w-4", className)} {...props} />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }


--- File: components/ui/card.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return <div data-slot="card" className={cn("bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-xs overflow-hidden", className)} {...props} />
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return <div data-slot="card-header" className={cn("flex flex-col gap-1.5 px-6", className)} {...props} />
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return <div data-slot="card-title" className={cn("leading-none font-semibold", className)} {...props} />
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return <div data-slot="card-description" className={cn("text-muted-foreground text-sm", className)} {...props} />
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return <div data-slot="card-content" className={cn("px-6 grow", className)} {...props} />
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return <div data-slot="card-footer" className={cn("flex items-center px-6", className)} {...props} />
}

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


--- File: components/ui/checkbox.tsx ---

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-2xs transition-shadow outline-hidden focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }


--- File: components/ui/collapsible.tsx ---

"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />
}

function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {
  return (
    <CollapsiblePrimitive.CollapsibleTrigger
      data-slot="collapsible-trigger"
      {...props}
    />
  )
}

function CollapsibleContent({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {
  return (
    <CollapsiblePrimitive.CollapsibleContent
      data-slot="collapsible-content"
      {...props}
    />
  )
}

export { Collapsible, CollapsibleTrigger, CollapsibleContent }


--- File: components/ui/container.tsx ---

import { cn } from "@/lib/utils"

export function Container({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("mx-auto w-full max-w-7xl px-6 lg:px-8", className)} {...props} />
}


--- File: components/ui/copy-oneliner.tsx ---

"use client"
import { Copy, Terminal } from "lucide-react"
import { cn } from "@/lib/utils"
import { useState } from "react"
import { Check } from "lucide-react"

interface CopyOnelinerProps {
  children: string
  className?: string
  iconClassName?: string
}

export function CopyOneliner({ children, className, iconClassName }: CopyOnelinerProps) {
  const [copied, setCopied] = useState(false)

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(children)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error("Failed to copy text: ", err)
    }
  }

  return (
    <div onClick={copyToClipboard} className={cn("relative text-sm py-3 px-3 flex items-center gap-2 rounded-md border text-left mx-auto -mt-4 font-mono", "cursor-pointer", className)}>
      <Terminal className={cn("w-4 h-4 opacity-50", iconClassName)} />
      <div className="flex-1">{children}</div>
      {copied ? <Check className="w-5 h-5 mr-1 scale-125 text-green-600" /> : <Copy className="w-5 h-5 mr-1 opacity-50" />}
    </div>
  )
}


--- File: components/ui/copy-to-clipboard.tsx ---

"use client"

import { useState } from "react"
import { cn } from "@/lib/utils"
import { Check, Copy } from "lucide-react"

interface CopyToClipboardProps {
  children: string
  className?: string
  iconClassName?: string
  timeout?: number
  position?: "top-right" | "top-left" | "bottom-right" | "bottom-left"
  hideContent?: boolean
}

const positionClasses = {
  "top-right": "right-5 top-5",
  "top-left": "left-5 top-5",
  "bottom-right": "right-5 bottom-5",
  "bottom-left": "left-5 bottom-5",
}

export function CopyToClipboard({ children, className, iconClassName, timeout = 1000, position = "top-right", hideContent = false }: CopyToClipboardProps) {
  const [copied, setCopiedState] = useState(false)

  const handleCopy = () => {
    if (copied) return
    navigator.clipboard.writeText(children)
    setCopiedState(true)
    setTimeout(() => {
      setCopiedState(false)
    }, timeout)
  }

  return (
    <>
      <button
        className={cn("absolute p-1.5 border dark:border-neutral-800 rounded-md z-[2] backdrop-blur-2xl cursor-pointer", positionClasses[position], copied && "text-green-500", className)}
        onClick={handleCopy}
      >
        {copied ? <Check className={cn("w-4.5 h-4.5 scale-110", iconClassName)} /> : <Copy className={cn("w-4.5 h-4.5", iconClassName)} />}
      </button>
      {!hideContent && children}
    </>
  )
}


--- File: components/ui/date-picker.tsx ---

"use client"

import * as React from "react"
import { format } from "date-fns"
import { Calendar as CalendarIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"

interface DatePickerProps {
  date: Date | undefined
  setDate: (date: Date | undefined) => void
  label?: string
  className?: string
}

export function DatePicker({ date, setDate, label = "Pick a date", className }: DatePickerProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant={"outline"} className={cn("w-full justify-start text-left font-normal", !date && "text-muted-foreground", className)}>
          <CalendarIcon className="mr-2 h-4 w-4" />
          {date ? format(date, "PPP") : <span>{label}</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0" align="start">
        <Calendar mode="single" selected={date} onSelect={setDate} initialFocus />
      </PopoverContent>
    </Popover>
  )
}

export function DateRangePicker({
  startDate,
  endDate,
  setStartDate,
  setEndDate,
  startLabel = "Start date",
  endLabel = "End date",
  className,
}: {
  startDate: Date | undefined
  endDate: Date | undefined
  setStartDate: (date: Date | undefined) => void
  setEndDate: (date: Date | undefined) => void
  startLabel?: string
  endLabel?: string
  className?: string
}) {
  return (
    <div className={cn("flex flex-col space-y-2 sm:flex-row sm:space-x-2 sm:space-y-0", className)}>
      <DatePicker date={startDate} setDate={setStartDate} label={startLabel} className="flex-1" />
      <DatePicker date={endDate} setDate={setEndDate} label={endLabel} className="flex-1" />
    </div>
  )
}


--- File: components/ui/dialog.tsx ---

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({ ...props }: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({ ...props }: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({ ...props }: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({ ...props }: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn("data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80", className)}
      {...props}
    />
  )
}

interface DialogContentProps extends React.ComponentProps<typeof DialogPrimitive.Content> {
  hideClose?: boolean
}

function DialogContent({ className, children, hideClose = false, ...props }: DialogContentProps) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {!hideClose && (
          <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg]:size-4">
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return <div data-slot="dialog-header" className={cn("flex flex-col gap-2 text-center sm:text-left", className)} {...props} />
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return <div data-slot="dialog-footer" className={cn("flex flex-col-reverse gap-2 sm:flex-row sm:justify-end", className)} {...props} />
}

function DialogTitle({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return <DialogPrimitive.Title data-slot="dialog-title" className={cn("text-lg leading-none font-semibold", className)} {...props} />
}

function DialogDescription({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return <DialogPrimitive.Description data-slot="dialog-description" className={cn("text-muted-foreground text-sm", className)} {...props} />
}

export { Dialog, DialogClose, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogOverlay, DialogPortal, DialogTitle, DialogTrigger }


--- File: components/ui/dropdown-menu.tsx ---

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground [svg]:*:data-[variant=destructive]:text-destructive-foreground! [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-disabled:pointer-events-none data-disabled:opacity-50 data-inset:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-disabled:pointer-events-none data-disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-disabled:pointer-events-none data-disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-inset:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-inset:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}


--- File: components/ui/image-upload.tsx ---

"use client"

import { useCallback, useState } from "react"
import { Button } from "@/components/ui/button"
import { ImagePlus, X } from "lucide-react"
import Image from "next/image"
import { toast } from "sonner"
import { useFileUpload } from "@/lib/upload-utils"

interface ImageUploadProps {
  value: string
  onChange: (url: string) => void
  onRemove: () => void
  folder?: string
  id?: string
}

export function ImageUpload({ id, value, onChange, onRemove, folder = "uploads" }: ImageUploadProps) {
  const [isUploading, setIsUploading] = useState(false)
  const { upload } = useFileUpload({
    folder,
    allowedTypes: ["image/jpeg", "image/png", "image/webp", "image/gif"],
  })

  const handleUpload = useCallback(
    async (e: React.ChangeEvent<HTMLInputElement>) => {
      try {
        const file = e.target.files?.[0]
        if (!file) return

        setIsUploading(true)
        const imageUrl = await upload(file)
        onChange(imageUrl)
        toast.success("Image uploaded successfully!")
      } catch (error) {
        console.error("Error uploading image:", error)
        toast.error(error instanceof Error ? error.message : "Failed to upload image")
      } finally {
        setIsUploading(false)
      }
    },
    [onChange, upload]
  )

  return (
    <div className="flex flex-col items-center gap-4">
      <div className="relative aspect-video w-full overflow-hidden rounded-lg border border-border">
        {value ? (
          <>
            <Image src={value} alt="Project Cover" fill className="object-cover" />
            <Button variant="destructive" size="icon" className="absolute right-2 top-2" onClick={onRemove}>
              <X className="h-4 w-4" />
            </Button>
          </>
        ) : (
          <label className="flex h-full w-full cursor-pointer items-center justify-center bg-muted">
            <div className="flex flex-col items-center gap-2">
              <ImagePlus className="h-8 w-8 text-muted-foreground" />
              <span className="text-sm text-muted-foreground">Upload Cover Image</span>
            </div>
            <input id={id} type="file" accept="image/*" className="hidden" onChange={handleUpload} disabled={isUploading} />
          </label>
        )}
      </div>
    </div>
  )
}


--- File: components/ui/input.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-2xs transition-[color,box-shadow] outline-hidden file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }


--- File: components/ui/label.tsx ---

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }


--- File: components/ui/popover.tsx ---

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }


--- File: components/ui/progress.tsx ---

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }


--- File: components/ui/radio-group.tsx ---

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive aspect-square size-4 shrink-0 rounded-full border shadow-2xs transition-[color,box-shadow] outline-hidden focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}

export { RadioGroup, RadioGroupItem }


--- File: components/ui/scroll-area.tsx ---

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


--- File: components/ui/select.tsx ---

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger>) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex h-9 w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("px-2 py-1.5 text-sm font-medium", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}


--- File: components/ui/separator.tsx ---

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }


--- File: components/ui/sheet.tsx ---

"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


--- File: components/ui/sonner.tsx ---

"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground font-medium",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground font-medium",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


--- File: components/ui/switch.tsx ---

"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }


--- File: components/ui/table.tsx ---

"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table ref={ref} className={cn("w-full caption-bottom text-sm", className)} {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props }, ref) => (
  <tbody ref={ref} className={cn("[&_tr:last-child]:border-0", className)} {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props }, ref) => (
  <tfoot ref={ref} className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)} {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(({ className, ...props }, ref) => (
  <tr ref={ref} className={cn("border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted", className)} {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(({ className, ...props }, ref) => (
  <th ref={ref} className={cn("h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0", className)} {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(({ className, ...props }, ref) => (
  <td ref={ref} className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)} {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(({ className, ...props }, ref) => (
  <caption ref={ref} className={cn("mt-4 text-sm text-muted-foreground", className)} {...props} />
))
TableCaption.displayName = "TableCaption"

export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption }


--- File: components/ui/tabs.tsx ---

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({ className, ...props }: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return <TabsPrimitive.Root data-slot="tabs" className={cn("flex flex-col gap-2", className)} {...props} />
}

function TabsList({ className, ...props }: React.ComponentProps<typeof TabsPrimitive.List>) {
  return <TabsPrimitive.List data-slot="tabs-list" className={cn("bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-1", className)} {...props} />
}

function TabsTrigger({ className, ...props }: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring inline-flex flex-1 items-center justify-center gap-1.5 rounded-md px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-xs [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 cursor-pointer",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({ className, ...props }: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return <TabsPrimitive.Content data-slot="tabs-content" className={cn("flex-1 outline-hidden", className)} {...props} />
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


--- File: components/ui/textarea.tsx ---

import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }


--- File: components/views/explore-view.tsx ---

"use client"

import { useState, useEffect } from "react"
import { IdeaCarousel } from "@/components/idea-carousel"
import { useUser, SignInButton } from "@clerk/nextjs"
import { Button } from "@/components/ui/button"
import { Loader2 } from "lucide-react"
import { useQuery } from "convex/react"
import { api } from "@/convex/_generated/api"
import type { StartupIdea } from "@/lib/data"
import { mockIdeas } from "@/lib/data/mock-ideas"
import { Card, CardContent } from "@/components/ui/card"

export function ExploreView() {
  const { isLoaded, isSignedIn } = useUser()
  // Only auto-show carousel if signed in
  const [showCarousel, setShowCarousel] = useState(isSignedIn)
  const convexIdeas = useQuery(api.ideas.list) ?? []

  // Auto-open carousel for signed-in users
  useEffect(() => {
    if (isLoaded && isSignedIn && !showCarousel) {
      setShowCarousel(true)
    }
  }, [isLoaded, isSignedIn])

  // Map Convex ideas to StartupIdea type
  interface ConvexIdea {
    _id: string
    name: string
    description: string
    imageUrl?: string
    srcUrl?: string
    createdAt: string | number | Date
  }
  const ideas: StartupIdea[] = (convexIdeas as ConvexIdea[]).map((idea) => ({
    id: idea._id,
    title: idea.name,
    description: idea.description,
    imageUrl: idea.imageUrl,
    srcUrl: idea.srcUrl,
    createdAt: new Date(idea.createdAt),
  }))

  if (!isLoaded) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    )
  }

  // For guests, always show mock ideas
  const showIdeas = isSignedIn ? ideas : mockIdeas
  const isGuest = !isSignedIn

  if (!showIdeas.length) {
    return (
      <div className="container px-4 py-12 md:px-6 md:py-24">
        <div className="text-center mb-12">
          <div className="flex justify-center mt-16">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="container px-4 py-12 md:px-6 md:py-24">
      {!isGuest && (
        <div className="text-center mb-12">
          <h1 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl mb-4">
            Explore <span className="text-primary">Ideas</span>
          </h1>
          <p className="max-w-[600px] mx-auto text-gray-500 text-balance md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">Swipe through project ideas and find your vibe.</p>
          {/* Start Swiping button for signed-in users when carousel is not open */}
          {isSignedIn && !showCarousel && (
            <Button size="lg" className="mt-6" onClick={() => setShowCarousel(true)}>
              Start Swiping
            </Button>
          )}
        </div>
      )}

      <div className="mx-auto max-w-3xl">
        {isGuest && !showCarousel && (
          <Card className="mb-8">
            <CardContent className="flex flex-col items-center gap-6 py-10">
              <div className="text-center space-y-2">
                <h2 className="text-2xl font-semibold">Sign up to explore all ideas</h2>
                <p className="text-muted-foreground">
                  Create an account to swipe, save, and unlock the full experience.
                  <br />
                  Or preview a few ideas below.
                </p>
              </div>
              <SignInButton mode="modal">
                <Button size="lg" className="w-full max-w-xs">
                  Sign up / Sign in
                </Button>
              </SignInButton>
              <div className="flex items-center w-full max-w-xs gap-2">
                <div className="flex-1 h-px bg-muted" />
                <span className="text-muted-foreground text-xs">or</span>
                <div className="flex-1 h-px bg-muted" />
              </div>
              <Button size="lg" variant="outline" className="w-full max-w-xs" onClick={() => setShowCarousel(true)}>
                Preview Ideas
              </Button>
            </CardContent>
          </Card>
        )}
      </div>

      {showCarousel && <IdeaCarousel ideas={showIdeas} isOpen={showCarousel} onClose={() => setShowCarousel(false)} {...(isGuest && { isGuest: true })} />}
    </div>
  )
}


--- File: components/views/home-view.tsx ---

import { HeroSection } from "@/components/hero-section"
import { TrendingIdeasSection } from "@/components/trending-ideas-section"

export function HomeView() {
  return (
    <>
      <HeroSection />
      <TrendingIdeasSection />
    </>
  )
}


--- File: components/views/matches-view.tsx ---

import Link from "next/link"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { getUserMatches } from "@/lib/services/ideas"
import { auth } from "@clerk/nextjs/server"
import { SignInButton } from "@clerk/nextjs"
import { getGradient } from "@/lib/utils"
import { CopyPromptButtons } from "@/components/copy-prompt-buttons"
import { Toaster } from "sonner"

export async function MatchesView() {
  const { userId } = await auth()

  if (!userId) {
    return (
      <div className="container max-w-4xl px-4 py-12 md:px-6 md:py-24">
        <Card className="p-6 text-center">
          <p className="text-gray-500 mb-4">Sign in to see your matches</p>
          <SignInButton mode="modal">
            <Button className="bg-primary hover:bg-primary/90">Sign in</Button>
          </SignInButton>
        </Card>
      </div>
    )
  }

  const matchedIdeas = await getUserMatches(userId)

  return (
    <div className="container max-w-4xl px-4 py-12 md:px-6 md:py-24">
      <div className="text-center mb-12">
        <h1 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl mb-4">
          Your <span className="text-primary">Matches</span>
        </h1>
        <p className="max-w-[600px] text-balance mx-auto text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
          Ideas you&apos;ve matched with. Use the prompts to generate a PRD or get development guidance.
        </p>
      </div>

      <div className="space-y-12">
        <section>
          <div className="grid gap-6 md:grid-cols-2">
            {matchedIdeas.map((idea) => (
              <Card className="pt-0 overflow-hidden" key={idea._id}>
                {idea.imageUrl ? (
                  <div className="relative aspect-[9/16] w-full max-h-[200px]">
                    <Image src={idea.imageUrl || "/placeholder.svg"} alt={idea.name} fill className="object-cover" />
                  </div>
                ) : (
                  <div className={`aspect-[9/16] w-full max-h-[200px] bg-gradient-to-br ${getGradient(idea._id)}`} />
                )}
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <CardTitle className="text-xl">{idea.name}</CardTitle>
                  </div>
                </CardHeader>
                <CardContent className="-mt-4">
                  <p className="text-gray-600 line-clamp-3">{idea.description}</p>
                </CardContent>
                <CardFooter>
                  <CopyPromptButtons idea={idea} />
                </CardFooter>
              </Card>
            ))}
          </div>

          {matchedIdeas.length === 0 && (
            <Card className="p-6 text-center">
              <p className="text-gray-500 mb-4">You don&apos;t have any matches yet.</p>
              <Link href="/explore">
                <Button className="bg-green-500 hover:bg-green-600">Start Swiping</Button>
              </Link>
            </Card>
          )}
        </section>
      </div>
      <Toaster richColors closeButton position="top-center" />
    </div>
  )
}


--- File: components/views/signin-view.tsx ---

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

export function SignInView() {
  return (
    <div className="container flex h-[calc(100vh-8rem)] items-center justify-center px-4 md:px-6">
      <div className="w-full max-w-sm space-y-4">
        <div className="space-y-2 text-center">
          <h1 className="text-3xl font-bold">Sign In</h1>
          <p className="text-gray-500">Enter your email below to sign in to your account</p>
        </div>
        <Card>
          <CardHeader>
            <CardTitle>Sign In</CardTitle>
            <CardDescription>Enter your credentials to access your account</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input id="email" placeholder="m@example.com" required type="email" />
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="password">Password</Label>
                <Link href="#" className="text-sm text-green-500 hover:underline">
                  Forgot password?
                </Link>
              </div>
              <Input id="password" required type="password" />
            </div>
          </CardContent>
          <CardFooter className="flex flex-col">
            <Button className="w-full bg-green-500 hover:bg-green-600">Sign In</Button>
          </CardFooter>
        </Card>
        <div className="text-center text-sm">
          Don&apos;t have an account?{" "}
          <Link href="/signup" className="text-green-500 hover:underline">
            Sign up
          </Link>
        </div>
      </div>
    </div>
  )
}


--- File: components/views/signup-view.tsx ---

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"

export function SignUpView() {
  return (
    <div className="container flex h-[calc(100vh-8rem)] items-center justify-center px-4 md:px-6">
      <div className="w-full max-w-sm space-y-4">
        <div className="space-y-2 text-center">
          <h1 className="text-3xl font-bold">Sign Up</h1>
          <p className="text-gray-500">Create an account to start swiping startup ideas</p>
        </div>
        <Card>
          <CardHeader>
            <CardTitle>Create an account</CardTitle>
            <CardDescription>Enter your information to create your account</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="first-name">First name</Label>
                <Input id="first-name" placeholder="Max" required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="last-name">Last name</Label>
                <Input id="last-name" placeholder="Robinson" required />
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input id="email" placeholder="m@example.com" required type="email" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input id="password" required type="password" />
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="terms" />
              <label
                htmlFor="terms"
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                I agree to the{" "}
                <Link href="#" className="text-green-500 hover:underline">
                  terms of service
                </Link>{" "}
                and{" "}
                <Link href="#" className="text-green-500 hover:underline">
                  privacy policy
                </Link>
              </label>
            </div>
          </CardContent>
          <CardFooter className="flex flex-col">
            <Button className="w-full bg-green-500 hover:bg-green-600">Create Account</Button>
          </CardFooter>
        </Card>
        <div className="text-center text-sm">
          Already have an account?{" "}
          <Link href="/signin" className="text-green-500 hover:underline">
            Sign in
          </Link>
        </div>
      </div>
    </div>
  )
}


--- File: components/views/submit-view.tsx ---

"use client"

import { useState } from "react"
import { SignInButton } from "@clerk/nextjs"
import { useUser } from "@clerk/nextjs"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

export function SubmitView() {
  const [isGuest, setIsGuest] = useState(false)
  const { isSignedIn, isLoaded } = useUser()

  if (!isLoaded) {
    return (
      <div className="container max-w-4xl px-4 py-12 md:px-6 md:py-24">
        <Card>
          <CardContent className="flex items-center justify-center py-16">
            <div className="animate-pulse">Loading...</div>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Show auth choice if not signed in and not chosen to continue as guest
  if (!isSignedIn && !isGuest) {
    return (
      <div className="container max-w-4xl px-4 py-12 md:px-6 md:py-24">
        <div className="text-center mb-12">
          <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl mb-4">
            Submit Your <span className="text-green-500">Startup Idea</span>
          </h1>
          <p className="max-w-[600px] mx-auto text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">Share your innovative concept with our community and get valuable feedback.</p>
        </div>

        <Card>
          <CardContent className="flex flex-col items-center gap-6 py-16">
            <div className="text-center space-y-2">
              <h2 className="text-2xl font-semibold">Choose How to Continue</h2>
              <p className="text-muted-foreground">Sign in to track and manage your submissions, or continue as a guest</p>
            </div>
            <div className="flex flex-col gap-4 w-full max-w-[300px]">
              <SignInButton mode="modal">
                <Button size="lg" className="w-full">
                  Sign In
                </Button>
              </SignInButton>
              <Button variant="outline" size="lg" className="w-full" onClick={() => setIsGuest(true)}>
                Continue as Guest
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Show the submission form for signed in users or guests
  return (
    <div className="container max-w-4xl px-4 py-12 md:px-6 md:py-24">
      <div className="text-center mb-12">
        <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl mb-4">
          Submit Your <span className="text-green-500">Startup Idea</span>
        </h1>
        <p className="max-w-[600px] mx-auto text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">Share your innovative concept with our community and get valuable feedback.</p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Idea Details</CardTitle>
          <CardDescription>Fill out the form below to submit your startup idea to our platform.</CardDescription>
          {!isSignedIn && <p className="text-sm text-yellow-600 mt-2">Note: You are submitting as a guest. Sign in to track and manage your submissions.</p>}
        </CardHeader>
        <CardContent>
          <form className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="title">Idea Title</Label>
              <Input id="title" placeholder="Enter a catchy title for your idea" />
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              <Textarea id="description" placeholder="Describe your idea in detail. What problem does it solve? Who is it for?" className="min-h-[120px]" />
            </div>

            <div className="space-y-2">
              <Label htmlFor="image">Image (Optional)</Label>
              <Input id="image" type="file" accept="image/*" />
              <p className="text-xs text-gray-500">Add an image to make your idea stand out. If no image is provided, a gradient background will be used.</p>
            </div>

            <div className="pt-4">
              <Button type="submit" className="w-full bg-green-500 hover:bg-green-600">
                Submit Idea
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}


--- File: components/views/trending-view.tsx ---

import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { Heart, MessageCircle, Star, TrendingUp } from "lucide-react"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { getTrendingIdeas } from "@/lib/data"

export function TrendingView() {
  const trendingIdeas = getTrendingIdeas()

  // Generate a gradient based on the idea's id
  const getGradient = (id: number) => {
    const gradients = [
      "from-pink-500 to-purple-500",
      "from-blue-500 to-teal-500",
      "from-green-500 to-emerald-500",
      "from-yellow-500 to-orange-500",
      "from-purple-500 to-indigo-500",
      "from-red-500 to-pink-500",
    ]
    return gradients[id % gradients.length]
  }

  return (
    <div className="container max-w-6xl px-4 py-12 md:px-6 md:py-24">
      <div className="text-center mb-12">
        <h1 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl mb-4 flex items-center justify-center gap-2">
          <TrendingUp className="text-primary" />
          <span>
            Trending <span className="text-primary">Ideas</span>
          </span>
        </h1>
        <p className="max-w-[600px] mx-auto text-gray-500 md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
          Discover the hottest startup ideas that are gaining traction across our community.
        </p>
      </div>

      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8">
        <Tabs defaultValue="all" className="w-full md:w-auto">
          <TabsList>
            <TabsTrigger value="all">All Time</TabsTrigger>
            <TabsTrigger value="week">This Week</TabsTrigger>
            <TabsTrigger value="month">This Month</TabsTrigger>
          </TabsList>
        </Tabs>

        <div className="flex flex-col sm:flex-row gap-4 w-full md:w-auto">
          <Select>
            <SelectTrigger className="w-full sm:w-[180px]">
              <SelectValue placeholder="Sort By" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="likes">Most Liked</SelectItem>
              <SelectItem value="matches">Most Matches</SelectItem>
              <SelectItem value="comments">Most Discussed</SelectItem>
              <SelectItem value="growth">Fastest Growing</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {trendingIdeas.map((idea) => (
          <Card key={idea.id} className="overflow-hidden">
            {idea.imageUrl ? (
              <div className="relative aspect-[9/16] w-full max-h-[300px]">
                <Image src={idea.imageUrl || "/placeholder.svg"} alt={idea.title} fill className="object-cover" />
              </div>
            ) : (
              <div className={`aspect-[9/16] w-full max-h-[300px] bg-gradient-to-br ${getGradient(Number(idea.id))}`} />
            )}
            <CardContent className="p-6">
              <div className="flex justify-between items-start mb-4">
                <h3 className="font-bold text-lg">{idea.title}</h3>
              </div>
              <p className="text-gray-600 text-sm mb-4 line-clamp-2">{idea.description}</p>
              {typeof idea.likeCount === "number" && (
                <div className="flex items-center gap-1">
                  <Heart className="h-4 w-4 text-red-500" />
                  <span>{idea.likeCount} likes</span>
                </div>
              )}
            </CardContent>
            <CardFooter className="flex justify-between p-4 pt-0">
              <Button variant="outline" size="sm">
                <Star className="mr-2 h-4 w-4" />
                Save
              </Button>
              <Button size="sm" className="bg-green-500 hover:bg-green-600">
                <MessageCircle className="mr-2 h-4 w-4" />
                Discuss
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>

      <div className="mt-12 text-center">
        <Button variant="outline" size="lg" className="gap-2">
          Load More
          <TrendingUp className="h-4 w-4" />
        </Button>
      </div>
    </div>
  )
}


--- File: components.json ---

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

--- File: convex/README.md ---

# Welcome to your Convex functions directory!

Write your Convex functions here.
See https://docs.convex.dev/functions for more.

A query function that takes two arguments looks like:

```ts
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

Using this query function in a React component looks like:

```ts
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

A mutation function looks like:

```ts
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

Using this mutation function in a React component looks like:

```ts
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

Use the Convex CLI to push your functions to a deployment. See everything
the Convex CLI can do by running `npx convex -h` in your project root
directory. To learn more, launch the docs with `npx convex docs`.


--- File: convex/_generated/api.d.ts ---

/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  ApiFromModules,
  FilterApi,
  FunctionReference,
} from "convex/server";
import type * as ideas from "../ideas.js";
import type * as mailingList from "../mailingList.js";
import type * as seed from "../seed.js";
import type * as testing from "../testing.js";
import type * as utils from "../utils.js";
import type * as visits from "../visits.js";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
declare const fullApi: ApiFromModules<{
  ideas: typeof ideas;
  mailingList: typeof mailingList;
  seed: typeof seed;
  testing: typeof testing;
  utils: typeof utils;
  visits: typeof visits;
}>;
export declare const api: FilterApi<
  typeof fullApi,
  FunctionReference<any, "public">
>;
export declare const internal: FilterApi<
  typeof fullApi,
  FunctionReference<any, "internal">
>;


--- File: convex/_generated/api.js ---

/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import { anyApi } from "convex/server";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
export const api = anyApi;
export const internal = anyApi;


--- File: convex/_generated/dataModel.d.ts ---

/* eslint-disable */
/**
 * Generated data model types.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  DataModelFromSchemaDefinition,
  DocumentByName,
  TableNamesInDataModel,
  SystemTableNames,
} from "convex/server";
import type { GenericId } from "convex/values";
import schema from "../schema.js";

/**
 * The names of all of your Convex tables.
 */
export type TableNames = TableNamesInDataModel<DataModel>;

/**
 * The type of a document stored in Convex.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Doc<TableName extends TableNames> = DocumentByName<
  DataModel,
  TableName
>;

/**
 * An identifier for a document in Convex.
 *
 * Convex documents are uniquely identified by their `Id`, which is accessible
 * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
 *
 * Documents can be loaded using `db.get(id)` in query and mutation functions.
 *
 * IDs are just strings at runtime, but this type can be used to distinguish them from other
 * strings when type checking.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Id<TableName extends TableNames | SystemTableNames> =
  GenericId<TableName>;

/**
 * A type describing your Convex data model.
 *
 * This type includes information about what tables you have, the type of
 * documents stored in those tables, and the indexes defined on them.
 *
 * This type is used to parameterize methods like `queryGeneric` and
 * `mutationGeneric` to make them type-safe.
 */
export type DataModel = DataModelFromSchemaDefinition<typeof schema>;


--- File: convex/_generated/server.d.ts ---

/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  ActionBuilder,
  HttpActionBuilder,
  MutationBuilder,
  QueryBuilder,
  GenericActionCtx,
  GenericMutationCtx,
  GenericQueryCtx,
  GenericDatabaseReader,
  GenericDatabaseWriter,
} from "convex/server";
import type { DataModel } from "./dataModel.js";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const query: QueryBuilder<DataModel, "public">;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const internalQuery: QueryBuilder<DataModel, "internal">;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const mutation: MutationBuilder<DataModel, "public">;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const internalMutation: MutationBuilder<DataModel, "internal">;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export declare const action: ActionBuilder<DataModel, "public">;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export declare const internalAction: ActionBuilder<DataModel, "internal">;

/**
 * Define an HTTP action.
 *
 * This function will be used to respond to HTTP requests received by a Convex
 * deployment if the requests matches the path and method where this action
 * is routed. Be sure to route your action in `convex/http.js`.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Import this function from `convex/http.js` and route it to hook it up.
 */
export declare const httpAction: HttpActionBuilder;

/**
 * A set of services for use within Convex query functions.
 *
 * The query context is passed as the first argument to any Convex query
 * function run on the server.
 *
 * This differs from the {@link MutationCtx} because all of the services are
 * read-only.
 */
export type QueryCtx = GenericQueryCtx<DataModel>;

/**
 * A set of services for use within Convex mutation functions.
 *
 * The mutation context is passed as the first argument to any Convex mutation
 * function run on the server.
 */
export type MutationCtx = GenericMutationCtx<DataModel>;

/**
 * A set of services for use within Convex action functions.
 *
 * The action context is passed as the first argument to any Convex action
 * function run on the server.
 */
export type ActionCtx = GenericActionCtx<DataModel>;

/**
 * An interface to read from the database within Convex query functions.
 *
 * The two entry points are {@link DatabaseReader.get}, which fetches a single
 * document by its {@link Id}, or {@link DatabaseReader.query}, which starts
 * building a query.
 */
export type DatabaseReader = GenericDatabaseReader<DataModel>;

/**
 * An interface to read from and write to the database within Convex mutation
 * functions.
 *
 * Convex guarantees that all writes within a single mutation are
 * executed atomically, so you never have to worry about partial writes leaving
 * your data in an inconsistent state. See [the Convex Guide](https://docs.convex.dev/understanding/convex-fundamentals/functions#atomicity-and-optimistic-concurrency-control)
 * for the guarantees Convex provides your functions.
 */
export type DatabaseWriter = GenericDatabaseWriter<DataModel>;


--- File: convex/_generated/server.js ---

/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  actionGeneric,
  httpActionGeneric,
  queryGeneric,
  mutationGeneric,
  internalActionGeneric,
  internalMutationGeneric,
  internalQueryGeneric,
} from "convex/server";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const query = queryGeneric;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const internalQuery = internalQueryGeneric;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const mutation = mutationGeneric;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const internalMutation = internalMutationGeneric;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export const action = actionGeneric;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export const internalAction = internalActionGeneric;

/**
 * Define a Convex HTTP action.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument, and a `Request` object
 * as its second.
 * @returns The wrapped endpoint function. Route a URL path to this function in `convex/http.js`.
 */
export const httpAction = httpActionGeneric;


--- File: convex/ideas.ts ---

import { mutation, query } from "./_generated/server";
import { v } from "convex/values";
import { Id } from "./_generated/dataModel";

export const create = mutation({
  args: {
    name: v.string(),
    description: v.string(),
    imageUrl: v.optional(v.string()),
    srcUrl: v.optional(v.string()),
    createdAt: v.number(),
    updatedAt: v.number(),
  },
  handler: async (ctx, args) => {
    const id = await ctx.db.insert("ideas", args);
    return id;
  },
});

export const list = query({
  args: {},
  handler: async (ctx) => {
    return await ctx.db.query("ideas").order("desc").collect();
  },
});

export const recordSwipe = mutation({
  args: {
    ideaId: v.string(),
    userId: v.string(),
    liked: v.boolean(),
    createdAt: v.number(),
  },
  handler: async (ctx, args) => {
    // Upsert: if a swipe exists for this user/idea, update it; otherwise, insert
    const existing = await ctx.db
      .query("idea_swipes")
      .withIndex("by_idea_user", q => q.eq("ideaId", args.ideaId).eq("userId", args.userId))
      .first();
    if (existing) {
      await ctx.db.patch(existing._id, {
        liked: args.liked,
        createdAt: args.createdAt,
      });
      return existing._id;
    } else {
      return await ctx.db.insert("idea_swipes", args);
    }
  },
});

export const getUserSwipedIdeaIds = query({
  args: { userId: v.string() },
  handler: async (ctx, args) => {
    const swipes = await ctx.db
      .query("idea_swipes")
      .withIndex("by_user", q => q.eq("userId", args.userId))
      .collect();
    return swipes.map(s => s.ideaId);
  },
});

export const getUserMatches = query({
  args: { userId: v.string() },
  handler: async (ctx, args) => {
    // Get all liked swipes for this user
    const swipes = await ctx.db
      .query("idea_swipes")
      .withIndex("by_user", q => q.eq("userId", args.userId))
      .filter(q => q.eq(q.field("liked"), true))
      .collect();

    // Get all the ideas that were liked
    const matchedIdeas = await Promise.all(
      swipes.map(async (swipe) => {
        const idea = await ctx.db.get(swipe.ideaId as Id<"ideas">);
        if (!idea) return null;
        return {
          ...idea,
          swipedAt: swipe.createdAt,
        };
      })
    );

    // Filter out any null values and sort by most recently swiped
    return matchedIdeas
      .filter((idea): idea is NonNullable<typeof idea> => idea !== null)
      .sort((a, b) => b.swipedAt - a.swipedAt);
  },
});

export const getAllIdeas = query({
  args: {
    paginationOpts: v.optional(
      v.object({
        cursor: v.optional(v.string()),
        numItems: v.number(),
      })
    ),
  },
  handler: async (ctx, args) => {
    const query = ctx.db.query("ideas").order("desc");
    
    if (args.paginationOpts) {
      const { cursor, numItems } = args.paginationOpts;
      const paginatedResults = await query.paginate({ cursor: cursor ?? null, numItems });
      
      return {
        ideas: paginatedResults.page,
        nextCursor: paginatedResults.continueCursor,
      };
    }

    return {
      ideas: await query.collect(),
      nextCursor: null,
    };
  },
});

// Define the idea input type
const ideaInput = v.object({
  name: v.string(),
  description: v.string(),
  imageUrl: v.optional(v.string()),
  srcUrl: v.optional(v.string()),
});

export const importIdeas = mutation({
  args: {
    ideas: v.array(
      v.object({
        name: v.string(),
        description: v.string(),
        imageUrl: v.optional(v.string()),
        srcUrl: v.optional(v.string()),
      })
    ),
  },
  handler: async (ctx, args) => {
    const now = Date.now();
    
    // Insert each idea
    for (const idea of args.ideas) {
      await ctx.db.insert("ideas", {
        ...idea,
        createdAt: now,
        updatedAt: now,
      });
    }
    
    return args.ideas.length;
  },
});

export const updateIdea = mutation({
  args: {
    id: v.id("ideas"),
    update: v.object({
      name: v.optional(v.string()),
      description: v.optional(v.string()),
      imageUrl: v.optional(v.string()),
    }),
  },
  handler: async (ctx, args) => {
    const { id, update } = args;
    await ctx.db.patch(id, {
      ...update,
      updatedAt: Date.now(),
    });
    return id;
  },
}); 

--- File: convex/mailingList.ts ---

import { v } from "convex/values";
import { mutation, query } from "./_generated/server";
import { Doc, Id } from "./_generated/dataModel";
import {
  ConvexResponse,
  getCurrentTimestamp,
  getBaseFields,
  handleError,
  handleSuccess,
} from "./utils";

// Types
export type MailingListSubscription = Doc<"mailing_list_subscriptions">;

// Queries
export const getSubscriptions = query({
  handler: async (ctx) => {
    try {
      return await ctx.db
        .query("mailing_list_subscriptions")
        .order("desc")
        .collect();
    } catch (error) {
      console.error("Error getting subscriptions:", error);
      throw error;
    }
  },
});

export const getSubscriptionByEmail = query({
  args: { email: v.string() },
  handler: async (ctx, args) => {
    try {
      return await ctx.db
        .query("mailing_list_subscriptions")
        .withIndex("by_email", (q) => q.eq("email", args.email))
        .first();
    } catch (error) {
      console.error("Error getting subscription by email:", error);
      throw error;
    }
  },
});

// Mutations
export const subscribe = mutation({
  args: {
    userId: v.string(),
    email: v.string(),
    name: v.optional(v.string()),
    preferences: v.object({
      marketing: v.boolean(),
      updates: v.boolean(),
    }),
  },
  handler: async (ctx, args) => {
    try {
      // Check if email already exists
      const existing = await ctx.db
        .query("mailing_list_subscriptions")
        .withIndex("by_email", (q) => q.eq("email", args.email))
        .first();

      if (existing) {
        throw new Error("Email already subscribed");
      }

      const now = Date.now();
      const subscription = {
        userId: args.userId,
        email: args.email,
        name: args.name,
        preferences: args.preferences,
        subscribedAt: now,
        unsubscribedAt: null,
        createdAt: now,
        updatedAt: now,
      };

      const id = await ctx.db.insert("mailing_list_subscriptions", subscription);
      return await ctx.db.get(id);
    } catch (error) {
      console.error("Error subscribing:", error);
      throw error;
    }
  },
});

export const unsubscribe = mutation({
  args: { 
    email: v.string(),
  },
  handler: async (ctx, args) => {
    try {
      console.log('[unsubscribe] Attempting to unsubscribe email:', args.email);
      const subscription = await ctx.db
        .query("mailing_list_subscriptions")
        .withIndex("by_email", (q) => q.eq("email", args.email))
        .first();
      console.log('[unsubscribe] Subscription found:', subscription);
      if (!subscription) {
        throw new Error("Subscription not found");
      }
      const now = Date.now();
      await ctx.db.patch(subscription._id, {
        unsubscribedAt: now,
        updatedAt: now,
      });
      return true;
    } catch (error) {
      console.error("Error unsubscribing:", error);
      throw error;
    }
  },
});

export const deleteSubscription = mutation({
  args: { id: v.id("mailing_list_subscriptions") },
  handler: async (ctx, args) => {
    await ctx.db.delete(args.id);
  },
});

export const updatePreferences = mutation({
  args: {
    userId: v.string(),
    preferences: v.object({
      marketing: v.boolean(),
      updates: v.boolean(),
    }),
  },
  handler: async (ctx, args) => {
    // Find the active subscription for this user
    const subscription = await ctx.db
      .query("mailing_list_subscriptions")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .first();

    if (!subscription || subscription.unsubscribedAt !== null) {
      throw new Error("Active subscription not found");
    }

    await ctx.db.patch(subscription._id, {
      preferences: args.preferences,
      updatedAt: Date.now(),
    });

    return true;
  },
}); 

--- File: convex/schema.ts ---

import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

// Define the base fields that all documents will have
const baseFields = {
  createdAt: v.number(), // Unix timestamp
  updatedAt: v.number(), // Unix timestamp
};

// Define your schema
export default defineSchema({
  visits: defineTable({
    path: v.string(),
    userId: v.union(v.string(), v.null()),
    metadata: v.any(),
    createdAt: v.number(),
    updatedAt: v.number(),
  }).index("by_user", ["userId"])
    .index("by_path", ["path"])
    .index("by_created", ["createdAt"]),

  mailing_list_subscriptions: defineTable({
    userId: v.string(),
    email: v.string(),
    name: v.optional(v.string()),
    preferences: v.object({
      marketing: v.boolean(),
      updates: v.boolean(),
    }),
    subscribedAt: v.number(),
    unsubscribedAt: v.union(v.number(), v.null()),
    createdAt: v.number(),
    updatedAt: v.number(),
  }).index("by_email", ["email"])
    .index("by_user", ["userId"])
    .index("by_subscribed", ["subscribedAt"]),

  // New ideas table
  ideas: defineTable({
    name: v.string(),
    description: v.string(),
    imageUrl: v.optional(v.string()),
    srcUrl: v.optional(v.string()),
    createdAt: v.number(),
    updatedAt: v.number(),
  }),

  // Table to track user swipes (like/dislike) on ideas
  idea_swipes: defineTable({
    ideaId: v.string(),
    userId: v.string(),
    liked: v.boolean(), // true = like, false = dislike
    createdAt: v.number(),
  })
    .index("by_idea", ["ideaId"])
    .index("by_user", ["userId"])
    .index("by_idea_user", ["ideaId", "userId"]),
}); 

--- File: convex/seed.ts ---

import { mutation } from "./_generated/server";

// Export the seed data so it can be used by other modules
export const seedIdeas = [
  {
    name: "MoodTunes",
    description: "A music player that generates playlists based on your current mood using AI emotion detection.",
    imageUrl: "https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4",
    srcUrl: "https://github.com/example/moodtunes",
  },
  {
    name: "PlantPal",
    description: "An app that helps you care for your houseplants with reminders, watering schedules, and plant identification.",
    imageUrl: "https://images.unsplash.com/photo-1628246498566-c846ce32a5b5",
    srcUrl: "https://github.com/example/plantpal",
  },
  {
    name: "VibeSwipe",
    description: "Swipe through creative project ideas and vibe the ones you love. Like Tinder, but for side projects!",
    imageUrl: "https://images.unsplash.com/photo-1506744038136-46273834b3fb",
    srcUrl: "https://github.com/example/vibeswipe",
  },
  {
    name: "Recipe Remix",
    description: "Input your pantry ingredients and get AI-generated creative recipes you can cook tonight.",
    imageUrl: "https://images.unsplash.com/photo-1504674900247-0877df9cc836",
    srcUrl: "https://github.com/example/reciperemix",
  },
  {
    name: "Focus Forest",
    description: "A productivity timer that grows a virtual forest as you stay focused. Lose focus, lose trees!",
    imageUrl: "https://images.unsplash.com/photo-1465101178521-c1a9136a3b99",
    srcUrl: "https://github.com/example/focusforest",
  },
  {
    name: "TravelBack",
    description: "See what your city looked like 100 years ago with historical map overlays and photos.",
    imageUrl: "https://images.unsplash.com/photo-1465101046530-73398c7f28ca",
    srcUrl: "https://github.com/example/travelback",
  },
  {
    name: "PetMatch",
    description: "Find your perfect pet match by swiping through adoptable pets from local shelters.",
    imageUrl: "https://images.unsplash.com/photo-1518717758536-85ae29035b6d",
    srcUrl: "https://github.com/example/petmatch",
  },
];

export const seed = mutation({
  args: {},
  handler: async (ctx, args) => {
    // Only seed if there are no ideas yet
    const existing = await ctx.db.query("ideas").first();
    if (existing) {
      console.log("Ideas already seeded.");
      return;
    }

    // Insert all ideas with timestamps
    for (const idea of seedIdeas) {
      await ctx.db.insert("ideas", {
        ...idea,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    }
    console.log("Seeded ideas.");
  },
}); 

--- File: convex/testing.ts ---

import { v } from "convex/values"
import { mutation, query } from "./_generated/server"
import { seedIdeas } from "./seed"

// Define allowed table names for type safety
const ALLOWED_TABLES = ["visits", "mailing_list_subscriptions", "idea_swipes", "ideas"] as const
type TableName = typeof ALLOWED_TABLES[number]

function isTestOrDevEnv() {
  return process.env.NODE_ENV === "test" || process.env.NODE_ENV === "development";
}

/**
 * Delete all documents from a table
 * This mutation should only be available in test environments
 */
export const deleteAll = mutation({
  args: { tableName: v.union(
    v.literal("visits"),
    v.literal("mailing_list_subscriptions"),
    v.literal("idea_swipes"),
    v.literal("ideas")
  ) },
  handler: async (ctx, args) => {
    if (!isTestOrDevEnv()) {
      throw new Error("This operation is only allowed in test or development environments");
    }
    const documents = await ctx.db.query(args.tableName).collect()
    for (const doc of documents) {
      await ctx.db.delete(doc._id)
    }
    return { success: true }
  },
})

/**
 * Count documents in a table
 * This query should only be available in test environments
 */
export const countDocuments = query({
  args: { tableName: v.union(
    v.literal("visits"),
    v.literal("mailing_list_subscriptions"),
    v.literal("idea_swipes"),
    v.literal("ideas")
  ) },
  handler: async (ctx, args) => {
    if (!isTestOrDevEnv()) {
      throw new Error("This operation is only allowed in test or development environments");
    }
    const documents = await ctx.db.query(args.tableName).collect()
    return documents.length
  },
})

/**
 * Seed test data for visits and mailing_list_subscriptions
 * This mutation should only be available in test environments
 */
export const seedTestData = mutation({
  args: {},
  handler: async (ctx) => {
    if (!isTestOrDevEnv()) {
      throw new Error("This operation is only allowed in test or development environments");
    }
    
    // Seed all ideas
    await ctx.db.query("ideas").collect().then(async (ideas) => {
      if (ideas.length === 0) {
        const now = Date.now();
        // Insert all ideas with timestamps
        for (const idea of seedIdeas) {
          await ctx.db.insert("ideas", {
            ...idea,
            createdAt: now,
            updatedAt: now,
          });
        }
      }
    });

    // Seed visits
    await ctx.db.insert("visits", {
      path: "/test-path",
      userId: "test-user",
      metadata: { test: true },
      createdAt: Date.now(),
      updatedAt: Date.now(),
    });
    
    // Seed mailing list subscriptions
    await ctx.db.insert("mailing_list_subscriptions", {
      userId: "test-user",
      email: "test@example.com",
      name: "Test User",
      preferences: { marketing: true, updates: true },
      subscribedAt: Date.now(),
      unsubscribedAt: null,
      createdAt: Date.now(),
      updatedAt: Date.now(),
    });
    
    return { success: true };
  },
}); 

--- File: convex/tsconfig.json ---

{
  /* This TypeScript project config describes the environment that
   * Convex functions run in and is used to typecheck them.
   * You can modify it, but some settings required to use Convex.
   */
  "compilerOptions": {
    /* These settings are not required by Convex and can be modified. */
    "allowJs": true,
    "strict": true,
    "moduleResolution": "Bundler",
    "jsx": "react-jsx",
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,

    /* These compiler options are required by Convex */
    "target": "ESNext",
    "lib": ["ES2021", "dom"],
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "isolatedModules": true,
    "noEmit": true
  },
  "include": ["./**/*"],
  "exclude": ["./_generated"]
}


--- File: convex/utils.ts ---

import { v } from "convex/values";
import { MutationCtx, QueryCtx } from "./_generated/server";
import { Doc, Id } from "./_generated/dataModel";

// Type for successful responses
type SuccessResponse<T> = {
  success: true;
  data?: T;
  id?: Id<any>;
};

// Type for error responses
type ErrorResponse = {
  success: false;
  error: string;
};

// Combined response type
export type ConvexResponse<T = void> = SuccessResponse<T> | ErrorResponse;

// Helper to get current timestamp
export const getCurrentTimestamp = () => Date.now();

// Helper to create base fields for new documents
export const getBaseFields = () => ({
  createdAt: getCurrentTimestamp(),
  updatedAt: getCurrentTimestamp(),
});

// Helper to update timestamp
export const getUpdateFields = () => ({
  updatedAt: getCurrentTimestamp(),
});

// Helper for error handling
export const handleError = (error: unknown): ErrorResponse => ({
  success: false,
  error: error instanceof Error ? error.message : "Unknown error",
});

// Helper for success response
export const handleSuccess = <T>(data?: T, id?: Id<any>): SuccessResponse<T> => ({
  success: true,
  ...(data && { data }),
  ...(id && { id }),
});

// Validation helper
export const validateId = (id: Id<any>) => {
  if (!id) throw new Error("Invalid ID");
  return id;
};

// Query helper for pagination
export type PaginationOptions = {
  limit?: number;
  cursor?: string;
};

// Helper for handling pagination in queries
export const handlePagination = (
  ctx: QueryCtx,
  query: any,
  options?: PaginationOptions
) => {
  if (options?.limit) {
    query = query.take(options.limit);
  }
  if (options?.cursor) {
    query = query.continuePaginationFrom(options.cursor);
  }
  return query;
}; 

--- File: convex/visits.ts ---

import { v } from "convex/values";
import { mutation, query } from "./_generated/server";
import { Doc, Id } from "./_generated/dataModel";

// Schema is defined in schema.ts
export type Visit = {
  path: string;
  userId: string | null;
  metadata: Record<string, any>;
  createdAt: number;
  updatedAt: number;
};

export const recordVisit = mutation({
  args: {
    path: v.string(),
    userId: v.union(v.string(), v.null()),
    metadata: v.any(),
  },
  handler: async (ctx, args) => {
    const now = Date.now();
    return await ctx.db.insert("visits", {
      path: args.path,
      userId: args.userId,
      metadata: args.metadata,
      createdAt: now,
      updatedAt: now,
    });
  },
});

export const getVisits = query({
  args: {
    userId: v.optional(v.union(v.string(), v.null())),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const query = args.userId !== undefined
      ? await ctx.db
          .query("visits")
          .withIndex("by_user", (q) => q.eq("userId", args.userId as string | null))
          .collect()
      : await ctx.db
          .query("visits")
          .withIndex("by_created")
          .collect();

    return args.limit !== undefined ? query.slice(0, args.limit) : query;
  },
});

export const getVisitsByPath = query({
  args: {
    path: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const results = await ctx.db
      .query("visits")
      .withIndex("by_path", (q) => q.eq("path", args.path))
      .collect();

    return args.limit !== undefined ? results.slice(0, args.limit) : results;
  },
});

export const deleteVisit = mutation({
  args: { id: v.id("visits") },
  handler: async (ctx, args) => {
    await ctx.db.delete(args.id);
  },
}); 

--- File: data/generated-ideas.json ---

[
  {
    "name": "RemoteReward",
    "description": "Remote team recognition and rewards management platform.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/remotereward"
  },
  {
    "name": "WarmupWise",
    "description": "Dynamic warm-up generator based on planned workout and mobility needs.",
    "imageUrl": "https://images.unsplash.com/photo-1517838277536-f5f99be501cd?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/warmupwise"
  },
  {
    "name": "QuestCraft",
    "description": "Procedurally generated RPG with community-created quests and storylines.",
    "imageUrl": "https://images.unsplash.com/photo-1538481199705-c710c4e965fc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/questcraft"
  },
  {
    "name": "MindMaze",
    "description": "Psychological puzzle game where player emotions influence the game world, with dynamic storytelling and multiple endings.",
    "imageUrl": "https://images.unsplash.com/photo-1550745165-9bc0b252726f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindmaze"
  },
  {
    "name": "HIIT Helper",
    "description": "Interval training app with customizable work/rest ratios and voice guidance.",
    "imageUrl": "https://images.unsplash.com/photo-1517963879433-6ad2b056d712?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/hiithelper"
  },
  {
    "name": "RelationshipReset",
    "description": "App focusing on mental health in relationships, offering communication tools, conflict resolution strategies, and couples therapy exercises.",
    "imageUrl": "https://images.unsplash.com/photo-1516589178581-6cd7833ae3b2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/relationshipreset"
  },
  {
    "name": "PetCommunity",
    "description": "Local pet owner community and resource sharing platform.",
    "imageUrl": "https://images.unsplash.com/photo-1548767797-d8c844163c4c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petcommunity"
  },
  {
    "name": "FormFix",
    "description": "Exercise form analysis using computer vision with real-time feedback.",
    "imageUrl": "https://images.unsplash.com/photo-1534438327276-14e5300c3a48?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/formfix"
  },
  {
    "name": "ClimateCanvas",
    "description": "Visual weather art platform that transforms weather data into beautiful, interactive visualizations and soundscapes.",
    "imageUrl": "https://images.unsplash.com/photo-1514475735-fcd1e811aa9c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/climatecanvas"
  },
  {
    "name": "SkyRacer",
    "description": "Multiplayer drone racing game with custom track creation tools.",
    "imageUrl": "https://images.unsplash.com/photo-1506947411487-a56738267384?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/skyracer"
  },
  {
    "name": "SafeSpace",
    "description": "Anonymous support network for mental health with trained volunteer counselors.",
    "imageUrl": "https://images.unsplash.com/photo-1573497019940-1c28c88b4f3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/safespace"
  },
  {
    "name": "StressLess",
    "description": "Real-time stress monitoring using biometric data with guided stress relief exercises.",
    "imageUrl": "https://images.unsplash.com/photo-1506126613408-eca07ce68773?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/stressless"
  },
  {
    "name": "AirAngel",
    "description": "Indoor air quality monitoring and purification system with allergen alerts.",
    "imageUrl": "https://images.unsplash.com/photo-1495476479092-6ece1898a101?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/airangel"
  },
  {
    "name": "FlexFinder",
    "description": "Mobility assessment and personalized stretching routine generator.",
    "imageUrl": "https://images.unsplash.com/photo-1518611012118-696072aa579a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/flexfinder"
  },
  {
    "name": "ConceptCraft",
    "description": "Visual knowledge organization tool that helps users create interactive concept maps with multimedia integration and real-time collaboration.",
    "imageUrl": "https://images.unsplash.com/photo-1516321165247-4aa89a48be28?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/conceptcraft"
  },
  {
    "name": "KidsCash",
    "description": "Financial literacy app for children with chore tracking and rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1472849676747-dbc0ee93f6a7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/kidscash"
  },
  {
    "name": "ColorCraft",
    "description": "Color palette generator with mood-based suggestions and accessibility checks.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/colorcraft"
  },
  {
    "name": "GoalGlider",
    "description": "Set, track, and celebrate your goals with a smooth, animated interface.",
    "imageUrl": "https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/goalglider"
  },
  {
    "name": "AudioAssist",
    "description": "Real-time audio transcription and translation platform.",
    "imageUrl": "https://images.unsplash.com/photo-1590602847861-f357a9332bbc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/audioassist"
  },
  {
    "name": "ThoughtThread",
    "description": "Collaborative knowledge base that tracks idea evolution over time, with version control for thoughts and automatic connection suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1456324504439-367cee3b3c32?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/thoughtthread"
  },
  {
    "name": "MemeMetrics",
    "description": "Analytics platform tracking meme performance across social platforms with engagement prediction and optimization suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1531259683007-016a7b628fc3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mememetrics"
  },
  {
    "name": "DataDetective",
    "description": "Anomaly detection and root cause analysis platform.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/datadetective"
  },
  {
    "name": "LocalLens",
    "description": "Augmented reality city guide with historical information and hidden gems.",
    "imageUrl": "https://images.unsplash.com/photo-1480714378408-67cf0d13bc1b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/locallens"
  },
  {
    "name": "CityRival",
    "description": "Competitive city-building game with resource trading and alliances.",
    "imageUrl": "https://images.unsplash.com/photo-1480714378408-67cf0d13bc1b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/cityrival"
  },
  {
    "name": "QuestLog",
    "description": "Campaign journal with AI-powered story summarization, player achievement tracking, and interactive timeline creation.",
    "imageUrl": "https://images.unsplash.com/photo-1518791841217-8f162f1e1131?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/questlog"
  },
  {
    "name": "VocabVault",
    "description": "Personalized vocabulary builder that extracts unfamiliar words from your reading, creating custom learning paths and contextual memory aids.",
    "imageUrl": "https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/vocabvault"
  },
  {
    "name": "VirtualVenue",
    "description": "Immersive virtual office space with customizable environments.",
    "imageUrl": "https://images.unsplash.com/photo-1516387938699-a93567ec168e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/virtualvenue"
  },
  {
    "name": "GenreGenius",
    "description": "ML-powered book discovery engine that creates ultra-specific micro-genres based on your reading preferences and emotional responses.",
    "imageUrl": "https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/genregenius"
  },
  {
    "name": "HabitHive",
    "description": "Community-driven habit formation platform where users join themed 'hives' for group accountability and shared progress tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1493612276216-ee3925520721?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/habithive"
  },
  {
    "name": "StorySpeaker",
    "description": "Children's story app that brings books to life with expressive voice synthesis, character voices, and interactive sound effects.",
    "imageUrl": "https://images.unsplash.com/photo-1519389950473-47ba0277781c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storyspeaker"
  },
  {
    "name": "AvatarForge",
    "description": "Web-based 3D avatar creator with real-time customization, animation, and export for games, VR, and social platforms.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/avatarforge"
  },
  {
    "name": "SoundSense",
    "description": "Voice-controlled smart home orchestrator with natural conversation flow and predictive automation based on voice patterns.",
    "imageUrl": "https://images.unsplash.com/photo-1516321165247-4aa89a48be28?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundsense"
  },
  {
    "name": "VizFlow",
    "description": "Real-time data streaming visualization with customizable dashboards.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/vizflow"
  },
  {
    "name": "FurFit",
    "description": "Pet exercise and activity tracking with personalized recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1548767797-d8c844163c4c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/furfit"
  },
  {
    "name": "MindMap Master",
    "description": "Collaborative mind mapping tool with AI-powered concept suggestions and learning paths.",
    "imageUrl": "https://images.unsplash.com/photo-1503676382389-4809596d5290?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindmapmaster"
  },
  {
    "name": "StormSense",
    "description": "Advanced storm tracking and prediction app with AR visualization of weather patterns and personalized safety recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/stormsense"
  },
  {
    "name": "RuleSmith",
    "description": "Interactive rulebook creation tool with AI-powered clarity checking, translation support, and video tutorial generation.",
    "imageUrl": "https://images.unsplash.com/photo-1611996575749-79a3a250f948?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/rulesmith"
  },
  {
    "name": "LiteracyLink",
    "description": "App connecting volunteer tutors with adult literacy learners.",
    "imageUrl": "https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/literacylink"
  },
  {
    "name": "DebtDefender",
    "description": "Debt reduction planner with strategy optimization and progress tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1579621970795-87facc2f976d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/debtdefender"
  },
  {
    "name": "MixMaster",
    "description": "AI-assisted music mixing and mastering platform for producers.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mixmaster"
  },
  {
    "name": "MeetMinder",
    "description": "Smart meeting scheduling and optimization platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516387938699-a93567ec168e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/meetminder"
  },
  {
    "name": "NoiseNinja",
    "description": "Intelligent noise reduction and audio cleanup tool.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/noiseninja"
  },
  {
    "name": "SkillSwap",
    "description": "Community skill exchange platform with time banking system.",
    "imageUrl": "https://images.unsplash.com/photo-1521737604893-d14cc237f11d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/skillswap"
  },
  {
    "name": "ComicCraft",
    "description": "Digital comic creation tool with AI-assisted storytelling and artwork.",
    "imageUrl": "https://images.unsplash.com/photo-1588497859490-85d1c17db96d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/comiccraft"
  },
  {
    "name": "GrowthGuide",
    "description": "Personal development coach with AI-powered feedback and recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/growthguide"
  },
  {
    "name": "MathMentor",
    "description": "Step-by-step math problem solving with AI guidance and visual explanations.",
    "imageUrl": "https://images.unsplash.com/photo-1509228468518-180dd4864904?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mathmentor"
  },
  {
    "name": "PetPlay",
    "description": "Pet socialization and playdate coordination platform.",
    "imageUrl": "https://images.unsplash.com/photo-1548767797-d8c844163c4c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petplay"
  },
  {
    "name": "MeepleMatch",
    "description": "Community platform connecting board game designers with artists, manufacturers, and publishers using AI matchmaking.",
    "imageUrl": "https://images.unsplash.com/photo-1611996575749-79a3a250f948?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/meeplematch"
  },
  {
    "name": "ComicConnect",
    "description": "Networking platform connecting comedians, venues, and audiences with smart matching and booking features.",
    "imageUrl": "https://images.unsplash.com/photo-1543833175-43a3ef3f3eb6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/comicconnect"
  },
  {
    "name": "GymGenius",
    "description": "Smart workout planner with equipment availability and gym crowd tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1534367507873-d2d7e24c797f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gymgenius"
  },
  {
    "name": "ZenWriter",
    "description": "A minimalist writing app with ambient sounds and focus modes to help you get into the writing zone.",
    "imageUrl": "https://images.unsplash.com/photo-1464983953574-0892a716854b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/zenwriter"
  },
  {
    "name": "OceanMetrics",
    "description": "Ocean health monitoring platform tracking temperature changes, acidification, and marine ecosystem impacts with 3D visualization.",
    "imageUrl": "https://images.unsplash.com/photo-1464822759023-fed622ff2c3b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/oceanmetrics"
  },
  {
    "name": "FanFocus",
    "description": "Personalized sports news and highlights based on favorite teams and players.",
    "imageUrl": "https://images.unsplash.com/photo-1495563125611-fa99f0cd529f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/fanfocus"
  },
  {
    "name": "CorrelateCloud",
    "description": "Correlation analysis and pattern discovery platform.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/correlatecloud"
  },
  {
    "name": "FoodieFinds",
    "description": "Local food discovery app with culinary tours and cooking classes.",
    "imageUrl": "https://images.unsplash.com/photo-1466637574441-749b8f19452f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/foodiefinds"
  },
  {
    "name": "SpeechSmith",
    "description": "AI-powered text-to-speech platform with customizable voices, accents, and emotional tones for content creators and accessibility.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/speechsmith"
  },
  {
    "name": "PetPlayAR",
    "description": "AR filters designed for pets, adding fun hats, glasses, and interactive toys to your furry friends in photos and videos.",
    "imageUrl": "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petplayar"
  },
  {
    "name": "BioBalance",
    "description": "Monitor and optimize your body's vital signs with wearable device integration.",
    "imageUrl": "https://images.unsplash.com/photo-1559757175-7b21e7e40d11?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/biobalance"
  },
  {
    "name": "RiskRadar",
    "description": "Risk analysis and mitigation recommendation platform.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/riskradar"
  },
  {
    "name": "MemoryVault",
    "description": "Secure digital archive for family artifacts and documents with AI-powered image enhancement and automatic metadata extraction.",
    "imageUrl": "https://images.unsplash.com/photo-1503516459261-40c66117780a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/memoryvault"
  },
  {
    "name": "MarketMatch",
    "description": "Smart marketplace that matches local food producers with wholesale buyers using ML to optimize pricing and reduce food waste.",
    "imageUrl": "https://images.unsplash.com/photo-1488459716781-31db52582fe9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/marketmatch"
  },
  {
    "name": "MindfulMoves",
    "description": "Gentle movement and mindfulness app combining tai chi, yoga, and meditation with motion tracking feedback.",
    "imageUrl": "https://images.unsplash.com/photo-1544367567-0f2fcb009e0b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindfulmoves"
  },
  {
    "name": "MemoryMaster",
    "description": "Memory improvement techniques and exercises based on cognitive science.",
    "imageUrl": "https://images.unsplash.com/photo-1513258496099-48168024aec0?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/memorymaster"
  },
  {
    "name": "FoodShare",
    "description": "App for restaurants and stores to donate surplus food to local shelters and food banks.",
    "imageUrl": "https://images.unsplash.com/photo-1488459716781-31db52582fe9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/foodshare"
  },
  {
    "name": "ForecastFlow",
    "description": "Advanced forecasting platform with multiple prediction models.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/forecastflow"
  },
  {
    "name": "FlexFuel",
    "description": "Workout nutrition timing and macro tracking with meal suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1498837167922-ddd27525d352?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/flexfuel"
  },
  {
    "name": "ThoughtTracker",
    "description": "Cognitive behavioral therapy tool that helps users identify and challenge negative thought patterns with interactive exercises and progress tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1489533119213-66a5cd877091?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/thoughttracker"
  },
  {
    "name": "MoodMingle",
    "description": "Emotion-based social network connecting people through shared feelings and experiences.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/moodmingle"
  },
  {
    "name": "CaptionCraft",
    "description": "ML-powered caption generation tool that adapts to different meme formats and cultural contexts.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/captioncraft"
  },
  {
    "name": "VoiceValet",
    "description": "Advanced voice control system with natural language processing for home automation.",
    "imageUrl": "https://images.unsplash.com/photo-1558449028-b53a39d100fc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/voicevalet"
  },
  {
    "name": "CodeQuest",
    "description": "Gamified programming learning platform with real-world project challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/codequest"
  },
  {
    "name": "CodeCrafter",
    "description": "Code generation tool with customizable templates and patterns.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/codecrafter"
  },
  {
    "name": "LightLogic",
    "description": "Intelligent lighting system with mood-based scenes and circadian rhythm support.",
    "imageUrl": "https://images.unsplash.com/photo-1513506003901-1e6a229e2d15?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/lightlogic"
  },
  {
    "name": "StrengthSync",
    "description": "Progressive overload tracking with AI form analysis and correction.",
    "imageUrl": "https://images.unsplash.com/photo-1534438327276-14e5300c3a48?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/strengthsync"
  },
  {
    "name": "WellnessWeb",
    "description": "Social platform focused on health and wellness support.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/wellnessweb"
  },
  {
    "name": "GamersGrid",
    "description": "Social network for gamers with team formation and tournament organization.",
    "imageUrl": "https://images.unsplash.com/photo-1522098635833-216c03d81fbe?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gamersgrid"
  },
  {
    "name": "RhythmRealm",
    "description": "Music-based RPG where combat and exploration are rhythm-driven, with procedurally generated music landscapes.",
    "imageUrl": "https://images.unsplash.com/photo-1550745165-9bc0b252726f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/rhythmrealm"
  },
  {
    "name": "TeamTempo",
    "description": "Rhythm-based party game that synchronizes players' movements using smartphone sensors for collaborative dance and music challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1529156069898-49953e39b3ac?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/teamtempo"
  },
  {
    "name": "DataDive",
    "description": "Deep data exploration and analysis platform with drill-down capabilities.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/datadive"
  },
  {
    "name": "FoodPrint",
    "description": "Food sustainability tracker with environmental impact scoring.",
    "imageUrl": "https://images.unsplash.com/photo-1495195134817-aeb325a55b65?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/foodprint"
  },
  {
    "name": "LyricLab",
    "description": "Songwriting collaboration tool with version control and co-writing features.",
    "imageUrl": "https://images.unsplash.com/photo-1514320291840-2e0a9bf2a9ae?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/lyriclab"
  },
  {
    "name": "SmartScale",
    "description": "Recipe scaling tool with ingredient measurement conversion and substitutions.",
    "imageUrl": "https://images.unsplash.com/photo-1517433670267-08bbd4be890f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/smartscale"
  },
  {
    "name": "StoryForge",
    "description": "Interactive storytelling platform with branching narratives and collaboration.",
    "imageUrl": "https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storyforge"
  },
  {
    "name": "SportSwap",
    "description": "Sports equipment sharing and rental marketplace for local communities.",
    "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sportswap"
  },
  {
    "name": "EmojiTranslate",
    "description": "Real-time translation tool that converts messages between different languages while preserving emotional context through smart emoji mapping.",
    "imageUrl": "https://images.unsplash.com/photo-1633613286991-611fe299c4be?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/emojitranslate"
  },
  {
    "name": "MindfulMoments",
    "description": "Micro-meditation app designed for busy professionals, offering 1-3 minute mindfulness exercises triggered by calendar events.",
    "imageUrl": "https://images.unsplash.com/photo-1474418397713-7ede21d49118?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindfulmoments"
  },
  {
    "name": "SeasonalSync",
    "description": "Platform connecting seasonal harvest schedules with meal planning and local restaurant menus, reducing food waste and supporting local agriculture.",
    "imageUrl": "https://images.unsplash.com/photo-1470119693884-47d3a1d1f180?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/seasonalsync"
  },
  {
    "name": "EmotionEvo",
    "description": "Emotional intelligence development platform with guided exercises.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/emotionevo"
  },
  {
    "name": "CostCrunch",
    "description": "Cost analysis and optimization recommendation platform.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/costcrunch"
  },
  {
    "name": "SoundScape",
    "description": "Location-based audio experience platform for immersive storytelling walks.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundscape"
  },
  {
    "name": "CareConnect",
    "description": "Community support network for elderly and vulnerable residents.",
    "imageUrl": "https://images.unsplash.com/photo-1517048676732-d65bc937f952?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/careconnect"
  },
  {
    "name": "FridgeFriend",
    "description": "Smart refrigerator inventory management with expiration tracking and recipe suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1495195134817-aeb325a55b65?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/fridgefriend"
  },
  {
    "name": "EventEase",
    "description": "Community event planning and coordination platform.",
    "imageUrl": "https://images.unsplash.com/photo-1559027615-cd4628902d4a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/eventease"
  },
  {
    "name": "MakerSpace",
    "description": "Resource sharing platform for makers to find and book local workshop spaces, tools, and collaborate on projects with other craftspeople.",
    "imageUrl": "https://images.unsplash.com/photo-1452802447250-470a88ac82bc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/makerspace"
  },
  {
    "name": "FocusFlow",
    "description": "Productivity optimization tool with personalized work-life balance strategies.",
    "imageUrl": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/focusflow"
  },
  {
    "name": "WanderWise",
    "description": "AI travel planner with personalized itineraries and local experiences.",
    "imageUrl": "https://images.unsplash.com/photo-1469854523086-cc02fe5d8800?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/wanderwise"
  },
  {
    "name": "ArtAlive",
    "description": "AR app that brings artwork to life with animated stories and interactions.",
    "imageUrl": "https://images.unsplash.com/photo-1460661419201-fd4cecdf8a8b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artalive"
  },
  {
    "name": "LearnLoop",
    "description": "Continuous learning platform with progress tracking and rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/learnloop"
  },
  {
    "name": "PetInsight",
    "description": "Pet behavior analysis and wellness tracking platform.",
    "imageUrl": "https://images.unsplash.com/photo-1548767797-d8c844163c4c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petinsight"
  },
  {
    "name": "AuthorAI",
    "description": "Writing analysis tool that compares your writing style with famous authors and suggests techniques to enhance your storytelling.",
    "imageUrl": "https://images.unsplash.com/photo-1474932430478-367dbb6832c1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/authorai"
  },
  {
    "name": "EcoConnect",
    "description": "Social platform for environmentally conscious individuals and initiatives.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecoconnect"
  },
  {
    "name": "SegmentSage",
    "description": "Customer segmentation and behavior analysis platform.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/segmentsage"
  },
  {
    "name": "TimeTransform",
    "description": "Time management and productivity optimization platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/timetransform"
  },
  {
    "name": "LoreKeeper",
    "description": "Campaign wiki system with AI-assisted organization, relationship mapping, and automatic update suggestions based on session notes.",
    "imageUrl": "https://images.unsplash.com/photo-1518791841217-8f162f1e1131?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/lorekeeper"
  },
  {
    "name": "WasteWatch",
    "description": "Smart waste management system with fill-level monitoring and collection scheduling.",
    "imageUrl": "https://images.unsplash.com/photo-1532996122724-e3c354a0b15b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/wastewatch"
  },
  {
    "name": "StudioSync",
    "description": "Music studio management platform with booking and client tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/studiosync"
  },
  {
    "name": "WeatherWell",
    "description": "Health-focused weather app that correlates weather conditions with personal well-being and provides adaptive health recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1514475735-fcd1e811aa9c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/weatherwell"
  },
  {
    "name": "WebFlow",
    "description": "Visual website builder with responsive design and animation tools.",
    "imageUrl": "https://images.unsplash.com/photo-1517697471339-4aa32003c11a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/webflow"
  },
  {
    "name": "MotionMuse",
    "description": "Digital art animation tool that helps artists create fluid motion graphics and interactive artwork with ease.",
    "imageUrl": "https://images.unsplash.com/photo-1518998053901-5348d3961a04?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/motionmuse"
  },
  {
    "name": "MarketMeeple",
    "description": "Market analysis tool using AI to predict board game trends, target audiences, and optimal pricing strategies.",
    "imageUrl": "https://images.unsplash.com/photo-1611996575749-79a3a250f948?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/marketmeeple"
  },
  {
    "name": "VoicePrint",
    "description": "Voice biometric security system for app authentication and secure transactions using unique voice signatures and liveness detection.",
    "imageUrl": "https://images.unsplash.com/photo-1519558260268-cde7e03a0152?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/voiceprint"
  },
  {
    "name": "DanceOff",
    "description": "Social dance challenge platform with AR filters and choreography tutorials.",
    "imageUrl": "https://images.unsplash.com/photo-1545128485-c400e7702796?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/danceoff"
  },
  {
    "name": "ColorCraft",
    "description": "AI-powered coloring assistant that suggests color palettes, maintains consistency, and automates shading based on light sources.",
    "imageUrl": "https://images.unsplash.com/photo-1612036782180-6f0822045d23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/colorcraft"
  },
  {
    "name": "WelcomeWagon",
    "description": "Community platform for welcoming and integrating new residents.",
    "imageUrl": "https://images.unsplash.com/photo-1559027615-cd4628902d4a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/welcomewagon"
  },
  {
    "name": "LeagueLink",
    "description": "Amateur sports league management and scheduling platform.",
    "imageUrl": "https://images.unsplash.com/photo-1577471721003-13ab5e422b7d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/leaguelink"
  },
  {
    "name": "TextureTool",
    "description": "Texture creation and manipulation tool for 3D artists.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/texturetool"
  },
  {
    "name": "DressCode",
    "description": "App exploring traditional clothing and fashion across cultures, with AR try-on features and historical context for cultural attire.",
    "imageUrl": "https://images.unsplash.com/photo-1509631179647-0177331693ae?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/dresscode"
  },
  {
    "name": "ViralVault",
    "description": "Searchable database of meme templates with AI-powered categorization and context understanding.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/viralvault"
  },
  {
    "name": "ResearchRover",
    "description": "Academic research assistant with citation management and paper summaries.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/researchrover"
  },
  {
    "name": "OddityQuest",
    "description": "Location-based AR game that reveals weird historical facts and trivia about your surroundings as you explore.",
    "imageUrl": "https://images.unsplash.com/photo-1516321497487-e288fb19713f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/oddityquest"
  },
  {
    "name": "MapMage",
    "description": "Interactive map creation tool with fog of war management, dynamic weather effects, and location-based event triggers.",
    "imageUrl": "https://images.unsplash.com/photo-1614682835402-c2394a7d1b3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mapmage"
  },
  {
    "name": "FitFlow",
    "description": "AI personal trainer that adapts workouts in real-time based on performance and recovery.",
    "imageUrl": "https://images.unsplash.com/photo-1517836357463-d25dfeac3438?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/fitflow"
  },
  {
    "name": "HeritageHub",
    "description": "AI-powered genealogy platform that combines DNA matching, historical records, and social networking to build comprehensive family trees.",
    "imageUrl": "https://images.unsplash.com/photo-1503516459261-40c66117780a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/heritagehub"
  },
  {
    "name": "GardenGuru",
    "description": "Virtual gardening coach using AR to visualize optimal plant placement and provide seasonal care guidance based on local climate data.",
    "imageUrl": "https://images.unsplash.com/photo-1462530260150-24a3e73dd6e6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gardenguru"
  },
  {
    "name": "ViralVision",
    "description": "Computer vision tool for analyzing and recreating successful meme formats with style transfer capabilities.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/viralvision"
  },
  {
    "name": "SkillSprint",
    "description": "Microlearning platform that breaks down complex skills into 5-minute daily lessons.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/skillsprint"
  },
  {
    "name": "ArchAngel",
    "description": "Architecture visualization and documentation automation tool.",
    "imageUrl": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/archangel"
  },
  {
    "name": "PetPassport",
    "description": "Digital pet records and document management system.",
    "imageUrl": "https://images.unsplash.com/photo-1548767797-d8c844163c4c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petpassport"
  },
  {
    "name": "CompostConnect",
    "description": "Urban composting network app linking food waste producers with community gardens and composting facilities.",
    "imageUrl": "https://images.unsplash.com/photo-1516253593875-bd7ba052fbc5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/compostconnect"
  },
  {
    "name": "ChefConnect",
    "description": "Live cooking class platform with interactive guidance and ingredient prep.",
    "imageUrl": "https://images.unsplash.com/photo-1556910103-1c02745aae4d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/chefconnect"
  },
  {
    "name": "CircadianSync",
    "description": "Optimize your daily routine based on your natural circadian rhythm and energy levels.",
    "imageUrl": "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/circadiansync"
  },
  {
    "name": "BreatheBuddy",
    "description": "Guided breathing exercises with calming animations and customizable breathing patterns.",
    "imageUrl": "https://images.unsplash.com/photo-1506126613408-eca07ce68773?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/breathebuddy"
  },
  {
    "name": "ZenZone",
    "description": "Adaptive meditation app that adjusts sessions based on real-time stress levels using biometric data, with immersive 3D audio environments.",
    "imageUrl": "https://images.unsplash.com/photo-1518199266791-5375a83190b7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/zenzone"
  },
  {
    "name": "DepTracker",
    "description": "Dependency management and update automation platform.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/deptracker"
  },
  {
    "name": "EventCast",
    "description": "Interactive event platform for hosting webinars, Q&A sessions, and live polls with ultra-low latency streaming via WebRTC.",
    "imageUrl": "https://images.unsplash.com/photo-1519389950473-47ba0277781c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/eventcast"
  },
  {
    "name": "WisdomWell",
    "description": "Knowledge sharing platform with mentorship and peer learning.",
    "imageUrl": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/wisdomwell"
  },
  {
    "name": "UrbanFarm",
    "description": "Urban agriculture planning and community garden management tool.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/urbanfarm"
  },
  {
    "name": "PartyPulse",
    "description": "Real-time party game platform with multiplayer mini-games and challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1492684223066-81342ee5ff30?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/partypulse"
  },
  {
    "name": "TapMap",
    "description": "Real-time inventory tracking system for craft breweries with predictive analytics for demand forecasting and distribution optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1505075106905-fb052892c116?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/tapmap"
  },
  {
    "name": "PlantShare",
    "description": "Social platform for plant enthusiasts to trade cuttings, share care tips, and get expert advice using AI-powered plant identification.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/plantshare"
  },
  {
    "name": "GearShare",
    "description": "P2P camera equipment rental marketplace with smart insurance, verification system, and AR tutorials for borrowed gear.",
    "imageUrl": "https://images.unsplash.com/photo-1500634245200-e5245c7574ef?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gearshare"
  },
  {
    "name": "PawPal",
    "description": "AI-powered pet health monitoring and care recommendations platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pawpal"
  },
  {
    "name": "MoodMoji",
    "description": "Personalized emoji creation platform using facial recognition to generate custom emojis that match your expressions and emotions.",
    "imageUrl": "https://images.unsplash.com/photo-1633613286848-e6f43bbafb8d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/moodmoji"
  },
  {
    "name": "TaskTide",
    "description": "A to-do app that visualizes your daily tasks as waves, encouraging you to ride the productivity tide.",
    "imageUrl": "https://images.unsplash.com/photo-1507525428034-b723cf961d3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/tasktide"
  },
  {
    "name": "StoryScribe",
    "description": "Voice-powered family history recording app that helps capture and preserve oral histories with automatic transcription and tagging.",
    "imageUrl": "https://images.unsplash.com/photo-1503516459261-40c66117780a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storyscribe"
  },
  {
    "name": "SpaceFleet",
    "description": "Tactical space combat game with ship customization and fleet management.",
    "imageUrl": "https://images.unsplash.com/photo-1446776811953-b23d57bd21aa?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/spacefleet"
  },
  {
    "name": "DialogDuo",
    "description": "Conversational AI that generates realistic multi-voice dialogues from scripts or stories, ideal for games, education, and entertainment.",
    "imageUrl": "https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/dialogduo"
  },
  {
    "name": "ResearchRealm",
    "description": "Academic knowledge management system with citation tracking, research paper organization, and collaborative annotation features.",
    "imageUrl": "https://images.unsplash.com/photo-1456324504439-367cee3b3c32?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/researchrealm"
  },
  {
    "name": "StreamSync",
    "description": "A real-time group video platform with synchronized media playback, collaborative drawing, and instant file sharing using WebRTC.",
    "imageUrl": "https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/streamsync"
  },
  {
    "name": "ShareCycle",
    "description": "Community item sharing and lending platform to reduce consumption.",
    "imageUrl": "https://images.unsplash.com/photo-1523741543316-beb7fc7023d8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sharecycle"
  },
  {
    "name": "VizWizard",
    "description": "Guided data visualization creation with best practice recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/vizwizard"
  },
  {
    "name": "WaterWatch",
    "description": "Water usage tracking app with conservation tips and leak detection.",
    "imageUrl": "https://images.unsplash.com/photo-1468421870903-4df1664ac249?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/waterwatch"
  },
  {
    "name": "BandBudget",
    "description": "Financial management tool for touring musicians and bands.",
    "imageUrl": "https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bandbudget"
  },
  {
    "name": "CivicCircle",
    "description": "Community civic engagement and local government interaction platform.",
    "imageUrl": "https://images.unsplash.com/photo-1517048676732-d65bc937f952?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/civiccircle"
  },
  {
    "name": "BlindsBot",
    "description": "Automated blind control system with sunlight and temperature optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1513506003901-1e6a229e2d15?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/blindsbot"
  },
  {
    "name": "ComicConnect",
    "description": "Social platform for comic creators and fans with AI-powered collaboration matching and project management tools.",
    "imageUrl": "https://images.unsplash.com/photo-1612036782180-6f0822045d23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/comicconnect"
  },
  {
    "name": "NutritionNet",
    "description": "Sports nutrition planning and tracking system for teams and athletes.",
    "imageUrl": "https://images.unsplash.com/photo-1498837167922-ddd27525d352?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/nutritionnet"
  },
  {
    "name": "GreenBuild",
    "description": "Sustainable building materials marketplace and project planning tool.",
    "imageUrl": "https://images.unsplash.com/photo-1503387762-592deb58ef4e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/greenbuild"
  },
  {
    "name": "SocialSense",
    "description": "Social media analytics and trend analysis platform.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/socialsense"
  },
  {
    "name": "VoiceVault",
    "description": "Voice sample management system with tagging and organization.",
    "imageUrl": "https://images.unsplash.com/photo-1516450360452-9312f5e86fc7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/voicevault"
  },
  {
    "name": "3DDataViz",
    "description": "A toolkit for building interactive 3D data visualizations in the browser, supporting geospatial, scientific, and business datasets.",
    "imageUrl": "https://images.unsplash.com/photo-1464983953574-0892a716854b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/3ddataviz"
  },
  {
    "name": "RemoteRhythm",
    "description": "AI-powered workday optimization and team synchronization platform.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/remoterhythm"
  },
  {
    "name": "MemeStream",
    "description": "Curated meme feed with personalized recommendations and collaborative creation features.",
    "imageUrl": "https://images.unsplash.com/photo-1531259683007-016a7b628fc3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/memestream"
  },
  {
    "name": "GroupGroove",
    "description": "Group fitness class finder and booking with social features.",
    "imageUrl": "https://images.unsplash.com/photo-1518310383802-640c2de311b2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/groupgroove"
  },
  {
    "name": "SoloSync",
    "description": "Solo traveler community with meetups and safety check-in features.",
    "imageUrl": "https://images.unsplash.com/photo-1501555088652-021faa106b9b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/solosync"
  },
  {
    "name": "HarvestHub",
    "description": "Urban farming marketplace connecting local growers with consumers, featuring crop scheduling and surplus exchange system.",
    "imageUrl": "https://images.unsplash.com/photo-1464226184884-fa280b87c399?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/harvesthub"
  },
  {
    "name": "BehaviorBloom",
    "description": "Visual habit growth system where habits are represented as plants that evolve based on consistency, with social gardening features for accountability.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/behaviorbloom"
  },
  {
    "name": "RoutineRider",
    "description": "Gamified habit tracking app that turns your daily routines into an adventure game, with quests, character development, and real-world achievements.",
    "imageUrl": "https://images.unsplash.com/photo-1493612276216-ee3925520721?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/routinerider"
  },
  {
    "name": "SportSpot",
    "description": "Community sports and recreation organization platform.",
    "imageUrl": "https://images.unsplash.com/photo-1517048676732-d65bc937f952?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sportspot"
  },
  {
    "name": "GitGuardian",
    "description": "Git workflow automation with security scanning and best practices.",
    "imageUrl": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gitguardian"
  },
  {
    "name": "SustainableStyle",
    "description": "Ethical fashion marketplace with garment history tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1490481651871-ab68de25d43d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sustainablestyle"
  },
  {
    "name": "ChordCrafter",
    "description": "Interactive tool for generating chord progressions and melodies on the fly, with AI suggestions and export options for DAWs.",
    "imageUrl": "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/chordcrafter"
  },
  {
    "name": "HarvestTrack",
    "description": "Blockchain-based food traceability system allowing consumers to scan QR codes and see their food's complete journey from farm to table.",
    "imageUrl": "https://images.unsplash.com/photo-1550989460-0adf9ea622e2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/harvesttrack"
  },
  {
    "name": "PetPal",
    "description": "Smart pet care system with automated feeding and activity monitoring.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petpal"
  },
  {
    "name": "RoadRider",
    "description": "Road trip planner with scenic routes and local attraction discovery.",
    "imageUrl": "https://images.unsplash.com/photo-1469854523086-cc02fe5d8800?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/roadrider"
  },
  {
    "name": "WalkWise",
    "description": "Dog walking route planning and tracking platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/walkwise"
  },
  {
    "name": "InsureInsight",
    "description": "Insurance comparison and optimization platform with coverage analysis.",
    "imageUrl": "https://images.unsplash.com/photo-1450101499163-c8848c66ca85?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/insureinsight"
  },
  {
    "name": "ARWebLab",
    "description": "Augmented reality toolkit for building and sharing WebGL-powered AR experiences directly in the browser, with marker and markerless tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/arweblab"
  },
  {
    "name": "GratitudeGlow",
    "description": "Daily gratitude journal with mood tracking and positive affirmation reminders.",
    "imageUrl": "https://images.unsplash.com/photo-1506126613408-eca07ce68773?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gratitudeglow"
  },
  {
    "name": "NatureNurture",
    "description": "Encourage outdoor time with nature activity suggestions and environmental wellness tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/naturenurture"
  },
  {
    "name": "NightNarrative",
    "description": "Sleep storytelling app that creates personalized bedtime stories based on your interests and optimal sleep duration.",
    "imageUrl": "https://images.unsplash.com/photo-1465929639680-64ee080eb3ed?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/nightnarrative"
  },
  {
    "name": "FairTrade",
    "description": "Marketplace connecting ethical producers directly with conscious consumers.",
    "imageUrl": "https://images.unsplash.com/photo-1472851294608-062f824d29cc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/fairtrade"
  },
  {
    "name": "TriviaTribes",
    "description": "Team-based trivia competition platform with themed knowledge battles.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/triviatribes"
  },
  {
    "name": "MusicMaster",
    "description": "Adaptive soundtrack manager that adjusts music and ambient sounds based on campaign events and player actions.",
    "imageUrl": "https://images.unsplash.com/photo-1518791841217-8f162f1e1131?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/musicmaster"
  },
  {
    "name": "KitchenCalc",
    "description": "Kitchen conversion calculator with scaling and temperature guides.",
    "imageUrl": "https://images.unsplash.com/photo-1517433670267-08bbd4be890f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/kitchencalc"
  },
  {
    "name": "BattleBards",
    "description": "Musical combat game where players duel with rhythm-based attacks.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/battlebards"
  },
  {
    "name": "CulinaryQuest",
    "description": "App exploring world cuisines through stories, recipes, and cultural significance of ingredients, with AR cooking guidance and virtual taste-sharing.",
    "imageUrl": "https://images.unsplash.com/photo-1504674900247-0877df9cc836?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/culinaryquest"
  },
  {
    "name": "MotionMix",
    "description": "Motion graphics editor with template library and export options.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/motionmix"
  },
  {
    "name": "MindfulMe",
    "description": "Personalized mental wellness app combining meditation, journaling, and mood tracking with AI-driven insights and recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1518199266791-5375a83190b7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindfulme"
  },
  {
    "name": "StyleSync",
    "description": "AI tool that analyzes your photography style and suggests presets and editing adjustments to maintain consistency across collections.",
    "imageUrl": "https://images.unsplash.com/photo-1452587925148-ce544e77e70d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/stylesync"
  },
  {
    "name": "DigitalDen",
    "description": "Virtual watercooler and casual interaction space.",
    "imageUrl": "https://images.unsplash.com/photo-1516387938699-a93567ec168e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/digitalden"
  },
  {
    "name": "PuzzlePals",
    "description": "Collaborative puzzle-solving platform with real-time multiplayer features.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/puzzlepals"
  },
  {
    "name": "RepairRevive",
    "description": "Community repair workshop finder and DIY repair guide platform.",
    "imageUrl": "https://images.unsplash.com/photo-1581092160562-40aa08e78837?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/repairrevive"
  },
  {
    "name": "FarmLink",
    "description": "Real-time marketplace connecting local farmers with restaurants and consumers, featuring AI-powered demand forecasting and automated delivery route optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1464226184884-fa280b87c399?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/farmlink"
  },
  {
    "name": "RefugeeConnect",
    "description": "Support network connecting refugees with local resources and community assistance.",
    "imageUrl": "https://images.unsplash.com/photo-1488521787991-ed7bbaae773c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/refugeeconnect"
  },
  {
    "name": "WeirdScience",
    "description": "Platform showcasing strange scientific discoveries with interactive visualizations and AI-generated explanations for complex phenomena.",
    "imageUrl": "https://images.unsplash.com/photo-1516321497487-e288fb19713f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/weirdscience"
  },
  {
    "name": "PhotoFlow",
    "description": "Workflow automation tool for photographers with AI-driven image organization, client gallery creation, and automated editing suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1516035069371-29a1b244cc32?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/photoflow"
  },
  {
    "name": "LocalLens",
    "description": "Hyperlocal news and updates platform with community reporting.",
    "imageUrl": "https://images.unsplash.com/photo-1559027615-cd4628902d4a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/locallens"
  },
  {
    "name": "ChoreoCreator",
    "description": "Collaborative platform for creating, sharing, and remixing dance routines with 3D avatars and AR visualization tools.",
    "imageUrl": "https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/choreocreator"
  },
  {
    "name": "TasteTracker",
    "description": "Personal beer journal with ML-driven taste preference analysis and recommendations for new craft beers and breweries.",
    "imageUrl": "https://images.unsplash.com/photo-1436076863939-06870fe779c2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/tastetracker"
  },
  {
    "name": "EntryEase",
    "description": "Smart door lock system with guest access management and activity logging.",
    "imageUrl": "https://images.unsplash.com/photo-1558449028-b53a39d100fc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/entryease"
  },
  {
    "name": "MemeForge",
    "description": "AI-powered meme creation tool that suggests trending formats and generates witty captions based on current events and viral trends.",
    "imageUrl": "https://images.unsplash.com/photo-1531259683007-016a7b628fc3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/memeforge"
  },
  {
    "name": "StoryScribe",
    "description": "Script writing tool specifically designed for comics with AI suggestions for pacing, panel counts, and visual storytelling opportunities.",
    "imageUrl": "https://images.unsplash.com/photo-1588497859490-85d1c17db96d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storyscribe"
  },
  {
    "name": "ColorCode",
    "description": "Color-based data visualization with accessibility features.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/colorcode"
  },
  {
    "name": "PatternPro",
    "description": "Pattern and texture generator for digital design and printing.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/patternpro"
  },
  {
    "name": "FreelanceFunds",
    "description": "Financial management platform for freelancers with tax estimation.",
    "imageUrl": "https://images.unsplash.com/photo-1450101499163-c8848c66ca85?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/freelancefunds"
  },
  {
    "name": "SaveSmart",
    "description": "Goal-based savings app with automated savings rules and challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1579621970563-ebec7560ff3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/savesmart"
  },
  {
    "name": "CultureCompass",
    "description": "Interactive cultural exploration app that uses AR to provide real-time insights about cultural landmarks, traditions, and customs as users explore different neighborhoods or travel globally.",
    "imageUrl": "https://images.unsplash.com/photo-1523059623039-a9ed027e7fad?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/culturecompass"
  },
  {
    "name": "BookBrain",
    "description": "Smart note-taking app that uses AI to connect your highlights and notes across books, generating personalized knowledge graphs and insights.",
    "imageUrl": "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bookbrain"
  },
  {
    "name": "ShaderShowcase",
    "description": "A community-driven gallery for sharing, remixing, and learning about real-time WebGL shaders, with live code editing and visualization.",
    "imageUrl": "https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/shadershowcase"
  },
  {
    "name": "LocalLearn",
    "description": "Community skill-sharing and workshop organization platform.",
    "imageUrl": "https://images.unsplash.com/photo-1559027615-cd4628902d4a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/locallearn"
  },
  {
    "name": "MindMap",
    "description": "AI-powered personal development planner with goal tracking and insights.",
    "imageUrl": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindmap"
  },
  {
    "name": "GarageGuardian",
    "description": "Smart garage management system with remote monitoring and vehicle detection.",
    "imageUrl": "https://images.unsplash.com/photo-1558449028-b53a39d100fc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/garageguardian"
  },
  {
    "name": "EcoExplore",
    "description": "Sustainable travel planner with carbon footprint tracking and eco-lodging.",
    "imageUrl": "https://images.unsplash.com/photo-1497436072909-60f360e1d4b1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecoexplore"
  },
  {
    "name": "PetPlanner",
    "description": "Comprehensive pet care scheduling and reminder system.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petplanner"
  },
  {
    "name": "VizVibe",
    "description": "Social platform for sharing and discovering data visualizations.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/vizvibe"
  },
  {
    "name": "EcoTracker",
    "description": "Personal carbon footprint calculator with daily eco-friendly challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1497436072909-60f360e1d4b1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecotracker"
  },
  {
    "name": "FashionFuture",
    "description": "Sustainable fashion tracker with clothing lifecycle management.",
    "imageUrl": "https://images.unsplash.com/photo-1490481651871-ab68de25d43d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/fashionfuture"
  },
  {
    "name": "LanguageLeap",
    "description": "Travel-focused language learning app with situational phrases and local slang.",
    "imageUrl": "https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/languageleap"
  },
  {
    "name": "StrengthSpot",
    "description": "Personal strengths discovery and development platform.",
    "imageUrl": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/strengthspot"
  },
  {
    "name": "CampConnect",
    "description": "Campsite finder with real-time availability and amenity information.",
    "imageUrl": "https://images.unsplash.com/photo-1504280390367-361c6d9f38f4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/campconnect"
  },
  {
    "name": "TreeTracker",
    "description": "Community tree planting initiative with GPS tracking and growth monitoring.",
    "imageUrl": "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/treetracker"
  },
  {
    "name": "SleepSage",
    "description": "Mental health-focused sleep improvement app combining sleep tracking, anxiety reduction techniques, and bedtime storytelling for better mental wellness.",
    "imageUrl": "https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sleepsage"
  },
  {
    "name": "BalanceBoost",
    "description": "Balance and coordination training with AR guidance and progress tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1518459031867-a89b944bffe4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/balanceboost"
  },
  {
    "name": "GlobalGroove",
    "description": "Music and dance platform showcasing cultural performances, teaching traditional dances, and connecting performers across cultures.",
    "imageUrl": "https://images.unsplash.com/photo-1516450360452-9312f5e86fc7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/globalgroove"
  },
  {
    "name": "CarbonTracker",
    "description": "Personal and business carbon footprint analyzer using AI to process lifestyle data and suggest targeted emission reduction strategies.",
    "imageUrl": "https://images.unsplash.com/photo-1500534314209-a25ddb2bd429?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/carbontracker"
  },
  {
    "name": "TimelineTracer",
    "description": "Interactive family history visualization tool that creates rich multimedia timelines of ancestors' lives using historical context and records.",
    "imageUrl": "https://images.unsplash.com/photo-1494172961521-33799ddd43a5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/timelinetracer"
  },
  {
    "name": "LightLens",
    "description": "AI-powered photography assistant that analyzes scene lighting and composition in real-time, providing suggestions for camera settings and positioning.",
    "imageUrl": "https://images.unsplash.com/photo-1452587925148-ce544e77e70d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/lightlens"
  },
  {
    "name": "TraditionTracker",
    "description": "Platform for documenting and preserving traditional practices, recipes, and crafts with step-by-step guides and intergenerational knowledge sharing.",
    "imageUrl": "https://images.unsplash.com/photo-1529156069898-49953e39b3ac?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/traditiontracker"
  },
  {
    "name": "MemeMaker",
    "description": "Social meme creation and sharing platform with trending templates and challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1531259683007-016a7b628fc3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mememaker"
  },
  {
    "name": "CraftCalc",
    "description": "Project management tool for makers with cost calculation, time tracking, and pricing strategies for handmade items.",
    "imageUrl": "https://images.unsplash.com/photo-1452802447250-470a88ac82bc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/craftcalc"
  },
  {
    "name": "PatternPro",
    "description": "Digital pattern creation and sharing platform with AR visualization, customization tools, and version control for craft projects.",
    "imageUrl": "https://images.unsplash.com/photo-1452860606245-08befc0ff44b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/patternpro"
  },
  {
    "name": "ConnectCentral",
    "description": "Centralized remote team communication and collaboration hub.",
    "imageUrl": "https://images.unsplash.com/photo-1516387938699-a93567ec168e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/connectcentral"
  },
  {
    "name": "ClimateConnect",
    "description": "Social weather platform where users share real-time weather observations and photos, creating a global weather community.",
    "imageUrl": "https://images.unsplash.com/photo-1514475735-fcd1e811aa9c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/climateconnect"
  },
  {
    "name": "ViralTimer",
    "description": "Optimal posting time predictor for meme content across different platforms and demographics.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/viraltimer"
  },
  {
    "name": "BehaviorBridge",
    "description": "Smart habit tracking system that connects with IoT devices to automatically track and verify habit completion through sensor data.",
    "imageUrl": "https://images.unsplash.com/photo-1484480974693-6ca0a78fb36b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/behaviorbridge"
  },
  {
    "name": "BookBarter",
    "description": "Local book exchange platform with AI-powered matching system and AR preview of available books on others' shelves.",
    "imageUrl": "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bookbarter"
  },
  {
    "name": "InjuryInsight",
    "description": "Injury prevention and recovery tracking system for athletes.",
    "imageUrl": "https://images.unsplash.com/photo-1544367567-0f2fcb009e0b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/injuryinsight"
  },
  {
    "name": "AccentAI",
    "description": "Language learning app using voice recognition to provide real-time accent coaching and pronunciation feedback in multiple languages.",
    "imageUrl": "https://images.unsplash.com/photo-1516321165247-4aa89a48be28?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/accentai"
  },
  {
    "name": "FormatFinder",
    "description": "AI-powered search engine for discovering and adapting meme formats based on intended message and target audience.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/formatfinder"
  },
  {
    "name": "DonationDash",
    "description": "Charitable giving tracker with tax deduction optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1532629345422-7515f3d16bb6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/donationdash"
  },
  {
    "name": "IslandHopper",
    "description": "Island travel planner with ferry schedules and beach conditions.",
    "imageUrl": "https://images.unsplash.com/photo-1468413253725-0d5181091126?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/islandhopper"
  },
  {
    "name": "InterestInk",
    "description": "Interest-based social platform with AI-powered content curation.",
    "imageUrl": "https://images.unsplash.com/photo-1522098635833-216c03d81fbe?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/interestink"
  },
  {
    "name": "RestRhythm",
    "description": "Sleep quality analyzer that uses sound and motion detection to provide detailed insights about sleep patterns and disturbances.",
    "imageUrl": "https://images.unsplash.com/photo-1465929639680-64ee080eb3ed?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/restrhythm"
  },
  {
    "name": "PixelPals",
    "description": "Virtual pet game with blockchain-based breeding and trading system.",
    "imageUrl": "https://images.unsplash.com/photo-1550745165-9bc0b252726f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pixelpals"
  },
  {
    "name": "SnowSeeker",
    "description": "Winter sports destination finder with snow conditions and resort reviews.",
    "imageUrl": "https://images.unsplash.com/photo-1551698618-1dfe5d97d256?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/snowseeker"
  },
  {
    "name": "WorkWander",
    "description": "Digital nomad resource and remote work opportunity platform.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/workwander"
  },
  {
    "name": "StatStream",
    "description": "Live sports analytics with predictive modeling and performance insights.",
    "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/statstream"
  },
  {
    "name": "KinConnect",
    "description": "Family networking platform that helps discover and connect with living relatives through DNA matching and social features.",
    "imageUrl": "https://images.unsplash.com/photo-1494172961521-33799ddd43a5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/kinconnect"
  },
  {
    "name": "ZeroWaste",
    "description": "Personal zero waste journey tracker with local zero-waste store mapping.",
    "imageUrl": "https://images.unsplash.com/photo-1532996122724-e3c354a0b15b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/zerowaste"
  },
  {
    "name": "StandupStudio",
    "description": "Virtual reality practice environment for comedians with simulated audience reactions and performance analytics.",
    "imageUrl": "https://images.unsplash.com/photo-1543833175-43a3ef3f3eb6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/standupstudio"
  },
  {
    "name": "NutriPet",
    "description": "Pet nutrition tracking and meal planning platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/nutripet"
  },
  {
    "name": "KaraokeCloud",
    "description": "A cloud-based karaoke platform with real-time pitch correction, duet mode, and global competitions, featuring AI-generated backing tracks.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/karaokecloud"
  },
  {
    "name": "BrewVR",
    "description": "Virtual reality brewing simulation for training and recipe experimentation, with realistic process modeling and outcome prediction.",
    "imageUrl": "https://images.unsplash.com/photo-1518176258769-f227c798150e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/brewvr"
  },
  {
    "name": "CoreControl",
    "description": "Core strength and stability training with posture analysis.",
    "imageUrl": "https://images.unsplash.com/photo-1518611012118-696072aa579a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/corecontrol"
  },
  {
    "name": "ClimateViz",
    "description": "Interactive climate data visualization platform that transforms complex climate models into accessible, actionable insights for policymakers and public.",
    "imageUrl": "https://images.unsplash.com/photo-1464822759023-fed622ff2c3b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/climateviz"
  },
  {
    "name": "SoundScribe",
    "description": "Real-time voice-to-text transcription app with speaker identification, emotion detection, and automated action item extraction from meetings.",
    "imageUrl": "https://images.unsplash.com/photo-1516321165247-4aa89a48be28?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundscribe"
  },
  {
    "name": "BrushBrain",
    "description": "Smart digital painting app that learns your artistic style and suggests techniques, color palettes, and composition improvements.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/brushbrain"
  },
  {
    "name": "PanelPlay",
    "description": "Interactive comic reading platform with AR features that bring panels to life and allow readers to explore 3D scenes.",
    "imageUrl": "https://images.unsplash.com/photo-1588497859490-85d1c17db96d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/panelplay"
  },
  {
    "name": "SketchSync",
    "description": "Real-time collaborative drawing and whiteboarding platform.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sketchsync"
  },
  {
    "name": "HomelessHelp",
    "description": "App connecting homeless individuals with nearby shelters and resources.",
    "imageUrl": "https://images.unsplash.com/photo-1518398046578-8cca57782e17?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/homelesshelp"
  },
  {
    "name": "FanFund",
    "description": "Crowdfunding platform for amateur athletes and sports teams.",
    "imageUrl": "https://images.unsplash.com/photo-1495563125611-fa99f0cd529f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/fanfund"
  },
  {
    "name": "SceneStream",
    "description": "Live 3D scene editor for streaming interactive graphics to web audiences, with AR/VR preview and cloud-based asset management.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/scenestream"
  },
  {
    "name": "HabitHero",
    "description": "Habit formation and tracking app with behavioral science insights.",
    "imageUrl": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/habithero"
  },
  {
    "name": "PhotoFrenzy",
    "description": "Fast-paced photo challenge game using AI to generate creative prompts and judge photo submissions in real-time.",
    "imageUrl": "https://images.unsplash.com/photo-1529156069898-49953e39b3ac?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/photofrenzy"
  },
  {
    "name": "WritingWizard",
    "description": "AI writing assistant that helps improve grammar, style, and structure.",
    "imageUrl": "https://images.unsplash.com/photo-1455390582262-044cdead277a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/writingwizard"
  },
  {
    "name": "EmojiMetrics",
    "description": "Analytics platform tracking emoji usage patterns and effectiveness in communication across different platforms and demographics.",
    "imageUrl": "https://images.unsplash.com/photo-1633613286848-e6f43bbafb8d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/emojimetrics"
  },
  {
    "name": "BoundaryBuddy",
    "description": "Work-life balance management for remote workers.",
    "imageUrl": "https://images.unsplash.com/photo-1516387938699-a93567ec168e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/boundarybuddy"
  },
  {
    "name": "EyeEase",
    "description": "Protect your vision with scheduled screen breaks and eye exercises for digital workers.",
    "imageUrl": "https://images.unsplash.com/photo-1509114397022-ed747cca3f65?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/eyeease"
  },
  {
    "name": "PowerPlan",
    "description": "Powerlifting program builder with competition peak planning.",
    "imageUrl": "https://images.unsplash.com/photo-1534371020656-6b85825f2b1a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/powerplan"
  },
  {
    "name": "ComicCollab",
    "description": "Real-time collaboration platform for comic creators with version control, asset sharing, and AI-powered style matching.",
    "imageUrl": "https://images.unsplash.com/photo-1612036782180-6f0822045d23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/comiccollab"
  },
  {
    "name": "GardenGroup",
    "description": "Community gardening and urban farming coordination platform.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gardengroup"
  },
  {
    "name": "MoodMorph",
    "description": "Emotion-detecting AR filters that adapt in real time to users' facial expressions, creating playful or artistic overlays.",
    "imageUrl": "https://images.unsplash.com/photo-1464983953574-0892a716854b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/moodmorph"
  },
  {
    "name": "FlexSchedule",
    "description": "Workout scheduling optimizer that adapts to your changing availability.",
    "imageUrl": "https://images.unsplash.com/photo-1517836357463-d25dfeac3438?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/flexschedule"
  },
  {
    "name": "Pollinator",
    "description": "App for creating bee-friendly urban gardens, with plant recommendations and community pollinator tracking system.",
    "imageUrl": "https://images.unsplash.com/photo-1465556188937-822164dc2513?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pollinator"
  },
  {
    "name": "WaterWise",
    "description": "Smart water management system for homes and businesses.",
    "imageUrl": "https://images.unsplash.com/photo-1468421870903-4df1664ac249?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/waterwise"
  },
  {
    "name": "SpeechFX Studio",
    "description": "Text-to-speech editor with real-time pitch, speed, and emotion controls, plus export options for video, games, and accessibility tools.",
    "imageUrl": "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/speechfxstudio"
  },
  {
    "name": "EchoEvolve",
    "description": "Atmospheric puzzle game where sound waves shape the environment, featuring procedurally generated levels and unique sound-based mechanics.",
    "imageUrl": "https://images.unsplash.com/photo-1550745165-9bc0b252726f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/echoevolve"
  },
  {
    "name": "ForexFlow",
    "description": "Currency exchange tracking and analysis for international travelers.",
    "imageUrl": "https://images.unsplash.com/photo-1526304640581-d334cdbbf45e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/forexflow"
  },
  {
    "name": "PetPals",
    "description": "Community pet care and support network.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petpals"
  },
  {
    "name": "EmojiStory",
    "description": "Visual storytelling tool that converts text narratives into engaging emoji sequences with AI-powered context understanding.",
    "imageUrl": "https://images.unsplash.com/photo-1633613286991-611fe299c4be?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/emojistory"
  },
  {
    "name": "SoundStitch",
    "description": "Audio editing platform with AI-powered seamless transitions.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundstitch"
  },
  {
    "name": "StudySync",
    "description": "Real-time study group platform with virtual whiteboards and resource sharing.",
    "imageUrl": "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/studysync"
  },
  {
    "name": "EcoOffice",
    "description": "Workplace sustainability management and certification platform.",
    "imageUrl": "https://images.unsplash.com/photo-1497366216548-37526070297c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecooffice"
  },
  {
    "name": "ScoreSync",
    "description": "Digital sheet music platform with real-time collaboration features.",
    "imageUrl": "https://images.unsplash.com/photo-1514320291840-2e0a9bf2a9ae?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/scoresync"
  },
  {
    "name": "ColorQuest",
    "description": "Adventure game where colors are magical powers, featuring unique color-mixing mechanics and emotional storytelling.",
    "imageUrl": "https://images.unsplash.com/photo-1518709268805-4e9042af9f23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/colorquest"
  },
  {
    "name": "DevOpsDesk",
    "description": "Unified DevOps dashboard with deployment tracking and monitoring.",
    "imageUrl": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/devopsdesk"
  },
  {
    "name": "ArtAssist",
    "description": "AI art assistant that helps maintain character consistency across panels and suggests dynamic poses based on action descriptions.",
    "imageUrl": "https://images.unsplash.com/photo-1588497859490-85d1c17db96d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artassist"
  },
  {
    "name": "LaundryLogic",
    "description": "Smart laundry management system with cycle notifications and energy optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1558449028-b53a39d100fc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/laundrylogic"
  },
  {
    "name": "LearnLink",
    "description": "Remote team skill development and knowledge sharing platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516387938699-a93567ec168e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/learnlink"
  },
  {
    "name": "SessionSync",
    "description": "Real-time session management tool with automated note-taking, player engagement tracking, and recap generation.",
    "imageUrl": "https://images.unsplash.com/photo-1518791841217-8f162f1e1131?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sessionsync"
  },
  {
    "name": "SkillShare",
    "description": "Peer-to-peer craft skill exchange platform with video tutorials, mentorship matching, and progress tracking for traditional crafts.",
    "imageUrl": "https://images.unsplash.com/photo-1452802447250-470a88ac82bc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/skillshare"
  },
  {
    "name": "PhysicsPlayground",
    "description": "Interactive physics simulation sandbox using WebGL, letting users experiment with forces, collisions, and materials in 3D.",
    "imageUrl": "https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/physicsplayground"
  },
  {
    "name": "TravelTail",
    "description": "Pet-friendly travel planning and accommodation booking platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/traveltail"
  },
  {
    "name": "CrisisAlert",
    "description": "Real-time emergency alert system for community crisis response.",
    "imageUrl": "https://images.unsplash.com/photo-1584036561566-baf8f5f1b144?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/crisisalert"
  },
  {
    "name": "MusicMesh",
    "description": "Social network for musicians and music lovers with collaboration tools.",
    "imageUrl": "https://images.unsplash.com/photo-1522098635833-216c03d81fbe?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/musicmesh"
  },
  {
    "name": "DoorDash",
    "description": "Smart doorbell system with package detection and delivery management.",
    "imageUrl": "https://images.unsplash.com/photo-1558449028-b53a39d100fc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/doordash"
  },
  {
    "name": "RepairHub",
    "description": "Community tool sharing and repair workshop coordination platform.",
    "imageUrl": "https://images.unsplash.com/photo-1559027615-cd4628902d4a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/repairhub"
  },
  {
    "name": "ComponentCraft",
    "description": "3D design and prototyping tool for board game components with AR visualization and direct-to-manufacturer ordering.",
    "imageUrl": "https://images.unsplash.com/photo-1610890716171-6b1bb98ffd09?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/componentcraft"
  },
  {
    "name": "CleanCatch",
    "description": "Ocean cleanup coordination platform with waste collection mapping.",
    "imageUrl": "https://images.unsplash.com/photo-1437622368342-7a3d73a34c8f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/cleancatch"
  },
  {
    "name": "LearnLoop",
    "description": "Spaced repetition knowledge management system that integrates with your notes and automatically creates review schedules based on your learning patterns.",
    "imageUrl": "https://images.unsplash.com/photo-1516321165247-4aa89a48be28?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/learnloop"
  },
  {
    "name": "PantryPal",
    "description": "Smart kitchen inventory management with expiration tracking and shopping lists.",
    "imageUrl": "https://images.unsplash.com/photo-1495195134817-aeb325a55b65?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pantrypal"
  },
  {
    "name": "MonsterTamer",
    "description": "AR monster catching and training game with location-based gameplay.",
    "imageUrl": "https://images.unsplash.com/photo-1550745165-9bc0b252726f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/monstertamer"
  },
  {
    "name": "SongSmith",
    "description": "AI-powered songwriting assistant with chord progression and melody suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/songsmith"
  },
  {
    "name": "AltitudeAssist",
    "description": "Mountain climbing guide with route planning and acclimatization tips.",
    "imageUrl": "https://images.unsplash.com/photo-1483728642387-6c3bdd6c93e5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/altitudeassist"
  },
  {
    "name": "EcoImpact",
    "description": "Real-time environmental impact assessment tool that visualizes local climate changes and predicts future scenarios using satellite data.",
    "imageUrl": "https://images.unsplash.com/photo-1464822759023-fed622ff2c3b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecoimpact"
  },
  {
    "name": "SoundShare",
    "description": "Music collaboration platform with stem sharing and version control.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundshare"
  },
  {
    "name": "DesignDeck",
    "description": "Card game balancing tool using ML to analyze card interactions, suggest adjustments, and simulate gameplay outcomes.",
    "imageUrl": "https://images.unsplash.com/photo-1610890716171-6b1bb98ffd09?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/designdeck"
  },
  {
    "name": "GreenSchool",
    "description": "School sustainability program management and education platform.",
    "imageUrl": "https://images.unsplash.com/photo-1509062522246-3755977927d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/greenschool"
  },
  {
    "name": "BandBuddy",
    "description": "Resistance band workout generator with equipment-minimal routines.",
    "imageUrl": "https://images.unsplash.com/photo-1517963879433-6ad2b056d712?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bandbuddy"
  },
  {
    "name": "VenueVision",
    "description": "Sports facility booking and management system with real-time availability.",
    "imageUrl": "https://images.unsplash.com/photo-1577471721003-13ab5e422b7d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/venuevision"
  },
  {
    "name": "EscapeRoom",
    "description": "Virtual escape room platform with multiplayer puzzle-solving challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/escaperoom"
  },
  {
    "name": "MatchMentor",
    "description": "Sports coaching and mentoring platform connecting athletes with experts.",
    "imageUrl": "https://images.unsplash.com/photo-1526232761682-d26e03ac148e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/matchmentor"
  },
  {
    "name": "BugBuster",
    "description": "Automated bug detection and reproduction tool with fix suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bugbuster"
  },
  {
    "name": "SeasonalSpot",
    "description": "Seasonal ingredient guide with local sourcing and recipe suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1498837167922-ddd27525d352?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/seasonalspot"
  },
  {
    "name": "TextTrend",
    "description": "Text and sentiment analysis platform for unstructured data.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/texttrend"
  },
  {
    "name": "ArtificialCanvas",
    "description": "AI-powered digital art creation platform combining traditional art techniques with machine learning for unique artistic styles and effects.",
    "imageUrl": "https://images.unsplash.com/photo-1501084817091-a4f3d1d19e07?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artificialcanvas"
  },
  {
    "name": "GenerativeGallery",
    "description": "Platform for creating and sharing generative art with customizable algorithms and interactive parameters.",
    "imageUrl": "https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/generativegallery"
  },
  {
    "name": "LetterLab",
    "description": "Comic lettering automation tool with AI-powered font suggestions, sound effect placement, and multilingual support.",
    "imageUrl": "https://images.unsplash.com/photo-1588497859490-85d1c17db96d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/letterlab"
  },
  {
    "name": "LayoutLab",
    "description": "Page layout and composition tool with grid system and guides.",
    "imageUrl": "https://images.unsplash.com/photo-1517697471339-4aa32003c11a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/layoutlab"
  },
  {
    "name": "MetaMind",
    "description": "Personal knowledge management system that adapts to your thinking patterns and helps organize information in your preferred cognitive style.",
    "imageUrl": "https://images.unsplash.com/photo-1516321165247-4aa89a48be28?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/metamind"
  },
  {
    "name": "ShadowSync",
    "description": "Platform puzzler where players manipulate light and shadow to navigate through minimalist geometric worlds.",
    "imageUrl": "https://images.unsplash.com/photo-1518709268805-4e9042af9f23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/shadowsync"
  },
  {
    "name": "PresentPath",
    "description": "Mindful walking companion that creates meditation paths in your local area with location-based mindfulness prompts.",
    "imageUrl": "https://images.unsplash.com/photo-1447752875215-b2761acb3c5d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/presentpath"
  },
  {
    "name": "LangLink",
    "description": "Language learning through AI-powered conversation practice with native speakers.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/langlink"
  },
  {
    "name": "ChartChampion",
    "description": "Chart creation and customization platform with collaboration features.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/chartchampion"
  },
  {
    "name": "ArtistsAlley",
    "description": "Social platform for visual artists with portfolio sharing.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artistsalley"
  },
  {
    "name": "AnxietyAlly",
    "description": "Real-time anxiety management app with biometric tracking, guided breathing exercises, and immediate support through AI chatbot or peer connection.",
    "imageUrl": "https://images.unsplash.com/photo-1499209974431-9dddcece7f88?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/anxietyally"
  },
  {
    "name": "DataDoctor",
    "description": "Data quality analysis and improvement recommendation system.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/datadoctor"
  },
  {
    "name": "APIArchitect",
    "description": "API design and documentation platform with automatic testing.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/apiarchitect"
  },
  {
    "name": "MovieMood",
    "description": "Film recommendation engine based on emotional state and viewing history.",
    "imageUrl": "https://images.unsplash.com/photo-1485846234645-a62644f84728?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/moviemood"
  },
  {
    "name": "BenchBoss",
    "description": "Player rotation and substitution management system for coaches.",
    "imageUrl": "https://images.unsplash.com/photo-1577471721003-13ab5e422b7d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/benchboss"
  },
  {
    "name": "DietDesigner",
    "description": "Personalized meal planning for specific dietary requirements and restrictions.",
    "imageUrl": "https://images.unsplash.com/photo-1498837167922-ddd27525d352?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/dietdesigner"
  },
  {
    "name": "HealingHarmony",
    "description": "Personalized sound therapy with binaural beats for stress relief and relaxation.",
    "imageUrl": "https://images.unsplash.com/photo-1528214170883-d0d321a0071a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/healingharmony"
  },
  {
    "name": "ComicCloud",
    "description": "Digital comic library with ML-powered organization, smart tagging, and personalized reading recommendations based on art style and storyline preferences.",
    "imageUrl": "https://images.unsplash.com/photo-1588497859490-85d1c17db96d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/comiccloud"
  },
  {
    "name": "WorkWell",
    "description": "Remote work wellness and ergonomics tracking platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516387938699-a93567ec168e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/workwell"
  },
  {
    "name": "HeritageHub",
    "description": "Digital platform for preserving and sharing cultural heritage through user-contributed stories, artifacts, and traditions, with AI-powered translation and cultural context.",
    "imageUrl": "https://images.unsplash.com/photo-1490730141103-6cac27aaab94?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/heritagehub"
  },
  {
    "name": "FunnelFlow",
    "description": "Conversion funnel analysis and optimization platform.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/funnelflow"
  },
  {
    "name": "MusicMentor",
    "description": "Personalized music learning platform with AI feedback on practice sessions.",
    "imageUrl": "https://images.unsplash.com/photo-1514320291840-2e0a9bf2a9ae?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/musicmentor"
  },
  {
    "name": "EcoAlert",
    "description": "Environmental monitoring app that tracks air quality, pollen levels, and climate patterns with predictive health alerts.",
    "imageUrl": "https://images.unsplash.com/photo-1514475735-fcd1e811aa9c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecoalert"
  },
  {
    "name": "DungeonMaster",
    "description": "Roguelike dungeon crawler with AI-generated levels and storylines.",
    "imageUrl": "https://images.unsplash.com/photo-1538481199705-c710c4e965fc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/dungeonmaster"
  },
  {
    "name": "GroomGuide",
    "description": "Pet grooming scheduling and care tracking system.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/groomguide"
  },
  {
    "name": "SportsLeague",
    "description": "Fantasy sports management game with real-time match simulations.",
    "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sportsleague"
  },
  {
    "name": "DreamDiary",
    "description": "AI-powered dream journal that helps users record and analyze their dreams using voice recording, emotion tracking, and pattern recognition.",
    "imageUrl": "https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/dreamdiary"
  },
  {
    "name": "BookBuddy",
    "description": "AI reading companion that engages in meaningful discussions about your current book, offering analysis and thought-provoking questions.",
    "imageUrl": "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bookbuddy"
  },
  {
    "name": "VizVault",
    "description": "Data visualization template library and management system.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/vizvault"
  },
  {
    "name": "MoodMixer",
    "description": "Social mixing game that uses ML to create perfect conversation starters and icebreaker activities based on attendee profiles.",
    "imageUrl": "https://images.unsplash.com/photo-1543807535-eceef0bc6599?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/moodmixer"
  },
  {
    "name": "KidsClub",
    "description": "Community platform for organizing children's activities and playdates.",
    "imageUrl": "https://images.unsplash.com/photo-1472162072942-cd5147eb3902?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/kidsclub"
  },
  {
    "name": "GripGains",
    "description": "Grip strength training program with progress tracking and challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1534371020656-6b85825f2b1a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gripgains"
  },
  {
    "name": "MemeMatch",
    "description": "Social platform connecting meme creators with brands for sponsored content opportunities using AI matchmaking.",
    "imageUrl": "https://images.unsplash.com/photo-1531259683007-016a7b628fc3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/memematch"
  },
  {
    "name": "CrowdComedy",
    "description": "Platform for testing jokes with live virtual audiences and receiving instant feedback and suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1527224857830-43a7acc85260?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/crowdcomedy"
  },
  {
    "name": "ArtJam",
    "description": "Collaborative digital art creation platform with live streaming features.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artjam"
  },
  {
    "name": "ScienceSim",
    "description": "Virtual science lab with interactive experiments and real-time simulations.",
    "imageUrl": "https://images.unsplash.com/photo-1532094349884-543bc11b234d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sciencesim"
  },
  {
    "name": "DigitalDetox",
    "description": "Track and reduce screen time with gentle reminders and offline activity suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1517898717281-8e4385a41802?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/digitaldetox"
  },
  {
    "name": "SetBuilder",
    "description": "AI-powered comedy set construction tool that helps arrange jokes for maximum impact and flow.",
    "imageUrl": "https://images.unsplash.com/photo-1543833175-43a3ef3f3eb6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/setbuilder"
  },
  {
    "name": "AirAlert",
    "description": "Real-time air quality monitoring with personalized health recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1495476479092-6ece1898a101?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/airalert"
  },
  {
    "name": "DisasterNet",
    "description": "Emergency response coordination platform for natural disaster relief efforts.",
    "imageUrl": "https://images.unsplash.com/photo-1547683905-f686c993aae5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/disasternet"
  },
  {
    "name": "PackageFree",
    "description": "Zero-waste shopping assistant and package-free store locator.",
    "imageUrl": "https://images.unsplash.com/photo-1532996122724-e3c354a0b15b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/packagefree"
  },
  {
    "name": "EmojiArt",
    "description": "Creative platform for designing complex artwork and animations using emoji combinations with ML-powered arrangement suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1633613286991-611fe299c4be?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/emojiart"
  },
  {
    "name": "BattleBot",
    "description": "Robot building and battle game with physics-based combat.",
    "imageUrl": "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/battlebot"
  },
  {
    "name": "DataCanvas",
    "description": "Interactive data visualization platform with AI-powered chart recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/datacanvas"
  },
  {
    "name": "SoundSphere",
    "description": "Spatial audio design tool for VR and AR experiences.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundsphere"
  },
  {
    "name": "GrowthGrid",
    "description": "Holistic personal development tracker with multiple life areas.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/growthgrid"
  },
  {
    "name": "MetricMesh",
    "description": "Multi-dimensional data visualization for complex metrics.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/metricmesh"
  },
  {
    "name": "ShootBook",
    "description": "Smart scheduling and client management platform with automated weather monitoring, location scouting, and shot list generation.",
    "imageUrl": "https://images.unsplash.com/photo-1516035069371-29a1b244cc32?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/shootbook"
  },
  {
    "name": "BillBreeze",
    "description": "Bill management and payment optimization with cashback rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1554224155-6726b3ff858f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/billbreeze"
  },
  {
    "name": "WeatherWin",
    "description": "Sports weather impact analysis and game-day planning tool.",
    "imageUrl": "https://images.unsplash.com/photo-1577471721003-13ab5e422b7d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/weatherwin"
  },
  {
    "name": "TrailTracker",
    "description": "Hiking app with offline maps, trail conditions, and community updates.",
    "imageUrl": "https://images.unsplash.com/photo-1501555088652-021faa106b9b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/trailtracker"
  },
  {
    "name": "AdventureAlly",
    "description": "Adventure sports booking platform with gear rental and instructor matching.",
    "imageUrl": "https://images.unsplash.com/photo-1522163182402-834f871fd851?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/adventureally"
  },
  {
    "name": "BattleFlow",
    "description": "Combat management system with AR tabletop integration, automated initiative tracking, and dynamic encounter scaling.",
    "imageUrl": "https://images.unsplash.com/photo-1518791841217-8f162f1e1131?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/battleflow"
  },
  {
    "name": "PetSitter",
    "description": "Pet sitter matching and booking platform with care tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1548767797-d8c844163c4c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petsitter"
  },
  {
    "name": "DeployDash",
    "description": "Deployment pipeline visualization and management platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/deploydash"
  },
  {
    "name": "AnimateAI",
    "description": "Animation creation tool with AI-powered motion generation.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/animateai"
  },
  {
    "name": "OptimizeOrbit",
    "description": "Process optimization and efficiency analysis tool.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/optimizeorbit"
  },
  {
    "name": "NarrateNow",
    "description": "Instant audiobook and podcast generator that converts any text or article into natural-sounding speech with background music and effects.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/narratenow"
  },
  {
    "name": "InsightEngine",
    "description": "AI-powered data analysis platform with automated insight generation.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/insightengine"
  },
  {
    "name": "InvestIQ",
    "description": "Investment learning platform with real-time market simulations and mentoring.",
    "imageUrl": "https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/investiq"
  },
  {
    "name": "FilterForgeAR",
    "description": "A platform for designing and sharing custom AR face and world filters, with AI-powered effects and real-time collaboration.",
    "imageUrl": "https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/filterforgear"
  },
  {
    "name": "RefereeAssist",
    "description": "AI-powered sports officiating assistant with rule interpretations.",
    "imageUrl": "https://images.unsplash.com/photo-1543351611-58f69d7c1781?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/refereeassist"
  },
  {
    "name": "RoomReader",
    "description": "Acoustic analysis tool for room treatment and speaker placement.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/roomreader"
  },
  {
    "name": "WaterWise",
    "description": "Smart water management system with leak detection and usage optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1468421870903-4df1664ac249?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/waterwise"
  },
  {
    "name": "LocalLoop",
    "description": "Local circular economy marketplace and resource mapping tool.",
    "imageUrl": "https://images.unsplash.com/photo-1518391846015-55a9cc003b25?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/localloop"
  },
  {
    "name": "PanelPro",
    "description": "AI-powered comic creation tool that helps with panel layout optimization, perspective correction, and dynamic storytelling flow.",
    "imageUrl": "https://images.unsplash.com/photo-1612036782180-6f0822045d23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/panelpro"
  },
  {
    "name": "CraftConnect",
    "description": "Social marketplace platform connecting artisans with customers, featuring live streaming workshops, virtual craft fairs, and AI-powered pricing assistance.",
    "imageUrl": "https://images.unsplash.com/photo-1452860606245-08befc0ff44b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/craftconnect"
  },
  {
    "name": "SyncSpace",
    "description": "A real-time collaboration tool for remote teams to sync up and share progress.",
    "imageUrl": "https://images.unsplash.com/photo-1515378791036-0648a3ef77b2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/syncspace"
  },
  {
    "name": "PodcastPro",
    "description": "All-in-one podcast production and distribution platform.",
    "imageUrl": "https://images.unsplash.com/photo-1590602847861-f357a9332bbc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/podcastpro"
  },
  {
    "name": "NPCraft",
    "description": "NPC generation and management tool with voice modulation, personality simulation, and dynamic relationship tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1614682835402-c2394a7d1b3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/npcraft"
  },
  {
    "name": "MindfulChains",
    "description": "Habit tracking app focusing on mental well-being, combining CBT techniques with streak building and mindfulness practices.",
    "imageUrl": "https://images.unsplash.com/photo-1493612276216-ee3925520721?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindfulchains"
  },
  {
    "name": "WasteTrack",
    "description": "Business waste reduction and recycling optimization platform.",
    "imageUrl": "https://images.unsplash.com/photo-1532996122724-e3c354a0b15b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/wastetrack"
  },
  {
    "name": "SyncStar",
    "description": "Lip sync battle app with AR effects, live audience voting, and AI-powered video mashups for viral social sharing.",
    "imageUrl": "https://images.unsplash.com/photo-1519389950473-47ba0277781c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/syncstar"
  },
  {
    "name": "MoodMaster",
    "description": "Track and analyze your emotional well-being with journaling prompts and mood patterns.",
    "imageUrl": "https://images.unsplash.com/photo-1517898717281-8e4385a41802?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/moodmaster"
  },
  {
    "name": "BiodiversityMap",
    "description": "Citizen science app for tracking local wildlife and plant species.",
    "imageUrl": "https://images.unsplash.com/photo-1500829243541-74b677fecc30?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/biodiversitymap"
  },
  {
    "name": "CharacterForge",
    "description": "Character creation and development tool with backstory generation, voice acting assistance, and progression tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1614682835402-c2394a7d1b3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/characterforge"
  },
  {
    "name": "SoundscapeSynth",
    "description": "Ambient soundscape generator that creates evolving, nature-inspired music for relaxation, focus, or sleep, using procedural algorithms.",
    "imageUrl": "https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundscapesynth"
  },
  {
    "name": "PurposePath",
    "description": "Personal purpose discovery and alignment platform.",
    "imageUrl": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/purposepath"
  },
  {
    "name": "RemoteResource",
    "description": "Remote work equipment and resource management platform.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/remoteresource"
  },
  {
    "name": "DebateDoJo",
    "description": "Practice critical thinking and argumentation with AI debate partners.",
    "imageUrl": "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/debatedojo"
  },
  {
    "name": "MedicalMutt",
    "description": "Pet medical history and medication tracking system.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/medicalmutt"
  },
  {
    "name": "FoodWaste",
    "description": "App for tracking and reducing household food waste with meal planning tools.",
    "imageUrl": "https://images.unsplash.com/photo-1495195134817-aeb325a55b65?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/foodwaste"
  },
  {
    "name": "MindfulMe",
    "description": "Mindfulness and meditation app with progress tracking and insights.",
    "imageUrl": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindfulme"
  },
  {
    "name": "IdeaNest",
    "description": "A collaborative space for brainstorming and organizing ideas with mind maps and sticky notes.",
    "imageUrl": "https://images.unsplash.com/photo-1503676382389-4809596d5290?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ideanest"
  },
  {
    "name": "GardenGuardian",
    "description": "Magical gardening simulator where plants have personalities and players solve environmental puzzles to restore nature.",
    "imageUrl": "https://images.unsplash.com/photo-1550745165-9bc0b252726f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gardenguardian"
  },
  {
    "name": "BackgroundBuilder",
    "description": "AI-powered tool for generating and customizing comic backgrounds with perspective matching and style consistency.",
    "imageUrl": "https://images.unsplash.com/photo-1612036782180-6f0822045d23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/backgroundbuilder"
  },
  {
    "name": "GreenGroup",
    "description": "Community environmental initiatives coordination platform.",
    "imageUrl": "https://images.unsplash.com/photo-1497436072909-60f360e1d4b1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/greengroup"
  },
  {
    "name": "TimingTutor",
    "description": "Virtual comedy coach that helps perfect joke delivery timing using voice analysis and audience psychology.",
    "imageUrl": "https://images.unsplash.com/photo-1527224857830-43a7acc85260?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/timingtutor"
  },
  {
    "name": "WaveWizard",
    "description": "Audio waveform visualization and manipulation tool.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/wavewizard"
  },
  {
    "name": "MoveMentor",
    "description": "AI-powered dance coach that analyzes your moves via webcam, provides real-time feedback, and teaches trending routines step-by-step.",
    "imageUrl": "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/movementor"
  },
  {
    "name": "BudgetBackpack",
    "description": "Travel expense tracker with budget optimization and cost comparisons.",
    "imageUrl": "https://images.unsplash.com/photo-1473625247510-8ceb1760943f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/budgetbackpack"
  },
  {
    "name": "VoiceVibe",
    "description": "Voice modulation and audio effects tool for content creators.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/voicevibe"
  },
  {
    "name": "EnergyShare",
    "description": "Community renewable energy investment and sharing platform.",
    "imageUrl": "https://images.unsplash.com/photo-1509391366360-2e959784a276?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/energyshare"
  },
  {
    "name": "CookTimer",
    "description": "Multi-timer management system for complex cooking projects.",
    "imageUrl": "https://images.unsplash.com/photo-1517433670267-08bbd4be890f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/cooktimer"
  },
  {
    "name": "InsightInbox",
    "description": "Smart knowledge inbox that automatically categorizes and connects incoming information from various sources into your personal knowledge base.",
    "imageUrl": "https://images.unsplash.com/photo-1456324504439-367cee3b3c32?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/insightinbox"
  },
  {
    "name": "HomeHQ",
    "description": "Home office setup optimization and equipment management platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516387938699-a93567ec168e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/homehq"
  },
  {
    "name": "BudgetBattle",
    "description": "Gamified budgeting app with friend challenges and rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1579621970563-ebec7560ff3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/budgetbattle"
  },
  {
    "name": "MemeMarket",
    "description": "NFT marketplace for original meme content with authenticity tracking and creator royalties.",
    "imageUrl": "https://images.unsplash.com/photo-1531259683007-016a7b628fc3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mememarket"
  },
  {
    "name": "HabitHarbor",
    "description": "Track habits and build streaks with a calming harbor theme and gentle reminders.",
    "imageUrl": "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/habitharbor"
  },
  {
    "name": "StoryStats",
    "description": "Data storytelling platform with narrative-driven visualization templates.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storystats"
  },
  {
    "name": "SchemaSync",
    "description": "Database schema management and migration automation tool.",
    "imageUrl": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/schemasync"
  },
  {
    "name": "TourneyTracker",
    "description": "Tournament organization and bracket management system.",
    "imageUrl": "https://images.unsplash.com/photo-1577471721003-13ab5e422b7d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/tourneytracker"
  },
  {
    "name": "FoodieFlow",
    "description": "Social network for food enthusiasts with recipe sharing and meetups.",
    "imageUrl": "https://images.unsplash.com/photo-1522098635833-216c03d81fbe?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/foodieflow"
  },
  {
    "name": "EmotionEcho",
    "description": "Voice analysis app that detects emotional states and provides appropriate support and resources based on tone and speech patterns.",
    "imageUrl": "https://images.unsplash.com/photo-1517837825086-bc79427df9e6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/emotionecho"
  },
  {
    "name": "SafariSpotter",
    "description": "Wildlife safari planning tool with animal tracking and photography tips.",
    "imageUrl": "https://images.unsplash.com/photo-1516426122078-c23e76319801?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/safarispotter"
  },
  {
    "name": "PetBudget",
    "description": "Pet expense tracking and budget management platform.",
    "imageUrl": "https://images.unsplash.com/photo-1548767797-d8c844163c4c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petbudget"
  },
  {
    "name": "BatchBuddy",
    "description": "Meal prep planning tool with scaling calculations and storage tips.",
    "imageUrl": "https://images.unsplash.com/photo-1495195134817-aeb325a55b65?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/batchbuddy"
  },
  {
    "name": "SpiceGuide",
    "description": "Spice and seasoning encyclopedia with blending suggestions and recipes.",
    "imageUrl": "https://images.unsplash.com/photo-1498837167922-ddd27525d352?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/spiceguide"
  },
  {
    "name": "FoodPrint",
    "description": "Carbon footprint calculator for local food supply chains with recommendations for reducing environmental impact through route optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1470119693884-47d3a1d1f180?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/foodprint"
  },
  {
    "name": "ArtisanAlly",
    "description": "Platform connecting traditional artisans with global audiences, featuring virtual workshops, craft preservation, and cultural marketplace.",
    "imageUrl": "https://images.unsplash.com/photo-1459908676235-d5f02a50184b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artisanally"
  },
  {
    "name": "GoalGuru",
    "description": "Goal setting and achievement platform with accountability features.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/goalguru"
  },
  {
    "name": "StoryTime",
    "description": "Interactive bedtime story app with customizable characters and narratives.",
    "imageUrl": "https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storytime"
  },
  {
    "name": "FactFinder",
    "description": "AI-powered research tool that discovers obscure connections between historical events and generates verified weird fact compilations.",
    "imageUrl": "https://images.unsplash.com/photo-1516321497487-e288fb19713f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/factfinder"
  },
  {
    "name": "NetworkNexus",
    "description": "Network and relationship visualization tool with interactive exploration.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/networknexus"
  },
  {
    "name": "PixelPulse",
    "description": "Interactive pixel art creation tool with animation capabilities and community challenges for retro-style digital art.",
    "imageUrl": "https://images.unsplash.com/photo-1518998053901-5348d3961a04?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pixelpulse"
  },
  {
    "name": "ClimateControl",
    "description": "Smart HVAC management with room-by-room temperature optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1513694203232-719a280e022f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/climatecontrol"
  },
  {
    "name": "AsyncAlign",
    "description": "Asynchronous communication and documentation management system.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/asyncalign"
  },
  {
    "name": "EmojiAI",
    "description": "AI-powered emoji suggestion system that analyzes message context and sentiment to recommend perfect emoji combinations in real-time.",
    "imageUrl": "https://images.unsplash.com/photo-1633613286991-611fe299c4be?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/emojiai"
  },
  {
    "name": "AudioAnalytics",
    "description": "Sound analysis platform for acoustic research and development.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/audioanalytics"
  },
  {
    "name": "BrewSense",
    "description": "IoT-enabled brewing monitoring system that tracks fermentation conditions and provides real-time alerts and optimization suggestions using AI.",
    "imageUrl": "https://images.unsplash.com/photo-1505075106905-fb052892c116?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/brewsense"
  },
  {
    "name": "FoodShare",
    "description": "Community food sharing and meal organization platform.",
    "imageUrl": "https://images.unsplash.com/photo-1498837167922-ddd27525d352?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/foodshare"
  },
  {
    "name": "SkillSage",
    "description": "Personalized skill development platform with adaptive learning paths.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/skillsage"
  },
  {
    "name": "JestJournal",
    "description": "Personal joke writing assistant with mood-based suggestions and performance tracking across different venues.",
    "imageUrl": "https://images.unsplash.com/photo-1543833175-43a3ef3f3eb6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/jestjournal"
  },
  {
    "name": "VoiceVibe",
    "description": "Voice modulation and effects platform for content creators.",
    "imageUrl": "https://images.unsplash.com/photo-1516450360452-9312f5e86fc7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/voicevibe"
  },
  {
    "name": "RemoteRoster",
    "description": "Remote team availability and capacity management system.",
    "imageUrl": "https://images.unsplash.com/photo-1516387938699-a93567ec168e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/remoteroster"
  },
  {
    "name": "CompeteCompare",
    "description": "Competitive analysis and benchmarking platform.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/competecompare"
  },
  {
    "name": "BookBeat",
    "description": "Reading soundtrack generator that creates adaptive music and ambient sounds based on the mood and pace of your current book section.",
    "imageUrl": "https://images.unsplash.com/photo-1474932430478-367dbb6832c1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bookbeat"
  },
  {
    "name": "InboxZeroHero",
    "description": "Gamifies your email inbox, helping you reach inbox zero with fun challenges and rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1519389950473-47ba0277781c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/inboxzerohero"
  },
  {
    "name": "CareerCompass",
    "description": "Professional development platform with skill gap analysis and learning paths.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/careercompass"
  },
  {
    "name": "MoodMix",
    "description": "AI-powered playlist generator that creates perfect soundtracks for any moment.",
    "imageUrl": "https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/moodmix"
  },
  {
    "name": "VolunteerVibe",
    "description": "Social network connecting volunteers with opportunities and organizations.",
    "imageUrl": "https://images.unsplash.com/photo-1522098635833-216c03d81fbe?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/volunteervibe"
  },
  {
    "name": "ModelMixer",
    "description": "A collaborative 3D modeling platform in the browser using WebGL, allowing users to co-create, remix, and animate models in real time.",
    "imageUrl": "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/modelmixer"
  },
  {
    "name": "BiodiversityPulse",
    "description": "App tracking ecosystem changes and biodiversity impacts of climate change with citizen science integration and ML analysis.",
    "imageUrl": "https://images.unsplash.com/photo-1464822759023-fed622ff2c3b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/biodiversitypulse"
  },
  {
    "name": "TechTalk",
    "description": "Social network for tech professionals and enthusiasts.",
    "imageUrl": "https://images.unsplash.com/photo-1522098635833-216c03d81fbe?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/techtalk"
  },
  {
    "name": "TowerTactics",
    "description": "Competitive tower defense game with real-time strategy elements.",
    "imageUrl": "https://images.unsplash.com/photo-1533923156502-be31530547c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/towertactics"
  },
  {
    "name": "DreamConnect",
    "description": "Social platform for sharing and discussing dreams, with AI-powered dream interpretation and pattern matching across users.",
    "imageUrl": "https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/dreamconnect"
  },
  {
    "name": "VoteVoice",
    "description": "Civic engagement platform with election information and voter resources.",
    "imageUrl": "https://images.unsplash.com/photo-1540910419892-4a36d2c3266c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/votevoice"
  },
  {
    "name": "LocationScout",
    "description": "Photography location discovery app using AR to preview sun positions, suggest optimal shooting times, and share location-specific camera settings.",
    "imageUrl": "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/locationscout"
  },
  {
    "name": "LibraryLink",
    "description": "Social platform connecting readers with similar taste profiles, featuring AI-powered book clubs and collaborative reading challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1507842217343-583bb7270b66?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/librarylink"
  },
  {
    "name": "StartupSpace",
    "description": "Social network for entrepreneurs and startup enthusiasts.",
    "imageUrl": "https://images.unsplash.com/photo-1522098635833-216c03d81fbe?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/startupspace"
  },
  {
    "name": "LightMap",
    "description": "Collaborative platform for photographers to share and discover perfect lighting conditions for specific locations and times.",
    "imageUrl": "https://images.unsplash.com/photo-1500634245200-e5245c7574ef?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/lightmap"
  },
  {
    "name": "WeatherWise",
    "description": "Hyperlocal weather forecasting app using crowd-sourced data and IoT sensors to provide block-by-block weather predictions and alerts.",
    "imageUrl": "https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/weatherwise"
  },
  {
    "name": "TravelTribe",
    "description": "Social platform connecting travelers and sharing authentic experiences.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/traveltribe"
  },
  {
    "name": "PixelPioneers",
    "description": "Retro-style colony building game with unique social simulation elements and procedurally generated character stories.",
    "imageUrl": "https://images.unsplash.com/photo-1550745165-9bc0b252726f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pixelpioneers"
  },
  {
    "name": "FactFlow",
    "description": "Social platform for sharing and verifying unusual facts with real-time fact-checking and source validation using AI.",
    "imageUrl": "https://images.unsplash.com/photo-1456081445129-830eb8d4bfc6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/factflow"
  },
  {
    "name": "CreativeCanvas",
    "description": "Social platform for artists to collaborate and showcase their work.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/creativecanvas"
  },
  {
    "name": "HabitHarmony",
    "description": "AI-powered habit tracking app that adapts to your lifestyle patterns and suggests optimal times for habit completion based on your energy levels and schedule.",
    "imageUrl": "https://images.unsplash.com/photo-1484480974693-6ca0a78fb36b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/habitharmony"
  },
  {
    "name": "RetirementRoad",
    "description": "Retirement planning tool with lifestyle simulation and goal tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1469854523086-cc02fe5d8800?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/retirementroad"
  },
  {
    "name": "UrbanOasis",
    "description": "Community-driven platform connecting urban gardeners for resource sharing, knowledge exchange, and collaborative growing projects.",
    "imageUrl": "https://images.unsplash.com/photo-1523348837708-15d4a09cfac2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/urbanoasis"
  },
  {
    "name": "AccessAble",
    "description": "Crowdsourced accessibility information for public spaces and businesses.",
    "imageUrl": "https://images.unsplash.com/photo-1531206715517-5c0ba140b2b8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/accessable"
  },
  {
    "name": "ScoutSense",
    "description": "Player scouting and recruitment platform with performance analytics.",
    "imageUrl": "https://images.unsplash.com/photo-1431324155629-1a6deb1dec8d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/scoutsense"
  },
  {
    "name": "TrendTracker",
    "description": "Real-time trend analysis and forecasting platform.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/trendtracker"
  },
  {
    "name": "HumorHarmony",
    "description": "Cultural adaptation tool for jokes with translation support and cultural sensitivity analysis.",
    "imageUrl": "https://images.unsplash.com/photo-1527224857830-43a7acc85260?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/humorharmony"
  },
  {
    "name": "HeritageVR",
    "description": "Virtual reality platform for exploring historical locations and recreating ancestral homes and communities in immersive 3D.",
    "imageUrl": "https://images.unsplash.com/photo-1503516459261-40c66117780a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/heritagevr"
  },
  {
    "name": "StoryScape",
    "description": "Virtual tabletop with dynamic environment generation, weather effects, and ambient sound management.",
    "imageUrl": "https://images.unsplash.com/photo-1518791841217-8f162f1e1131?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storyscape"
  },
  {
    "name": "StreamSquad",
    "description": "Social platform for watching streaming content together with friends virtually.",
    "imageUrl": "https://images.unsplash.com/photo-1522869635100-9f4c5e86aa37?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/streamsquad"
  },
  {
    "name": "BrandBuilder",
    "description": "Brand identity design suite with logo generation and style guide creation.",
    "imageUrl": "https://images.unsplash.com/photo-1517697471339-4aa32003c11a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/brandbuilder"
  },
  {
    "name": "TranscribeTalk",
    "description": "Real-time speech-to-text and text-to-speech communication tool for seamless conversations between hearing and non-hearing users.",
    "imageUrl": "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/transcribetalk"
  },
  {
    "name": "RemoteRitual",
    "description": "Virtual team building and culture development platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516387938699-a93567ec168e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/remoteritual"
  },
  {
    "name": "TrendTracker",
    "description": "Real-time meme trend analysis platform with viral prediction algorithms and format evolution tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/trendtracker"
  },
  {
    "name": "KnowledgeNexus",
    "description": "Team knowledge management platform with AI-powered insights, automated documentation, and smart knowledge sharing recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1456324504439-367cee3b3c32?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/knowledgenexus"
  },
  {
    "name": "FontFlow",
    "description": "Typography exploration tool with font pairing and layout suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1517697471339-4aa32003c11a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/fontflow"
  },
  {
    "name": "CrowdQuest",
    "description": "Interactive challenge system where players use their phones to complete AR-enhanced missions and collaborative tasks at parties.",
    "imageUrl": "https://images.unsplash.com/photo-1529156069898-49953e39b3ac?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/crowdquest"
  },
  {
    "name": "SoundSleep",
    "description": "Create the perfect sleep environment with ambient sounds and smart light control.",
    "imageUrl": "https://images.unsplash.com/photo-1511068797325-6083f0f872b1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundsleep"
  },
  {
    "name": "StockSense",
    "description": "Stock market analysis tool with social sentiment tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/stocksense"
  },
  {
    "name": "DesignDeck",
    "description": "Drag-and-drop graphic design tool with template library and brand management.",
    "imageUrl": "https://images.unsplash.com/photo-1517697471339-4aa32003c11a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/designdeck"
  },
  {
    "name": "TheoryTutor",
    "description": "Interactive music theory learning platform with practical exercises.",
    "imageUrl": "https://images.unsplash.com/photo-1514320291840-2e0a9bf2a9ae?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/theorytutor"
  },
  {
    "name": "CommunityConnect",
    "description": "Platform connecting volunteers with local community service opportunities and tracking impact.",
    "imageUrl": "https://images.unsplash.com/photo-1559027615-cd4628902d4a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/communityconnect"
  },
  {
    "name": "SignalSphere",
    "description": "Decentralized chat and file sharing app with end-to-end encryption, leveraging WebRTC for direct, serverless communication.",
    "imageUrl": "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/signalsphere"
  },
  {
    "name": "ShelfSpace",
    "description": "Virtual bookshelf organizer using AR to optimize physical book arrangement and track borrowed books through computer vision.",
    "imageUrl": "https://images.unsplash.com/photo-1474932430478-367dbb6832c1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/shelfspace"
  },
  {
    "name": "FarmForecast",
    "description": "AI-powered demand prediction tool helping local farmers optimize planting schedules based on historical sales data and upcoming local events.",
    "imageUrl": "https://images.unsplash.com/photo-1500651230702-0e2d8a49d4ad?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/farmforecast"
  },
  {
    "name": "GeoGenius",
    "description": "Geography learning through interactive maps and virtual field trips.",
    "imageUrl": "https://images.unsplash.com/photo-1526778548025-fa2f459cd5c1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/geogenius"
  },
  {
    "name": "CryptoCompass",
    "description": "Cryptocurrency portfolio tracker with market analysis and alerts.",
    "imageUrl": "https://images.unsplash.com/photo-1518546305927-5a555bb7020d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/cryptocompass"
  },
  {
    "name": "EcoEvents",
    "description": "Sustainable event planning platform with carbon offset integration.",
    "imageUrl": "https://images.unsplash.com/photo-1511632765486-a01980e01a18?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecoevents"
  },
  {
    "name": "DiveLog",
    "description": "Scuba diving trip planner with marine life identification and conditions.",
    "imageUrl": "https://images.unsplash.com/photo-1544551763-46a013bb70d5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/divelog"
  },
  {
    "name": "SurrealSim",
    "description": "Interactive app that places users in surreal, randomly generated situations with unexpected outcomes, powered by generative AI.",
    "imageUrl": "https://images.unsplash.com/photo-1464983953574-0892a716854b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/surrealsim"
  },
  {
    "name": "StudioFlow",
    "description": "Workshop management system for tracking multiple projects, client orders, and production schedules with integrated e-commerce.",
    "imageUrl": "https://images.unsplash.com/photo-1452802447250-470a88ac82bc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/studioflow"
  },
  {
    "name": "MindMesh",
    "description": "AI-powered knowledge graph platform that automatically connects notes, documents, and ideas, creating visual relationship maps with semantic search.",
    "imageUrl": "https://images.unsplash.com/photo-1456324504439-367cee3b3c32?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindmesh"
  },
  {
    "name": "VaccinateVet",
    "description": "Pet vaccination tracking and reminder system.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/vaccinatevet"
  },
  {
    "name": "TimeTrail",
    "description": "Timeline-based data visualization for historical and trend analysis.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/timetrail"
  },
  {
    "name": "SocialBalance",
    "description": "Monitor and improve your social wellness with connection tracking and relationship insights.",
    "imageUrl": "https://images.unsplash.com/photo-1521543832500-49e69fb2bea2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/socialbalance"
  },
  {
    "name": "DreamDrifter",
    "description": "Surreal exploration game set in a world of dreams, featuring hand-drawn art and physics-defying gameplay mechanics.",
    "imageUrl": "https://images.unsplash.com/photo-1518709268805-4e9042af9f23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/dreamdrifter"
  },
  {
    "name": "WaterWatch",
    "description": "Community-driven water quality monitoring and reporting system.",
    "imageUrl": "https://images.unsplash.com/photo-1468421870903-4df1664ac249?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/waterwatch"
  },
  {
    "name": "MealMaster",
    "description": "Smart meal planning app with nutritional tracking and grocery integration.",
    "imageUrl": "https://images.unsplash.com/photo-1498837167922-ddd27525d352?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mealmaster"
  },
  {
    "name": "WorldBuilder",
    "description": "Collaborative sandbox game for creating and sharing virtual worlds.",
    "imageUrl": "https://images.unsplash.com/photo-1511512578047-dfb367046420?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/worldbuilder"
  },
  {
    "name": "FocusFlow",
    "description": "Deep work session management and distraction blocking tool.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/focusflow"
  },
  {
    "name": "StorySpiral",
    "description": "Collaborative storytelling game where AI helps players create hilarious and engaging narratives using voice and gesture inputs.",
    "imageUrl": "https://images.unsplash.com/photo-1543807535-eceef0bc6599?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storyspiral"
  },
  {
    "name": "ComicVerse",
    "description": "Virtual reality comic creation and reading platform with immersive storytelling tools and 3D panel transitions.",
    "imageUrl": "https://images.unsplash.com/photo-1612036782180-6f0822045d23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/comicverse"
  },
  {
    "name": "PunchlinePredict",
    "description": "ML system that helps craft perfect punchlines by analyzing successful joke structures and audience responses.",
    "imageUrl": "https://images.unsplash.com/photo-1543833175-43a3ef3f3eb6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/punchlinepredict"
  },
  {
    "name": "HarmonyHub",
    "description": "Virtual band formation and collaboration platform for musicians.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/harmonyhub"
  },
  {
    "name": "WinePair",
    "description": "Food and wine pairing assistant with tasting notes and recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1510812431401-41d2bd2722f3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/winepair"
  },
  {
    "name": "BookBond",
    "description": "Social network for book lovers with reading groups and discussions.",
    "imageUrl": "https://images.unsplash.com/photo-1522098635833-216c03d81fbe?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bookbond"
  },
  {
    "name": "GrowGuard",
    "description": "IoT monitoring system for indoor plants with smart sensors tracking light, moisture, and nutrients, providing automated care alerts.",
    "imageUrl": "https://images.unsplash.com/photo-1462530260150-24a3e73dd6e6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/growguard"
  },
  {
    "name": "MetricMind",
    "description": "Business metrics analysis and KPI tracking system.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/metricmind"
  },
  {
    "name": "TeamTempo",
    "description": "Remote team coordination and timezone management platform.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/teamtempo"
  },
  {
    "name": "TrendTranslator",
    "description": "Cultural adaptation tool for memes with localization support and cultural sensitivity checking.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/trendtranslator"
  },
  {
    "name": "PlasticFree",
    "description": "Plastic reduction challenge app with alternative product suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1532996122724-e3c354a0b15b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/plasticfree"
  },
  {
    "name": "LiveCollab",
    "description": "Web-based co-working space with live video, chat, and shared whiteboards for remote teams, powered by secure peer-to-peer WebRTC connections.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/livecollab"
  },
  {
    "name": "ResilienceRise",
    "description": "Mental resilience building platform with guided exercises.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/resiliencerise"
  },
  {
    "name": "BeatBlend",
    "description": "Collaborative music production platform with real-time jamming features.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/beatblend"
  },
  {
    "name": "SafeStreets",
    "description": "Community safety network with real-time alerts and reporting.",
    "imageUrl": "https://images.unsplash.com/photo-1559027615-cd4628902d4a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/safestreets"
  },
  {
    "name": "CookClub",
    "description": "Social cooking platform with recipe sharing and virtual cooking clubs.",
    "imageUrl": "https://images.unsplash.com/photo-1556910103-1c02745aae4d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/cookclub"
  },
  {
    "name": "LogicLens",
    "description": "Code visualization tool for understanding complex codebases.",
    "imageUrl": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/logiclens"
  },
  {
    "name": "PetPals",
    "description": "Social platform for pet owners with meetup coordination.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petpals"
  },
  {
    "name": "ArtAlley",
    "description": "Local arts and culture community platform with event coordination.",
    "imageUrl": "https://images.unsplash.com/photo-1559027615-cd4628902d4a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artalley"
  },
  {
    "name": "MoodMentor",
    "description": "AI-powered mood tracking and therapy companion that provides personalized coping strategies, CBT exercises, and connects users with mental health professionals when needed.",
    "imageUrl": "https://images.unsplash.com/photo-1544367567-0f2fcb009e0b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/moodmentor"
  },
  {
    "name": "MicroGreens",
    "description": "Specialized app for growing and selling microgreens in urban settings, with growth tracking and marketplace features.",
    "imageUrl": "https://images.unsplash.com/photo-1524365809-aff1f331b40f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/microgreens"
  },
  {
    "name": "GreenSupply",
    "description": "Supply chain sustainability tracker for businesses and consumers.",
    "imageUrl": "https://images.unsplash.com/photo-1586528116311-ad8dd3c8310d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/greensupply"
  },
  {
    "name": "ContextConnect",
    "description": "Context-aware note-taking app that automatically links related information and suggests relevant connections while you write.",
    "imageUrl": "https://images.unsplash.com/photo-1516321165247-4aa89a48be28?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/contextconnect"
  },
  {
    "name": "SkillBridge",
    "description": "Platform connecting skilled retirees with nonprofits needing expertise.",
    "imageUrl": "https://images.unsplash.com/photo-1517048676732-d65bc937f952?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/skillbridge"
  },
  {
    "name": "LucidLink",
    "description": "Lucid dreaming training app with guided exercises, reality checks, and a community platform for sharing lucid dreaming experiences.",
    "imageUrl": "https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/lucidlink"
  },
  {
    "name": "VocalVibe",
    "description": "Vocal training app with pitch detection and exercise tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1516450360452-9312f5e86fc7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/vocalvibe"
  },
  {
    "name": "ChoreChampion",
    "description": "Smart cleaning robot management with scheduling and zone-based cleaning.",
    "imageUrl": "https://images.unsplash.com/photo-1558449028-b53a39d100fc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/chorechampion"
  },
  {
    "name": "SupplySource",
    "description": "Smart inventory management system for crafters with material tracking, reorder automation, and sustainable supplier marketplace.",
    "imageUrl": "https://images.unsplash.com/photo-1452860606245-08befc0ff44b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/supplysource"
  },
  {
    "name": "CircularCity",
    "description": "Platform connecting local businesses for resource sharing and waste reduction.",
    "imageUrl": "https://images.unsplash.com/photo-1518391846015-55a9cc003b25?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/circularcity"
  },
  {
    "name": "PerformancePulse",
    "description": "Real-time performance analytics and monitoring system.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/performancepulse"
  },
  {
    "name": "LootLogic",
    "description": "Treasure and reward management system with balanced item generation and dynamic economy simulation.",
    "imageUrl": "https://images.unsplash.com/photo-1614682835402-c2394a7d1b3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/lootlogic"
  },
  {
    "name": "SmartSprout",
    "description": "IoT-enabled garden monitoring system for balconies and rooftops, with automated watering and climate control features.",
    "imageUrl": "https://images.unsplash.com/photo-1523348837708-15d4a09cfac2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/smartsprout"
  },
  {
    "name": "SeedShare",
    "description": "Urban seed library platform for exchanging and preserving heirloom varieties adapted to city growing conditions.",
    "imageUrl": "https://images.unsplash.com/photo-1523348837708-15d4a09cfac2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/seedshare"
  },
  {
    "name": "EcoMarket",
    "description": "Sustainable product marketplace with environmental impact ratings.",
    "imageUrl": "https://images.unsplash.com/photo-1472851294608-062f824d29cc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecomarket"
  },
  {
    "name": "GreenCycle",
    "description": "Recycling education and tracking app with community challenges and rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1532996122724-e3c354a0b15b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/greencycle"
  },
  {
    "name": "ReadAloudAR",
    "description": "Augmented reality app that reads text from the real world aloud, supporting multiple languages and accessibility features.",
    "imageUrl": "https://images.unsplash.com/photo-1464983953574-0892a716854b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/readaloudar"
  },
  {
    "name": "TestTracker",
    "description": "Automated test coverage analyzer with AI-generated test suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/testtracker"
  },
  {
    "name": "CalmCompass",
    "description": "Emotional awareness tool using mindfulness techniques to help users navigate and understand their emotional states.",
    "imageUrl": "https://images.unsplash.com/photo-1518199266791-5375a83190b7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/calmcompass"
  },
  {
    "name": "PlantSync",
    "description": "Smart home integration platform that automates plant care through connected devices and learns from plant response patterns.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/plantsync"
  },
  {
    "name": "TriviaTwist",
    "description": "Dynamic trivia game that adapts questions based on players' shared interests and generates personalized team challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1543807535-eceef0bc6599?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/triviatwist"
  },
  {
    "name": "BalanceBuddy",
    "description": "Life balance optimization tool with stress management techniques.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/balancebuddy"
  },
  {
    "name": "CultureMoji",
    "description": "Cultural emoji adaptation system that suggests appropriate emojis based on regional context and cultural sensitivities.",
    "imageUrl": "https://images.unsplash.com/photo-1633613286848-e6f43bbafb8d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/culturemoji"
  },
  {
    "name": "StorySync",
    "description": "Cross-device reading synchronization with smart bookmarking that adapts to your attention patterns and reading environment.",
    "imageUrl": "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storysync"
  },
  {
    "name": "PartyPulse",
    "description": "AI-powered party game generator that creates custom games based on the group's dynamics, interests, and energy levels in real-time.",
    "imageUrl": "https://images.unsplash.com/photo-1543807535-eceef0bc6599?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/partypulse"
  },
  {
    "name": "TuneTools",
    "description": "All-in-one musician's toolkit with tuner, metronome, and practice tools.",
    "imageUrl": "https://images.unsplash.com/photo-1514320291840-2e0a9bf2a9ae?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/tunetools"
  },
  {
    "name": "HistoryHolo",
    "description": "AR history lessons that bring historical events to life in your space.",
    "imageUrl": "https://images.unsplash.com/photo-1461360228754-6e81c478b882?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/historyholo"
  },
  {
    "name": "PuzzleQuest",
    "description": "Story-driven puzzle game with RPG elements and character progression.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/puzzlequest"
  },
  {
    "name": "ARtistry",
    "description": "Augmented reality art creation app allowing artists to paint in 3D space and view artwork in real-world contexts.",
    "imageUrl": "https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artistry"
  },
  {
    "name": "VirtualVenue",
    "description": "Platform for hosting and attending virtual concerts with interactive features.",
    "imageUrl": "https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/virtualvenue"
  },
  {
    "name": "PatternPro",
    "description": "Pattern recognition and visualization tool for data analysis.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/patternpro"
  },
  {
    "name": "RhythmRoots",
    "description": "Procedural rhythm and percussion generator inspired by world music, with customizable tempo, style, and instrument selection.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/rhythmroots"
  },
  {
    "name": "RootQuest",
    "description": "Gamified genealogy research app that turns family history discovery into an engaging quest with challenges and rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1494172961521-33799ddd43a5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/rootquest"
  },
  {
    "name": "NutriNinja",
    "description": "AI-powered meal planning and nutrition tracking with recipe suggestions based on health goals.",
    "imageUrl": "https://images.unsplash.com/photo-1498837167922-ddd27525d352?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/nutrininja"
  },
  {
    "name": "SoundScout",
    "description": "Audio sample marketplace with AI-powered search and categorization.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundscout"
  },
  {
    "name": "BookBuddy",
    "description": "Social reading platform with discussion groups and interactive annotations.",
    "imageUrl": "https://images.unsplash.com/photo-1524995997946-a1c2e315a42f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bookbuddy"
  },
  {
    "name": "ArtBoard",
    "description": "Digital art creation tool with realistic media simulation.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artboard"
  },
  {
    "name": "CraftConnect",
    "description": "Social platform connecting craft brewers for equipment sharing, knowledge exchange, and collaborative brewing projects.",
    "imageUrl": "https://images.unsplash.com/photo-1518176258769-f227c798150e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/craftconnect"
  },
  {
    "name": "JokeJam",
    "description": "Collaborative joke writing platform with real-time feedback and AI-assisted improvement suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1527224857830-43a7acc85260?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/jokejam"
  },
  {
    "name": "LifeLearn",
    "description": "Lifelong learning platform with personalized course recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/lifelearn"
  },
  {
    "name": "WasteWise",
    "description": "Smart recycling guide with barcode scanning and local recycling information.",
    "imageUrl": "https://images.unsplash.com/photo-1532996122724-e3c354a0b15b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/wastewise"
  },
  {
    "name": "ScaleScope",
    "description": "Large-scale data visualization with zooming and exploration features.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/scalescope"
  },
  {
    "name": "KitchenCoach",
    "description": "Step-by-step cooking technique tutorials with video guidance.",
    "imageUrl": "https://images.unsplash.com/photo-1556910103-1c02745aae4d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/kitchencoach"
  },
  {
    "name": "LocalLoop",
    "description": "Collaborative resource sharing platform for local food businesses to exchange surplus ingredients and coordinate bulk purchases.",
    "imageUrl": "https://images.unsplash.com/photo-1488459716781-31db52582fe9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/localloop"
  },
  {
    "name": "VoiceMimic",
    "description": "Voice cloning tool for creating digital voice avatars, enabling users to generate speech in their own or celebrity voices for fun and productivity.",
    "imageUrl": "https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/voicemimic"
  },
  {
    "name": "NeighborNet",
    "description": "Local community networking platform with event organization and resource sharing.",
    "imageUrl": "https://images.unsplash.com/photo-1559027615-cd4628902d4a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/neighbornet"
  },
  {
    "name": "ArtLens",
    "description": "Augmented reality art filters that overlay famous paintings, sculptures, or generative art onto the real world for creative selfies and videos.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artlens"
  },
  {
    "name": "FitFinance",
    "description": "Gym membership and fitness expense tracker with budget optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1534438327276-14e5300c3a48?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/fitfinance"
  },
  {
    "name": "WindowWizard",
    "description": "Automated window treatment control with sunlight and privacy optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1513506003901-1e6a229e2d15?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/windowwizard"
  },
  {
    "name": "FileFerry",
    "description": "A drag-and-drop file organizer that helps you keep your digital workspace tidy.",
    "imageUrl": "https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/fileferry"
  },
  {
    "name": "ReadRhythm",
    "description": "AI-powered reading pace analyzer that adapts book recommendations and reading schedules to your natural reading patterns and available time.",
    "imageUrl": "https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/readrhythm"
  },
  {
    "name": "TalentStage",
    "description": "Virtual talent show platform with audience voting and live performance features.",
    "imageUrl": "https://images.unsplash.com/photo-1516450360452-9312f5e86fc7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/talentstage"
  },
  {
    "name": "TeamTactic",
    "description": "Real-time team strategy visualization and play-calling platform.",
    "imageUrl": "https://images.unsplash.com/photo-1577471721003-13ab5e422b7d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/teamtactic"
  },
  {
    "name": "TimeLoop",
    "description": "Puzzle game where players manipulate time to solve challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1501139083538-0139583c060f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/timeloop"
  },
  {
    "name": "WorldWeaver",
    "description": "Procedural world generation tool with AI-driven map creation, climate simulation, and culture generation.",
    "imageUrl": "https://images.unsplash.com/photo-1614682835402-c2394a7d1b3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/worldweaver"
  },
  {
    "name": "ElderConnect",
    "description": "Platform connecting seniors with community volunteers for companionship and assistance.",
    "imageUrl": "https://images.unsplash.com/photo-1516714435131-44d6b64dc6a2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/elderconnect"
  },
  {
    "name": "EchoEngage",
    "description": "Voice-based social network where users share audio stories, podcasts, and conversations with voice reactions and comments.",
    "imageUrl": "https://images.unsplash.com/photo-1516321165247-4aa89a48be28?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/echoengage"
  },
  {
    "name": "ClarityBoard",
    "description": "A digital whiteboard for organizing thoughts, tasks, and projects visually.",
    "imageUrl": "https://images.unsplash.com/photo-1515168833906-d2a3b82b3029?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/clarityboard"
  },
  {
    "name": "TuneWeaver",
    "description": "AI-powered procedural music generator for creating endless, adaptive soundtracks for games, meditation, and productivity.",
    "imageUrl": "https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/tuneweaver"
  },
  {
    "name": "HolisticHelper",
    "description": "Track alternative wellness practices and their effects on your overall health.",
    "imageUrl": "https://images.unsplash.com/photo-1506126613408-eca07ce68773?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/holistichelper"
  },
  {
    "name": "HealingHaven",
    "description": "Safe space app for trauma recovery with guided healing exercises, community support groups, and progress tracking tools.",
    "imageUrl": "https://images.unsplash.com/photo-1469571486292-b5295e8e84b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/healinghaven"
  },
  {
    "name": "VerticalVision",
    "description": "Design tool for planning and optimizing vertical gardens in urban spaces, with AR visualization and automated maintenance schedules.",
    "imageUrl": "https://images.unsplash.com/photo-1518531933037-91b2f5f229cc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/verticalvision"
  },
  {
    "name": "EmojiVerse",
    "description": "VR/AR social platform where users interact using animated 3D emoji avatars with real-time expression mapping.",
    "imageUrl": "https://images.unsplash.com/photo-1633613286848-e6f43bbafb8d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/emojiverse"
  },
  {
    "name": "BubbleBuilder",
    "description": "Smart speech bubble and text placement tool using AI to optimize readability and flow while maintaining artistic composition.",
    "imageUrl": "https://images.unsplash.com/photo-1612036782180-6f0822045d23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bubblebuilder"
  },
  {
    "name": "BatchBot",
    "description": "Automated quality control system using computer vision and sensors to monitor beer production and detect issues early.",
    "imageUrl": "https://images.unsplash.com/photo-1436076863939-06870fe779c2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/batchbot"
  },
  {
    "name": "PartyPlanner",
    "description": "Group management tool with scheduling assistance, player feedback collection, and session preparation checklists.",
    "imageUrl": "https://images.unsplash.com/photo-1518791841217-8f162f1e1131?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/partyplanner"
  },
  {
    "name": "FlashFlow",
    "description": "Adaptive flashcard system that uses spaced repetition and memory science.",
    "imageUrl": "https://images.unsplash.com/photo-1513258496099-48168024aec0?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/flashflow"
  },
  {
    "name": "GameGear",
    "description": "Sports equipment marketplace with performance reviews and recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gamegear"
  },
  {
    "name": "PanelPerfect",
    "description": "Quality assurance tool for comics using AI to check for consistency errors, readability issues, and production requirements.",
    "imageUrl": "https://images.unsplash.com/photo-1588497859490-85d1c17db96d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/panelperfect"
  },
  {
    "name": "MicroProgress",
    "description": "Habit building app focusing on micro-commitments, breaking down large behavior changes into tiny, achievable steps with instant rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1484480974693-6ca0a78fb36b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/microprogress"
  },
  {
    "name": "BrewChain",
    "description": "Blockchain-based platform for tracking ingredient sourcing and authenticating craft beer production processes.",
    "imageUrl": "https://images.unsplash.com/photo-1505075106905-fb052892c116?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/brewchain"
  },
  {
    "name": "RhythmRoom",
    "description": "Virtual practice space with acoustic simulation and recording tools.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/rhythmroom"
  },
  {
    "name": "LeafLog",
    "description": "Digital plant journal with ML-powered growth tracking, care history, and predictive maintenance scheduling.",
    "imageUrl": "https://images.unsplash.com/photo-1462530260150-24a3e73dd6e6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/leaflog"
  },
  {
    "name": "VocalVerse",
    "description": "Voice-controlled storytelling platform that creates interactive narratives based on user voice input, with sound effects and character voices.",
    "imageUrl": "https://images.unsplash.com/photo-1519558260268-cde7e03a0152?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/vocalverse"
  },
  {
    "name": "MicroLoan",
    "description": "Peer-to-peer microlending platform for small business owners in developing regions.",
    "imageUrl": "https://images.unsplash.com/photo-1450101499163-c8848c66ca85?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/microloan"
  },
  {
    "name": "SkillShare",
    "description": "Social network focused on skill exchange and mentorship.",
    "imageUrl": "https://images.unsplash.com/photo-1522098635833-216c03d81fbe?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/skillshare"
  },
  {
    "name": "TimeThread",
    "description": "Narrative-driven game where players weave through different timelines, affecting past and future events through butterfly effect mechanics.",
    "imageUrl": "https://images.unsplash.com/photo-1518709268805-4e9042af9f23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/timethread"
  },
  {
    "name": "GreenPolicy",
    "description": "Policy impact simulator that models environmental and economic outcomes of different climate policies using real-world data.",
    "imageUrl": "https://images.unsplash.com/photo-1500534314209-a25ddb2bd429?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/greenpolicy"
  },
  {
    "name": "MindfulMinutes",
    "description": "Track your mindfulness and meditation sessions to boost productivity and well-being.",
    "imageUrl": "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindfulminutes"
  },
  {
    "name": "WasteLess",
    "description": "Food waste reduction app with recipe suggestions for leftover ingredients.",
    "imageUrl": "https://images.unsplash.com/photo-1495195134817-aeb325a55b65?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/wasteless"
  },
  {
    "name": "PetMemory",
    "description": "Pet photo and milestone tracking social platform.",
    "imageUrl": "https://images.unsplash.com/photo-1548767797-d8c844163c4c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petmemory"
  },
  {
    "name": "StoryWeave",
    "description": "Platform for sharing cultural narratives through interactive storytelling, combining traditional tales with modern media formats.",
    "imageUrl": "https://images.unsplash.com/photo-1516838226957-3ea5569c76e2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storyweave"
  },
  {
    "name": "DocDragon",
    "description": "Documentation generator with AI-powered code analysis and examples.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/docdragon"
  },
  {
    "name": "VideoVibe",
    "description": "Video editing tool with AI-powered transitions and effects.",
    "imageUrl": "https://images.unsplash.com/photo-1492691527719-9d1e07e534b4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/videovibe"
  },
  {
    "name": "SportSync",
    "description": "Social platform for athletes and sports enthusiasts.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sportsync"
  },
  {
    "name": "PropertyPro",
    "description": "Real estate investment analysis tool with market trends and ROI calculator.",
    "imageUrl": "https://images.unsplash.com/photo-1560518883-ce09059eeffa?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/propertypro"
  },
  {
    "name": "RoyaltyRoller",
    "description": "Music royalty tracking and distribution platform for artists.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/royaltyroller"
  },
  {
    "name": "SkillShare",
    "description": "Peer-to-peer skill exchange platform with video lessons and mentoring.",
    "imageUrl": "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/skillshare"
  },
  {
    "name": "SoundSense",
    "description": "Environmental sound monitoring and analysis platform.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundsense"
  },
  {
    "name": "EnergyEye",
    "description": "Home energy monitoring system with AI-powered optimization suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1473341304170-971dccb5ac1e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/energyeye"
  },
  {
    "name": "JokeGenius",
    "description": "AI-powered joke generator that creates personalized humor based on user preferences, context, and audience.",
    "imageUrl": "https://images.unsplash.com/photo-1543833175-43a3ef3f3eb6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/jokegenius"
  },
  {
    "name": "SpeedStrategy",
    "description": "Fast-paced multiplayer strategy game with 5-minute matches.",
    "imageUrl": "https://images.unsplash.com/photo-1511882150382-421056c89033?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/speedstrategy"
  },
  {
    "name": "StoryScape",
    "description": "AR-enhanced reading experience that brings books to life with 3D visualizations, ambient sounds, and interactive elements tied to the narrative.",
    "imageUrl": "https://images.unsplash.com/photo-1474932430478-367dbb6832c1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storyscape"
  },
  {
    "name": "GameFlow",
    "description": "Visual game flow mapping tool with player experience tracking and bottleneck identification using ML analysis.",
    "imageUrl": "https://images.unsplash.com/photo-1610890716171-6b1bb98ffd09?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gameflow"
  },
  {
    "name": "TextureTrail",
    "description": "Digital texture creation app with procedural generation and seamless pattern design capabilities.",
    "imageUrl": "https://images.unsplash.com/photo-1501084817091-a4f3d1d19e07?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/texturetrail"
  },
  {
    "name": "SecureShield",
    "description": "Security vulnerability scanner with automated fix implementation.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/secureshield"
  },
  {
    "name": "ReadingRadar",
    "description": "Predictive reading recommendation system that anticipates your next book based on mood, schedule, and life events.",
    "imageUrl": "https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/readingradar"
  },
  {
    "name": "EchoEnhance",
    "description": "Reverb and echo effect generator with room simulation.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/echoenhance"
  },
  {
    "name": "EmergencyPet",
    "description": "24/7 pet emergency service locator and assistance platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/emergencypet"
  },
  {
    "name": "PackPal",
    "description": "Smart packing assistant with weather-based suggestions and checklist.",
    "imageUrl": "https://images.unsplash.com/photo-1473625247510-8ceb1760943f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/packpal"
  },
  {
    "name": "GigGuide",
    "description": "Local music venue and performance opportunity finder for musicians.",
    "imageUrl": "https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gigguide"
  },
  {
    "name": "CompareCloud",
    "description": "Comparative data visualization platform for multiple datasets.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/comparecloud"
  },
  {
    "name": "MelodyMosaic",
    "description": "Collaborative platform for composing generative music pieces, allowing users to remix, layer, and evolve musical motifs in real time.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/melodymosaic"
  },
  {
    "name": "JokeVault",
    "description": "Secure storage and organization system for comedians to manage their material with version control and performance notes.",
    "imageUrl": "https://images.unsplash.com/photo-1527224857830-43a7acc85260?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/jokevault"
  },
  {
    "name": "LaughLearn",
    "description": "Educational platform teaching comedy writing with AI-powered feedback and interactive exercises.",
    "imageUrl": "https://images.unsplash.com/photo-1543833175-43a3ef3f3eb6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/laughlearn"
  },
  {
    "name": "CollabCreate",
    "description": "Real-time collaborative digital art platform where multiple artists can work on the same canvas simultaneously with version control.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/collabcreate"
  },
  {
    "name": "GameGuide",
    "description": "Sports rules and strategy learning platform with interactive tutorials.",
    "imageUrl": "https://images.unsplash.com/photo-1543351611-58f69d7c1781?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gameguide"
  },
  {
    "name": "NFTNest",
    "description": "All-in-one platform for creating, minting, and showcasing NFT artwork with built-in marketplace and community features.",
    "imageUrl": "https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/nftnest"
  },
  {
    "name": "SelfSync",
    "description": "Personal alignment tool for values, goals, and actions.",
    "imageUrl": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/selfsync"
  },
  {
    "name": "WaterWise",
    "description": "Hydration tracking with smart reminders and beautiful visualizations of daily water intake.",
    "imageUrl": "https://images.unsplash.com/photo-1548839140-29a749e1cf4d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/waterwise"
  },
  {
    "name": "PlatePresent",
    "description": "Food plating and presentation guide with photography tips.",
    "imageUrl": "https://images.unsplash.com/photo-1466637574441-749b8f19452f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/platepresent"
  },
  {
    "name": "PlantPal",
    "description": "AI-powered plant identification and care assistant using computer vision to diagnose plant health issues and provide personalized care recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/plantpal"
  },
  {
    "name": "CalendarCanvas",
    "description": "A creative calendar app that lets you paint your schedule and visualize your time.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/calendarcanvas"
  },
  {
    "name": "MimeMaster",
    "description": "AR-enhanced charades game with motion tracking, real-time scoring, and AI-generated creative prompts for players.",
    "imageUrl": "https://images.unsplash.com/photo-1529156069898-49953e39b3ac?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mimemaster"
  },
  {
    "name": "ClusterCraft",
    "description": "Data clustering and segmentation analysis platform.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/clustercraft"
  },
  {
    "name": "QuizQuest",
    "description": "Personalized quiz generator that adapts to your learning style and progress.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/quizquest"
  },
  {
    "name": "KaraokeKing",
    "description": "Social karaoke app with duet features and virtual singing competitions.",
    "imageUrl": "https://images.unsplash.com/photo-1516450360452-9312f5e86fc7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/karaokeking"
  },
  {
    "name": "EcoEvents",
    "description": "Sustainable event planning and zero-waste venue directory.",
    "imageUrl": "https://images.unsplash.com/photo-1511632765486-a01980e01a18?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecoevents"
  },
  {
    "name": "SceneSwapAR",
    "description": "AR filter app that transforms your environment with dynamic backgrounds, weather effects, and interactive 3D objects.",
    "imageUrl": "https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sceneswapar"
  },
  {
    "name": "SoundSync",
    "description": "Multi-device audio synchronization system for events.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundsync"
  },
  {
    "name": "ClimateConnect",
    "description": "Climate change education platform with local action initiatives.",
    "imageUrl": "https://images.unsplash.com/photo-1497436072909-60f360e1d4b1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/climateconnect"
  },
  {
    "name": "AudioAlchemy",
    "description": "AI-powered audio enhancement and restoration platform.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/audioalchemy"
  },
  {
    "name": "SoundScape",
    "description": "Music creation tool with AI-assisted composition and arrangement.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundscape"
  },
  {
    "name": "SpaceShare",
    "description": "Community space and facility sharing coordination platform.",
    "imageUrl": "https://images.unsplash.com/photo-1517048676732-d65bc937f952?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/spaceshare"
  },
  {
    "name": "ChefBattle",
    "description": "Competitive cooking game with real recipes and time management.",
    "imageUrl": "https://images.unsplash.com/photo-1466637574441-749b8f19452f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/chefbattle"
  },
  {
    "name": "ExpenseExpert",
    "description": "Business expense management with receipt OCR and report automation.",
    "imageUrl": "https://images.unsplash.com/photo-1450101499163-c8848c66ca85?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/expenseexpert"
  },
  {
    "name": "GardenGuard",
    "description": "Smart garden management system with automated watering and plant health monitoring.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gardenguard"
  },
  {
    "name": "ProjectPulse",
    "description": "Monitor your project's health and progress with real-time dashboards and alerts.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/projectpulse"
  },
  {
    "name": "VetVirtual",
    "description": "24/7 virtual veterinary consultation and pet health tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1548767797-d8c844163c4c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/vetvirtual"
  },
  {
    "name": "ClimateConnect",
    "description": "Collaborative platform for scientists and researchers to share climate data, models, and findings with interactive visualization tools.",
    "imageUrl": "https://images.unsplash.com/photo-1500534314209-a25ddb2bd429?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/climateconnect"
  },
  {
    "name": "ErrorEye",
    "description": "Error monitoring and analysis platform with automatic categorization.",
    "imageUrl": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/erroreye"
  },
  {
    "name": "AncestralAI",
    "description": "Smart genealogy research assistant that uses machine learning to identify patterns and connections in historical records and family data.",
    "imageUrl": "https://images.unsplash.com/photo-1494172961521-33799ddd43a5?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ancestralai"
  },
  {
    "name": "TimeTransform",
    "description": "Time-based habit formation app that analyzes your daily schedule and suggests habit stacking opportunities based on existing routines.",
    "imageUrl": "https://images.unsplash.com/photo-1484480974693-6ca0a78fb36b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/timetransform"
  },
  {
    "name": "PensionPal",
    "description": "Pension fund tracker with performance analysis and rebalancing alerts.",
    "imageUrl": "https://images.unsplash.com/photo-1450101499163-c8848c66ca85?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pensionpal"
  },
  {
    "name": "HopMatch",
    "description": "AI-powered recipe development tool that suggests hop combinations and brewing parameters based on desired flavor profiles.",
    "imageUrl": "https://images.unsplash.com/photo-1518176258769-f227c798150e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/hopmatch"
  },
  {
    "name": "BudgetBuddy",
    "description": "AI-powered personal finance assistant with predictive spending insights.",
    "imageUrl": "https://images.unsplash.com/photo-1450101499163-c8848c66ca85?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/budgetbuddy"
  },
  {
    "name": "WealthWise",
    "description": "Holistic wealth management platform with multi-asset portfolio tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1579621970563-ebec7560ff3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/wealthwise"
  },
  {
    "name": "LocalLoop",
    "description": "Community marketplace for buying, selling, and sharing locally.",
    "imageUrl": "https://images.unsplash.com/photo-1559027615-cd4628902d4a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/localloop"
  },
  {
    "name": "PortfolioAI",
    "description": "Smart portfolio curator using AI to select your best work and organize it for different client types and platforms.",
    "imageUrl": "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/portfolioai"
  },
  {
    "name": "TeamTalk",
    "description": "Team communication and collaboration platform with play sharing.",
    "imageUrl": "https://images.unsplash.com/photo-1577471721003-13ab5e422b7d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/teamtalk"
  },
  {
    "name": "MakerMeet",
    "description": "Community platform organizing local maker meetups, skill-sharing events, and collaborative craft projects.",
    "imageUrl": "https://images.unsplash.com/photo-1452860606245-08befc0ff44b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/makermeet"
  },
  {
    "name": "StressShield",
    "description": "Workplace mental health platform offering stress management tools, anonymous peer support, and professional guidance for maintaining work-life balance.",
    "imageUrl": "https://images.unsplash.com/photo-1573495627361-d9b87960b12d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/stressshield"
  },
  {
    "name": "RecipeVault",
    "description": "Family recipe preservation platform with story sharing and collaboration.",
    "imageUrl": "https://images.unsplash.com/photo-1466637574441-749b8f19452f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/recipevault"
  },
  {
    "name": "MarketMind",
    "description": "Market analysis and competitive intelligence platform.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/marketmind"
  },
  {
    "name": "SolarSense",
    "description": "Solar panel optimization tool with real-time energy production tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1509391366360-2e959784a276?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/solarsense"
  },
  {
    "name": "TabTrainer",
    "description": "Guitar tablature learning platform with synchronized video lessons.",
    "imageUrl": "https://images.unsplash.com/photo-1514320291840-2e0a9bf2a9ae?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/tabtrainer"
  },
  {
    "name": "LocalLink",
    "description": "Hyperlocal social network for neighborhood connections.",
    "imageUrl": "https://images.unsplash.com/photo-1522098635833-216c03d81fbe?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/locallink"
  },
  {
    "name": "LaughTrack",
    "description": "Analytics platform for comedians to test and refine jokes with audience reaction tracking and timing optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1527224857830-43a7acc85260?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/laughtrack"
  },
  {
    "name": "RoutineRhythm",
    "description": "Build and maintain daily routines with music and rhythm-based reminders.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/routinerhythm"
  },
  {
    "name": "BioCycle",
    "description": "Community composting network and organic waste management system.",
    "imageUrl": "https://images.unsplash.com/photo-1495195134817-aeb325a55b65?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/biocycle"
  },
  {
    "name": "ArtAcademy",
    "description": "Digital art tutorials with real-time feedback and progression tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/artacademy"
  },
  {
    "name": "FlowForce",
    "description": "Process and workflow visualization tool with animation features.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/flowforce"
  },
  {
    "name": "PredictPro",
    "description": "Predictive analytics tool with machine learning model integration.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/predictpro"
  },
  {
    "name": "VoxelVerse",
    "description": "A voxel-based 3D world builder and explorer, enabling users to create, share, and interact with blocky environments online.",
    "imageUrl": "https://images.unsplash.com/photo-1519389950473-47ba0277781c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/voxelverse"
  },
  {
    "name": "PetRescue",
    "description": "Network connecting animal shelters with potential adopters and volunteers.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petrescue"
  },
  {
    "name": "CultureQuest",
    "description": "Cultural experience finder with local events and authentic activities.",
    "imageUrl": "https://images.unsplash.com/photo-1523906834658-6e24ef2386f9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/culturequest"
  },
  {
    "name": "GrowGuide",
    "description": "Smart urban gardening assistant using AI to provide personalized plant care advice, pest identification, and growth tracking for small-space gardens.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/growguide"
  },
  {
    "name": "EcoImpact",
    "description": "Personal carbon footprint tracker with suggestions for reducing environmental impact.",
    "imageUrl": "https://images.unsplash.com/photo-1497436072909-60f360e1d4b1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecoimpact"
  },
  {
    "name": "PomodoroPal",
    "description": "A playful Pomodoro timer with customizable themes and productivity stats.",
    "imageUrl": "https://images.unsplash.com/photo-1509228468518-180dd4864904?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pomodoropal"
  },
  {
    "name": "SoundScape",
    "description": "Ambient music generator with mood-based composition algorithms.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundscape"
  },
  {
    "name": "SoundStage",
    "description": "Virtual concert platform with ticketing and live streaming features.",
    "imageUrl": "https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundstage"
  },
  {
    "name": "QuoteQuest",
    "description": "Social platform for sharing and discovering book quotes with AI-powered context analysis and emotional impact tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1507842217343-583bb7270b66?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/quotequest"
  },
  {
    "name": "ParentPulse",
    "description": "Social platform for parents with playdate coordination and advice sharing.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/parentpulse"
  },
  {
    "name": "InteractIQ",
    "description": "Interactive data visualization with gesture and voice control.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/interactiq"
  },
  {
    "name": "TriviaVerse",
    "description": "VR experience where players explore virtual museums filled with interactive exhibits about the world's strangest facts.",
    "imageUrl": "https://images.unsplash.com/photo-1456081445129-830eb8d4bfc6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/triviaverse"
  },
  {
    "name": "DreamDrift",
    "description": "Mindfulness app for better sleep, combining sleep stories, meditation, and gentle wake-up experiences.",
    "imageUrl": "https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/dreamdrift"
  },
  {
    "name": "LoanLens",
    "description": "Loan comparison and management platform with refinancing alerts.",
    "imageUrl": "https://images.unsplash.com/photo-1554224154-26032ffc0d07?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/loanlens"
  },
  {
    "name": "WaterWise",
    "description": "Smart watering system that optimizes irrigation schedules based on plant type, soil conditions, and weather forecasts.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/waterwise"
  },
  {
    "name": "ReadRecall",
    "description": "Memory enhancement tool that generates personalized quizzes and summaries based on your reading history using spaced repetition.",
    "imageUrl": "https://images.unsplash.com/photo-1507842217343-583bb7270b66?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/readrecall"
  },
  {
    "name": "MindfulMeals",
    "description": "Practice mindful eating with timed meal sessions and awareness exercises.",
    "imageUrl": "https://images.unsplash.com/photo-1498837167922-ddd27525d352?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindfulmeals"
  },
  {
    "name": "WasteNot",
    "description": "Food waste reduction app connecting surplus food with local communities.",
    "imageUrl": "https://images.unsplash.com/photo-1495195134817-aeb325a55b65?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/wastenot"
  },
  {
    "name": "SleepSync",
    "description": "Smart sleep optimization app that uses biometric data and environmental sensors to create perfect sleeping conditions and wake cycles.",
    "imageUrl": "https://images.unsplash.com/photo-1465929639680-64ee080eb3ed?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sleepsync"
  },
  {
    "name": "CollabCloud",
    "description": "Unified remote collaboration and project management suite.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/collabcloud"
  },
  {
    "name": "GameForge",
    "description": "AI-assisted board game design platform with balance testing simulation, rule optimization, and player engagement prediction.",
    "imageUrl": "https://images.unsplash.com/photo-1610890716171-6b1bb98ffd09?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gameforge"
  },
  {
    "name": "BrainBridge",
    "description": "Cross-platform knowledge synchronization tool that maintains consistent information across note-taking apps and knowledge management systems.",
    "imageUrl": "https://images.unsplash.com/photo-1516321165247-4aa89a48be28?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/brainbridge"
  },
  {
    "name": "PlayPro",
    "description": "Sports skill development tracking with video analysis and feedback.",
    "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/playpro"
  },
  {
    "name": "EcoHome",
    "description": "Smart home sustainability assistant with automated energy management.",
    "imageUrl": "https://images.unsplash.com/photo-1558449028-b53a39d100fc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecohome"
  },
  {
    "name": "PlayTest",
    "description": "Virtual playtesting platform with AI players, real-time analytics, and feedback collection from remote playtesters.",
    "imageUrl": "https://images.unsplash.com/photo-1611996575749-79a3a250f948?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/playtest"
  },
  {
    "name": "MeetingMinder",
    "description": "Smart meeting scheduler that finds the best time for everyone and sends reminders with a friendly vibe.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/meetingminder"
  },
  {
    "name": "TaxTracker",
    "description": "Year-round tax optimization with receipt scanning and deduction finder.",
    "imageUrl": "https://images.unsplash.com/photo-1554224154-26032ffc0d07?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/taxtracker"
  },
  {
    "name": "RecipeRover",
    "description": "AI-powered recipe recommendation engine based on available ingredients.",
    "imageUrl": "https://images.unsplash.com/photo-1466637574441-749b8f19452f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/reciperover"
  },
  {
    "name": "SoundSpace",
    "description": "3D audio environment creator for immersive experiences.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundspace"
  },
  {
    "name": "MemeAI",
    "description": "Advanced AI system that generates original meme concepts by analyzing current events and social trends.",
    "imageUrl": "https://images.unsplash.com/photo-1531259683007-016a7b628fc3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/memeai"
  },
  {
    "name": "GreenCommute",
    "description": "Sustainable transportation planner with emissions comparison and rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1507035895480-2b3156c31fc8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/greencommute"
  },
  {
    "name": "CultureConnect",
    "description": "Remote team culture building and engagement platform.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/cultureconnect"
  },
  {
    "name": "JokeJudge",
    "description": "AI system that evaluates joke quality and potential audience reception across different demographics.",
    "imageUrl": "https://images.unsplash.com/photo-1527224857830-43a7acc85260?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/jokejudge"
  },
  {
    "name": "SpellCrafter",
    "description": "Magic dueling game with gesture-based spell casting mechanics.",
    "imageUrl": "https://images.unsplash.com/photo-1518709268805-4e9042af9f23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/spellcrafter"
  },
  {
    "name": "PlantDoc",
    "description": "Plant health diagnostic tool using AI to analyze photos and sensor data, providing treatment recommendations and pest control solutions.",
    "imageUrl": "https://images.unsplash.com/photo-1462530260150-24a3e73dd6e6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/plantdoc"
  },
  {
    "name": "InkInsight",
    "description": "Analytics platform for digital comics tracking reader engagement, panel timing, and emotional responses to optimize storytelling.",
    "imageUrl": "https://images.unsplash.com/photo-1588497859490-85d1c17db96d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/inkinsight"
  },
  {
    "name": "PrecisionPlanner",
    "description": "AI-powered activity planner that optimizes outdoor schedules based on detailed weather forecasts and user preferences.",
    "imageUrl": "https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/precisionplanner"
  },
  {
    "name": "MetricMaster",
    "description": "Development metrics and team productivity analytics platform.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/metricmaster"
  },
  {
    "name": "PosturePal",
    "description": "Desktop app that uses computer vision to monitor and correct posture in real-time.",
    "imageUrl": "https://images.unsplash.com/photo-1518611012118-696072aa579a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/posturepal"
  },
  {
    "name": "PowerPulse",
    "description": "Energy monitoring and optimization platform with appliance-level tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1473341304170-971dccb5ac1e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/powerpulse"
  },
  {
    "name": "DreamScape",
    "description": "VR-enhanced dream visualization tool that helps users recreate and explore their dreams in immersive 3D environments.",
    "imageUrl": "https://images.unsplash.com/photo-1541781774459-bb2af2f05b55?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/dreamscape"
  },
  {
    "name": "FactFusion",
    "description": "AI-powered weird fact generator that combines verified historical data to create mind-bending but true connections and coincidences.",
    "imageUrl": "https://images.unsplash.com/photo-1456081445129-830eb8d4bfc6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/factfusion"
  },
  {
    "name": "MapMaster",
    "description": "Geographic data visualization with interactive mapping features.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mapmaster"
  },
  {
    "name": "QuickConnect",
    "description": "Instant peer-to-peer video and voice chat app with no sign-up required, using QR codes for secure, ephemeral connections.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/quickconnect"
  },
  {
    "name": "AudioArchive",
    "description": "Audio file management system with metadata organization and backup.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/audioarchive"
  },
  {
    "name": "SoundSanctuary",
    "description": "Personalized sound therapy app combining nature sounds, binaural beats, and guided meditations for deep relaxation.",
    "imageUrl": "https://images.unsplash.com/photo-1519167758481-83f550bb49b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/soundsanctuary"
  },
  {
    "name": "AudioArtist",
    "description": "Sound visualization and audio art creation platform.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/audioartist"
  },
  {
    "name": "GlobalGourmet",
    "description": "International recipe explorer with ingredient substitution suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1498837167922-ddd27525d352?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/globalgourmet"
  },
  {
    "name": "TasteTracker",
    "description": "Personal food diary with taste preference analysis and restaurant recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1466637574441-749b8f19452f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/tastetracker"
  },
  {
    "name": "GratitudeGarden",
    "description": "Virtual garden that grows based on daily gratitude practices, combining mindfulness with visual growth tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gratitudegarden"
  },
  {
    "name": "RestoreRhythm",
    "description": "Personalized recovery tracking for athletes with smart rest recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1517838277536-f5f99be501cd?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/restorerhythm"
  },
  {
    "name": "MediaMaster",
    "description": "Smart entertainment system with multi-room audio and personalized content.",
    "imageUrl": "https://images.unsplash.com/photo-1522869635100-9f4c5e86aa37?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mediamaster"
  },
  {
    "name": "CodeCompanion",
    "description": "AI-powered code review and suggestion tool with best practice enforcement.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/codecompanion"
  },
  {
    "name": "RuleRealm",
    "description": "Dynamic rule reference system with AI-powered interpretation assistance and house rule management.",
    "imageUrl": "https://images.unsplash.com/photo-1614682835402-c2394a7d1b3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/rulerealm"
  },
  {
    "name": "FestivalFinder",
    "description": "App that helps users discover and experience cultural festivals worldwide, with virtual participation options, live streaming, and interactive cultural workshops.",
    "imageUrl": "https://images.unsplash.com/photo-1514525253161-7a46d19cd819?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/festivalfinder"
  },
  {
    "name": "SecuritySense",
    "description": "Smart security system with facial recognition and unusual activity detection.",
    "imageUrl": "https://images.unsplash.com/photo-1558002038-1055907df827?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/securitysense"
  },
  {
    "name": "VoiceValet",
    "description": "Personalized voice assistant that learns your habits and preferences, featuring custom wake words and contextual awareness for home and work environments.",
    "imageUrl": "https://images.unsplash.com/photo-1519558260268-cde7e03a0152?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/voicevalet"
  },
  {
    "name": "HomeHarmony",
    "description": "AI-powered home automation system with personalized routines and energy optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1558449028-b53a39d100fc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/homeharmony"
  },
  {
    "name": "TaskTide",
    "description": "Remote work productivity tracking and optimization platform.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/tasktide"
  },
  {
    "name": "MicroMerchant",
    "description": "Trading simulation game set in a tiny fantasy marketplace, with unique economics system and character relationships.",
    "imageUrl": "https://images.unsplash.com/photo-1550745165-9bc0b252726f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/micromerchant"
  },
  {
    "name": "IconIQ",
    "description": "Icon design and management tool with style consistency features.",
    "imageUrl": "https://images.unsplash.com/photo-1517697471339-4aa32003c11a?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/iconiq"
  },
  {
    "name": "TreeTraverse",
    "description": "Hierarchical data visualization with interactive tree diagrams.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/treetraverse"
  },
  {
    "name": "UrbanUnlock",
    "description": "City exploration game with challenges and local business rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1480714378408-67cf0d13bc1b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/urbanunlock"
  },
  {
    "name": "ComicCraft",
    "description": "Comic creation platform with panel layouts and character design tools.",
    "imageUrl": "https://images.unsplash.com/photo-1588497859490-85d1c17db96d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/comiccraft"
  },
  {
    "name": "CommunityCore",
    "description": "Neighborhood decision-making and voting platform for local initiatives.",
    "imageUrl": "https://images.unsplash.com/photo-1517048676732-d65bc937f952?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/communitycore"
  },
  {
    "name": "RecoverRight",
    "description": "Recovery optimization tool with sleep analysis and nutrition recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1517838277536-f5f99be501cd?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/recoverright"
  },
  {
    "name": "TeachTogether",
    "description": "Platform for teachers to collaborate and share lesson plans and resources.",
    "imageUrl": "https://images.unsplash.com/photo-1524178232363-1fb2b075b655?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/teachtogether"
  },
  {
    "name": "GreenGardens",
    "description": "Urban gardening platform with water-efficient planting recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1466692476868-aef1dfb1e735?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/greengardens"
  },
  {
    "name": "CuriosityCache",
    "description": "Daily digest of weird facts personalized to your interests, with ML-powered connections to related unusual phenomena.",
    "imageUrl": "https://images.unsplash.com/photo-1516321497487-e288fb19713f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/curiositycache"
  },
  {
    "name": "MemeStudio",
    "description": "Professional meme editing suite with AI-assisted image manipulation, text placement, and format optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1531259683007-016a7b628fc3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/memestudio"
  },
  {
    "name": "VocalVitals",
    "description": "Health monitoring app that analyzes voice patterns to detect early signs of stress, fatigue, and potential health issues.",
    "imageUrl": "https://images.unsplash.com/photo-1519558260268-cde7e03a0152?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/vocalvitals"
  },
  {
    "name": "SleepSphere",
    "description": "Holistic sleep improvement platform combining meditation, white noise, and sleep tracking with circadian rhythm optimization.",
    "imageUrl": "https://images.unsplash.com/photo-1465929639680-64ee080eb3ed?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sleepsphere"
  },
  {
    "name": "QuestForge",
    "description": "AI-powered quest generation system that creates dynamic storylines based on player choices and campaign history.",
    "imageUrl": "https://images.unsplash.com/photo-1614682835402-c2394a7d1b3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/questforge"
  },
  {
    "name": "GraphicGuru",
    "description": "Automated infographic generator with customizable design elements.",
    "imageUrl": "https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/graphicguru"
  },
  {
    "name": "TriviaTime",
    "description": "Adaptive trivia game that learns your interests and generates increasingly bizarre but true fact chains and connections.",
    "imageUrl": "https://images.unsplash.com/photo-1456081445129-830eb8d4bfc6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/triviatime"
  },
  {
    "name": "SketchSync",
    "description": "Cross-platform digital sketching app that synchronizes your artwork across devices with cloud-based collaboration tools.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sketchsync"
  },
  {
    "name": "ComicCraft",
    "description": "All-in-one comic creation suite with AI-assisted storyboarding, character design, and publishing tools.",
    "imageUrl": "https://images.unsplash.com/photo-1612036782180-6f0822045d23?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/comiccraft"
  },
  {
    "name": "BinauralBuilder",
    "description": "3D audio experience creator for meditation and relaxation.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/binauralbuilder"
  },
  {
    "name": "PetPortal",
    "description": "All-in-one pet service provider marketplace and booking system.",
    "imageUrl": "https://images.unsplash.com/photo-1548767797-d8c844163c4c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/petportal"
  },
  {
    "name": "RitualRealm",
    "description": "Interactive documentation of cultural rituals and ceremonies worldwide, with VR experiences and expert cultural insights.",
    "imageUrl": "https://images.unsplash.com/photo-1544161515-4ab6ce6db874?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ritualrealm"
  },
  {
    "name": "FocusFlow",
    "description": "Mindful productivity app that integrates meditation breaks with work sessions, using AI to suggest optimal break timing.",
    "imageUrl": "https://images.unsplash.com/photo-1489533119213-66a5cd877091?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/focusflow"
  },
  {
    "name": "PixelPro",
    "description": "AI-powered image editing tool with creative style transfer and filters.",
    "imageUrl": "https://images.unsplash.com/photo-1513364776144-60967b0f800f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pixelpro"
  },
  {
    "name": "QuizNight",
    "description": "Virtual pub quiz platform with live hosts and team competition features.",
    "imageUrl": "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/quiznight"
  },
  {
    "name": "MysteryMansion",
    "description": "Social deduction game set in procedurally generated haunted houses.",
    "imageUrl": "https://images.unsplash.com/photo-1519074069444-1ba4fff66d16?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mysterymansion"
  },
  {
    "name": "MemeCollab",
    "description": "Real-time collaborative meme creation platform with version control and remix tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1531259683007-016a7b628fc3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/memecollab"
  },
  {
    "name": "MockMaster",
    "description": "Automated mock data generation and API simulation platform.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mockmaster"
  },
  {
    "name": "RenewableRoute",
    "description": "Renewable energy installation planning tool with ROI calculator.",
    "imageUrl": "https://images.unsplash.com/photo-1509391366360-2e959784a276?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/renewableroute"
  },
  {
    "name": "EcoScore",
    "description": "Product sustainability rating system with barcode scanning.",
    "imageUrl": "https://images.unsplash.com/photo-1472851294608-062f824d29cc?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ecoscore"
  },
  {
    "name": "CodeClimate",
    "description": "Code quality and maintainability analyzer with refactoring suggestions.",
    "imageUrl": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/codeclimate"
  },
  {
    "name": "ModelMaker",
    "description": "3D modeling tool with intuitive gestures and AR preview.",
    "imageUrl": "https://images.unsplash.com/photo-1515630278258-407f66498911?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/modelmaker"
  },
  {
    "name": "EnergyEcho",
    "description": "Track your energy levels throughout the day and get personalized productivity tips.",
    "imageUrl": "https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/energyecho"
  },
  {
    "name": "PerfPilot",
    "description": "Performance monitoring and optimization tool with actionable insights.",
    "imageUrl": "https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/perfpilot"
  },
  {
    "name": "ZooTycoon",
    "description": "Virtual zoo management game with realistic animal behaviors.",
    "imageUrl": "https://images.unsplash.com/photo-1534567153574-2b12153a87f0?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/zootycoon"
  },
  {
    "name": "BreathBalance",
    "description": "Advanced breathing exercise app with AR visualization of breath patterns and real-time feedback on technique.",
    "imageUrl": "https://images.unsplash.com/photo-1506126613408-eca07ce68773?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/breathbalance"
  },
  {
    "name": "MusicMaster",
    "description": "Interactive music theory and instrument learning with real-time feedback.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/musicmaster"
  },
  {
    "name": "ConfigCraft",
    "description": "Configuration management tool with environment synchronization.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/configcraft"
  },
  {
    "name": "WeatherWatch",
    "description": "Smart home integration app that automatically adjusts home settings based on current and forecasted weather conditions.",
    "imageUrl": "https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/weatherwatch"
  },
  {
    "name": "PixelPirates",
    "description": "Retro-style multiplayer pirate adventure with ship battles and treasure hunts.",
    "imageUrl": "https://images.unsplash.com/photo-1534447677768-be436bb09401?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pixelpirates"
  },
  {
    "name": "GivingLoop",
    "description": "Platform for recurring micro-donations to verified charitable causes.",
    "imageUrl": "https://images.unsplash.com/photo-1532629345422-7515f3d16bb6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/givingloop"
  },
  {
    "name": "PhotoPilgrim",
    "description": "Photography location finder with optimal shooting times and conditions.",
    "imageUrl": "https://images.unsplash.com/photo-1452587925148-ce544e77e70d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/photopilgrim"
  },
  {
    "name": "HumorHub",
    "description": "Social platform for sharing and discovering jokes with smart categorization and personalized recommendations.",
    "imageUrl": "https://images.unsplash.com/photo-1543833175-43a3ef3f3eb6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/humorhub"
  },
  {
    "name": "StoryVerse",
    "description": "Interactive storytelling platform where readers influence the narrative direction.",
    "imageUrl": "https://images.unsplash.com/photo-1456513080510-7bf3a84b82f8?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/storyverse"
  },
  {
    "name": "HabitatHero",
    "description": "Wildlife habitat preservation tracking and donation platform.",
    "imageUrl": "https://images.unsplash.com/photo-1500829243541-74b677fecc30?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/habitathero"
  },
  {
    "name": "CauseConnect",
    "description": "Social platform for connecting activists and social causes.",
    "imageUrl": "https://images.unsplash.com/photo-1516251193007-45ef944ab0c6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/causeconnect"
  },
  {
    "name": "EncounterEngine",
    "description": "Battle scenario creator with balanced enemy scaling, terrain effects, and dynamic difficulty adjustment.",
    "imageUrl": "https://images.unsplash.com/photo-1614682835402-c2394a7d1b3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/encounterengine"
  },
  {
    "name": "HydroHelper",
    "description": "Hydroponic system management app for urban farmers, with automated nutrient monitoring and system maintenance alerts.",
    "imageUrl": "https://images.unsplash.com/photo-1558985250-27a406d64cb3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/hydrohelper"
  },
  {
    "name": "MusicMingle",
    "description": "Social platform for discovering and sharing music with virtual listening parties.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/musicmingle"
  },
  {
    "name": "FreqFlow",
    "description": "Frequency analysis and equalization tool for audio engineers.",
    "imageUrl": "https://images.unsplash.com/photo-1511379938547-c1f69419868d?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/freqflow"
  },
  {
    "name": "AbsurdityEngine",
    "description": "A simulator that generates bizarre, AI-driven scenarios for users to navigate, encouraging creative problem-solving and laughter.",
    "imageUrl": "https://images.unsplash.com/photo-1509228468518-180dd4864904?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/absurdityengine"
  },
  {
    "name": "EthicalEats",
    "description": "Restaurant finder highlighting sustainable and ethical food practices.",
    "imageUrl": "https://images.unsplash.com/photo-1466637574441-749b8f19452f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ethicaleats"
  },
  {
    "name": "ClimateForecast",
    "description": "Advanced climate modeling app that combines multiple data sources to create hyperlocal long-term climate predictions and adaptation strategies.",
    "imageUrl": "https://images.unsplash.com/photo-1500534314209-a25ddb2bd429?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/climateforecast"
  },
  {
    "name": "CreativeCore",
    "description": "Creativity development platform with exercises and challenges.",
    "imageUrl": "https://images.unsplash.com/photo-1499750310107-5fef28a66643?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/creativecore"
  },
  {
    "name": "GriefGuide",
    "description": "Supportive platform for those experiencing loss, with personalized grief counseling, memorial sharing, and connection with others on similar journeys.",
    "imageUrl": "https://images.unsplash.com/photo-1469571486292-b5295e8e84b3?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/griefguide"
  },
  {
    "name": "BreakBuddy",
    "description": "Reminds you to take healthy breaks and suggests quick activities to recharge your mind.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/breakbuddy"
  },
  {
    "name": "TimeGarden",
    "description": "Grow a virtual garden as you complete tasks and stay productive throughout the day.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/timegarden"
  },
  {
    "name": "PacePartner",
    "description": "Running companion app with adaptive training plans and real-time coaching.",
    "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pacepartner"
  },
  {
    "name": "TeamTravel",
    "description": "Sports team travel coordination and logistics management platform.",
    "imageUrl": "https://images.unsplash.com/photo-1436491865332-7a61a109cc05?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/teamtravel"
  },
  {
    "name": "FreshFleet",
    "description": "IoT-enabled cold chain monitoring system for local food delivery vehicles, ensuring temperature control and real-time quality tracking.",
    "imageUrl": "https://images.unsplash.com/photo-1542838132-92c53300491e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/freshfleet"
  },
  {
    "name": "QuickCapture",
    "description": "Instantly capture notes, links, and ideas with a single click and organize them later.",
    "imageUrl": "https://images.unsplash.com/photo-1464983953574-0892a716854b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/quickcapture"
  },
  {
    "name": "CardioCoach",
    "description": "Heart rate zone training with personalized cardio programming.",
    "imageUrl": "https://images.unsplash.com/photo-1461896836934-ffe607ba8211?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/cardiocoach"
  },
  {
    "name": "FlavorFusion",
    "description": "Recipe mashup generator combining different cuisines and cooking styles.",
    "imageUrl": "https://images.unsplash.com/photo-1466637574441-749b8f19452f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/flavorfusion"
  },
  {
    "name": "BodyBalance",
    "description": "Body composition tracking with 3D scanning and progress photos.",
    "imageUrl": "https://images.unsplash.com/photo-1517836357463-d25dfeac3438?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/bodybalance"
  },
  {
    "name": "MindfulMoments",
    "description": "Daily meditation and mindfulness exercises with mood tracking and guided breathing sessions.",
    "imageUrl": "https://images.unsplash.com/photo-1506126613408-eca07ce68773?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindfulmoments"
  },
  {
    "name": "BehaviorBuddy",
    "description": "Pet behavior analysis and training assistance platform.",
    "imageUrl": "https://images.unsplash.com/photo-1516734212186-a967f81ad0d7?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/behaviorbuddy"
  },
  {
    "name": "DataDimension",
    "description": "3D data visualization platform for complex datasets.",
    "imageUrl": "https://images.unsplash.com/photo-1460925895917-afdab827c52f?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/datadimension"
  },
  {
    "name": "GearGuide",
    "description": "Music equipment marketplace with sound sample previews.",
    "imageUrl": "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/gearguide"
  },
  {
    "name": "FocusFlow",
    "description": "A distraction blocker that uses AI to detect when you're losing focus and gently nudges you back on track.",
    "imageUrl": "https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/focusflow"
  },
  {
    "name": "SleepSage",
    "description": "Smart sleep tracking with personalized recommendations and calming bedtime routines.",
    "imageUrl": "https://images.unsplash.com/photo-1511068797325-6083f0f872b1?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/sleepsage"
  }
]

--- File: eslint.config.mjs ---

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    ignores: [
      ".next/**/*",
      "test-results/**/*",
      "tests-examples/**/*",
      "tests/**/*",
      "coverage/**/*",
      "dist/**/*",
      "build/**/*",
      "**/node_modules/**/*",
      "**/*.min.js",
      "**/*.bundle.js"
    ],
    rules: {
      // Disable noisy rules
      "@typescript-eslint/no-this-alias": "off",
      
      // Enable max-lines rule
      "max-lines": ["error", {
        max: 500,
        skipBlankLines: true,
        skipComments: true
      }]
    }
  }
];

export default eslintConfig;


--- File: lib/auth-utils.ts ---

import { auth } from "@clerk/nextjs/server";
import { redirect } from "next/navigation";

export function isClerkConfigured(): boolean {
  return Boolean(process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY && process.env.CLERK_SECRET_KEY);
}

export function isAdminConfigured(): boolean {
  return Boolean(process.env.ADMIN_USER_IDS);
}

export function isDev(): boolean {
  return process.env.NODE_ENV === "development";
}

/**
 * Checks if a user is an admin
 * @param userId - Optional user ID to check. If not provided, checks the current user.
 * @returns Promise<boolean> - True if the user is an admin, false otherwise
 */
export async function isAdmin(userId?: string): Promise<boolean> {
  try {
    // If userId is not provided, get the current user's ID
    let userIdToCheck = userId;
    
    if (!userIdToCheck) {
      const { userId: currentUserId } = await auth();
      userIdToCheck = currentUserId || undefined;
    }
    
    // If no user is authenticated, they're not an admin
    if (!userIdToCheck) {
      return false;
    }
    
    // Get the list of admin user IDs from environment variables
    const adminUserIds = process.env.ADMIN_USER_IDS?.split(",") || [];
    
    // Check if the user's ID is in the admin list
    return adminUserIds.includes(userIdToCheck);
  } catch (error) {
    console.error("Error checking admin status:", error);
    return false;
  }
}

/**
 * Checks if the provided user ID is an admin
 * @param userId - The user ID to check
 * @returns boolean - True if the user is an admin, false otherwise
 */
export function isUserAdmin(userId: string | null): boolean {
  if (!userId) {
    return false;
  }
  
  // Get the list of admin user IDs from environment variables
  const adminUserIds = process.env.ADMIN_USER_IDS?.split(",") || [];
  
  // Check if the provided user ID is in the admin list
  return adminUserIds.includes(userId);
}

export type AdminCheckResult = {
  isAdmin: boolean
  userId: string | null
  requiresSetup: boolean
}

export type AuthCheckResult = {
  isAuthenticated: boolean
  userId: string | null
}

/**
 * Checks if the user is authenticated
 * @returns The authentication status and user ID
 */
export async function checkAuth(): Promise<AuthCheckResult> {
  // Get the user's ID from Clerk
  const { userId } = await auth()

  return { 
    isAuthenticated: !!userId, 
    userId 
  }
}

/**
 * Checks if the current user is an admin and redirects if not
 * @returns The user ID if the user is an admin
 */
export async function requireAdmin(): Promise<AdminCheckResult> {
  // Get the user's ID from Clerk
  const { userId } = await auth()

  // If not authenticated, redirect to sign-in in production, return status in development
  if (!userId) {
    if (process.env.NODE_ENV === "production") {
      redirect("/sign-in")
    }
    return { isAdmin: false, userId: null, requiresSetup: false }
  }

  // Get the list of admin user IDs
  const adminUserIds = process.env.ADMIN_USER_IDS?.split(",") || []

  // In development, if no admin IDs are configured, return a special status
  if (process.env.NODE_ENV === "development" && (!adminUserIds.length || adminUserIds[0] === "")) {
    return { isAdmin: false, userId, requiresSetup: true }
  }

  // If the user is not an admin, redirect in production, return status in development
  if (!adminUserIds.includes(userId)) {
    if (process.env.NODE_ENV === "production") {
      redirect("/")
    }
    return { isAdmin: false, userId, requiresSetup: false }
  }

  return { isAdmin: true, userId, requiresSetup: false }
} 

--- File: lib/aws.ts ---

import { S3Client } from "@aws-sdk/client-s3"

// Environment variables
const awsConfig = {
  region: process.env.AWS_REGION,
  accessKeyId: process.env.AWS_KEY,
  secretAccessKey: process.env.AWS_SECRET,
  bucketPublic: process.env.AWS_BUCKET_PUBLIC,
  cloudfrontDomain: process.env.CLOUDFRONT_DOMAIN,
}

export const AWS_BUCKET_PUBLIC = process.env.AWS_BUCKET_PUBLIC

// Log missing variables in development only
if (process.env.NODE_ENV === 'development') {
  const missingVars = Object.entries(awsConfig)
    .filter(([, value]) => !value)
    .map(([key]) => key)

  if (missingVars.length > 0) {
    console.warn('Missing AWS configuration variables:', missingVars)
  }
}

// Function to check if AWS is configured
export function isAwsConfigured(): boolean {
  return Boolean(
    awsConfig.region &&
    awsConfig.accessKeyId &&
    awsConfig.secretAccessKey &&
    awsConfig.bucketPublic
  )
}

// Create an S3 client if configured
export const s3Client = isAwsConfigured()
  ? new S3Client({
      region: awsConfig.region!,
      credentials: {
        accessKeyId: awsConfig.accessKeyId!,
        secretAccessKey: awsConfig.secretAccessKey!,
      },
    })
  : null

// Function to get asset URL
export function getAssetUrl(key: string, withTimestamp = false): string | null {
  if (!isAwsConfigured()) {
    return null
  }

  const timestamp = withTimestamp ? Date.now() : null
  const keyWithTimestamp = timestamp 
    ? (key.includes('?') ? `${key}&t=${timestamp}` : `${key}?t=${timestamp}`)
    : key

  if (awsConfig.cloudfrontDomain) {
    return `https://${awsConfig.cloudfrontDomain}/${keyWithTimestamp}`
  }

  // Fallback to direct S3 URL
  return `https://${awsConfig.bucketPublic}.s3.${awsConfig.region}.amazonaws.com/${keyWithTimestamp}`
}

// Function to check AWS connection
export async function checkAwsConnection(): Promise<{
  success: boolean
  message: string
  details?: {
    error?: unknown
  }
}> {
  if (!isAwsConfigured()) {
    return {
      success: false,
      message: 'AWS is not configured',
      details: {
        error: 'Missing required environment variables'
      }
    }
  }

  try {
    // Try to make a simple API call to verify connection
    await s3Client!.config.credentials()
    
    return {
      success: true,
      message: 'Successfully connected to AWS'
    }
  } catch (err) {
    console.error('Unexpected error checking AWS connection:', err)
    return {
      success: false,
      message: `Unexpected error: ${err instanceof Error ? err.message : String(err)}`,
      details: { error: err }
    }
  }
} 

--- File: lib/clerk.ts ---

import { createClerkClient } from '@clerk/backend'

if (!process.env.CLERK_SECRET_KEY) {
  throw new Error('CLERK_SECRET_KEY is not defined')
}

export const clerkClient = createClerkClient({ 
  secretKey: process.env.CLERK_SECRET_KEY 
})

// Re-export commonly used types
export type { User } from '@clerk/backend' 

--- File: lib/config/navigation.ts ---

export const navItems = [
  {
    title: "Explore",
    href: "/explore",
  },
  {
    title: "Trending",
    href: "/trending",
  },
] as const

export type NavItem = (typeof navItems)[number] 

--- File: lib/config.ts ---

export const siteConfig = {
  title: "VibeSwipe",
  description: "Swipe through project ideas, vibe the ones you love",
  shortDescription: "Swipe through project ideas, vibe the ones you love",
  url: "vibeswipe.vercel.app",
  shareImage: "",
  x: "johnpolacek",
  github: "https://github.com/johnpolacek/vibeswipe",
  logo: ""
} as const

export type SiteConfig = {
    title: string
    description: string
    shortDescription: string
    url: string
    shareImage: string
    x: string
    github: string
    logo: string
}

--- File: lib/convex/server.ts ---

import { ConvexHttpClient } from "convex/browser";
import { api } from "@/convex/_generated/api";

export const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);
export { api }; 

--- File: lib/convex.ts ---

import { api } from "../convex/_generated/api"

export { api } 

--- File: lib/data/mock-ideas.ts ---

import type { StartupIdea } from "@/lib/data";

export const mockIdeas: StartupIdea[] = [
  {
    id: "mock-1",
    title: "AI-Powered Recipe Generator",
    description: "Generate unique recipes based on ingredients you have at home.",
    imageUrl: "https://images.unsplash.com/photo-1504674900247-0877df9cc836?auto=format&fit=crop&w=600&q=80",
    srcUrl: "https://example.com/recipe",
    createdAt: new Date(),
  },
  {
    id: "mock-2",
    title: "Virtual Study Buddy",
    description: "Find a virtual partner to co-work and stay productive together.",
    imageUrl: "https://images.unsplash.com/photo-1513258496099-48168024aec0?auto=format&fit=crop&w=600&q=80",
    srcUrl: "https://example.com/study",
    createdAt: new Date(),
  },
  {
    id: "mock-3",
    title: "Pet Adoption Matcher",
    description: "Swipe to find your perfect pet from local shelters.",
    imageUrl: "https://images.unsplash.com/photo-1518717758536-85ae29035b6d?auto=format&fit=crop&w=600&q=80",
    srcUrl: "https://example.com/pet",
    createdAt: new Date(),
  },
  {
    id: "mock-4",
    title: "Remote Team Coffee Breaks",
    description: "Randomly pair remote teammates for virtual coffee chats.",
    imageUrl: "https://images.unsplash.com/photo-1464983953574-0892a716854b?auto=format&fit=crop&w=600&q=80",
    srcUrl: "https://example.com/coffee",
    createdAt: new Date(),
  },
  {
    id: "mock-5",
    title: "Neighborhood Event Finder",
    description: "Discover and join events happening near you.",
    imageUrl: "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=600&q=80",
    srcUrl: "https://example.com/event",
    createdAt: new Date(),
  },
  {
    id: "mock-6",
    title: "Eco-Friendly Shopping Assistant",
    description: "Get eco-ratings and sustainable alternatives while you shop online.",
    imageUrl: "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=600&q=80",
    srcUrl: "https://example.com/eco",
    createdAt: new Date(),
  },
]; 

--- File: lib/data.ts ---

export interface StartupIdea {
  id: string  // Changed to string to use UUID or similar
  title: string
  description: string
  imageUrl?: string
  submitterId?: string
  createdAt: Date
  srcUrl?: string
  // These will be computed from SwipeActions
  likeCount?: number
  passCount?: number
  superLikeCount?: number
}

export type SwipeType = 'like' | 'pass' | 'superlike'

export interface SwipeAction {
  id: string
  userId: string
  ideaId: string
  type: SwipeType
  createdAt: Date
}

// Sample startup ideas
export const startupIdeas: StartupIdea[] = [
  {
    id: "1",
    title: "AI-Powered Personal Shopping Assistant",
    description:
      "An app that uses AI to recommend products based on user preferences and browsing history. The assistant learns from your shopping habits and provides personalized recommendations that improve over time. It can also alert you to sales on items you might like and help you find the best deals across multiple platforms.",
    imageUrl: "/placeholder.svg?height=800&width=450",
    submitterId: "user1",
    createdAt: new Date(),
    likeCount: 342,
    passCount: 0,
    superLikeCount: 0,
  },
  {
    id: "2",
    title: "Sustainable Food Delivery Platform",
    description:
      "A food delivery service focused on zero-waste packaging and carbon-neutral delivery. Partner with local restaurants that commit to sustainable practices and use electric vehicles or bicycles for delivery. Customers can track the carbon footprint saved with each order and earn rewards for sustainable choices.",
    submitterId: "user2",
    createdAt: new Date(),
    likeCount: 287,
    passCount: 0,
    superLikeCount: 0,
  },
  {
    id: "3",
    title: "Remote Team Building Platform",
    description:
      "Virtual team-building activities and games designed specifically for remote teams. The platform offers a variety of interactive experiences that help build camaraderie and improve communication among team members who may never meet in person. Activities are designed to be engaging across different time zones and cultural backgrounds.",
    imageUrl: "/placeholder.svg?height=800&width=450",
    submitterId: "user3",
    createdAt: new Date(),
    likeCount: 256,
    passCount: 0,
    superLikeCount: 0,
  },
  {
    id: "4",
    title: "Mental Health Tracking App",
    description:
      "An app that helps users track their mental health and provides personalized recommendations. Users can log their mood, sleep patterns, and daily activities to identify triggers and patterns. The app provides insights and suggests evidence-based techniques to improve mental wellbeing, connecting users with professional help when needed.",
    submitterId: "user4",
    createdAt: new Date(),
    likeCount: 231,
    passCount: 0,
    superLikeCount: 0,
  },
  {
    id: "5",
    title: "Peer-to-Peer Skill Exchange",
    description:
      "A platform where users can exchange skills and knowledge without monetary transactions. Users earn credits by teaching others what they know, which they can then spend to learn new skills from other users. This creates a community of lifelong learners who can develop personally and professionally without financial barriers.",
    imageUrl: "/placeholder.svg?height=800&width=450",
    submitterId: "user5",
    createdAt: new Date(),
    likeCount: 198,
    passCount: 0,
    superLikeCount: 0,
  },
  {
    id: "6",
    title: "Carbon Footprint Tracker for Businesses",
    description:
      "A platform that helps businesses track and reduce their carbon footprint with actionable insights. The software integrates with existing business systems to automatically calculate emissions from operations, supply chain, and employee activities. It then suggests targeted strategies to reduce impact and tracks progress toward sustainability goals.",
    submitterId: "user6",
    createdAt: new Date(),
    likeCount: 187,
    passCount: 0,
    superLikeCount: 0,
  },
]

// Get trending ideas
export function getTrendingIdeas(limit?: number): StartupIdea[] {
  const sorted = [...startupIdeas].sort((a, b) => (b.likeCount || 0) - (a.likeCount || 0))
  return limit ? sorted.slice(0, limit) : sorted
}

// Get matched ideas (sample)
export function getMatchedIdeas(): StartupIdea[] {
  return [startupIdeas[0], startupIdeas[3]]
}

// Get saved ideas (sample)
export function getSavedIdeas(): StartupIdea[] {
  return [startupIdeas[4]]
}


--- File: lib/email-utils.ts ---

import { createHash } from "crypto"

/**
 * Generates a secure token for email unsubscribe links
 * @param email The email address to generate a token for
 * @returns A secure hash that can be used in unsubscribe links
 */
export function generateUnsubscribeToken(email: string): string {
  if (!process.env.UNSUBSCRIBE_SECRET) {
    throw new Error("UNSUBSCRIBE_SECRET environment variable is not set")
  }

  // Combine email with secret and current year-month
  // This makes the token valid for one month
  const date = new Date()
  const yearMonth = `${date.getUTCFullYear()}-${(date.getUTCMonth() + 1).toString().padStart(2, "0")}`
  const data = `${email}:${yearMonth}:${process.env.UNSUBSCRIBE_SECRET}`

  // Create a SHA-256 hash
  return createHash("sha256").update(data).digest("hex")
}

/**
 * Verifies if an unsubscribe token is valid for a given email
 * @param email The email address to verify
 * @param token The token to verify
 * @returns boolean indicating if the token is valid
 */
export function verifyUnsubscribeToken(email: string, token: string): boolean {
  // Generate a token for the current month and previous month
  // This gives users a grace period when links cross month boundaries
  const currentToken = generateUnsubscribeToken(email)
  
  // Generate token for previous month
  const lastMonth = new Date()
  lastMonth.setUTCMonth(lastMonth.getUTCMonth() - 1)
  const yearMonth = `${lastMonth.getUTCFullYear()}-${(lastMonth.getUTCMonth() + 1).toString().padStart(2, "0")}`
  const lastMonthData = `${email}:${yearMonth}:${process.env.UNSUBSCRIBE_SECRET}`
  const previousToken = createHash("sha256").update(lastMonthData).digest("hex")

  // Check if the token matches either current or previous month
  return token === currentToken || token === previousToken
}

/**
 * Encodes an email address for use in URLs
 * @param email The email address to encode
 * @returns URL-safe base64 encoded email
 */
export function encodeEmail(email: string): string {
  return Buffer.from(email).toString("base64url")
}

/**
 * Decodes an encoded email address from a URL
 * @param encoded The encoded email to decode
 * @returns The original email address
 */
export function decodeEmail(encoded: string): string {
  return Buffer.from(encoded, "base64url").toString("utf-8")
} 

--- File: lib/generated/routes.ts ---

// This file is auto-generated. DO NOT EDIT IT MANUALLY.
// It is used to generate the validRoutes for tracking user visits.
// To regenerate, run: pnpm generate:routes

export const validRoutes = new Set([
  '/',
  'about',
  'account/*',
  'admin',
  'admin/analytics',
  'admin/ideas',
  'admin/mailing-list',
  'admin/users',
  'contact',
  'demo/ai',
  'demo/upload',
  'explore',
  'get-started',
  'mailing-list',
  'matches',
  'pay',
  'privacy',
  'roadmap',
  'terms',
  'unsubscribe'
])


--- File: lib/prompts.ts ---

export function generatePRDPrompt(idea: { name: string; description: string }) {
  return `Please help me write a detailed Product Requirements Document (PRD) for the following startup idea. Ask any followup questions you need to clarify the requirements.

Project: ${idea.name}
Description: ${idea.description}

Please include the following sections:
1. Problem Statement
2. Target Users/Market
3. Solution Overview
4. Key Features & Requirements
5. User Stories
6. Success Metrics
7. Technical Requirements
8. MVP Scope
9. Future Considerations

Please be specific and actionable in your response, focusing on practical implementation details while maintaining the core vision of the idea.`
}

export function generateDevPrompt(idea: { name: string; description: string }) {
  return `I want to build the following startup idea as a full-stack web application:

Project: ${idea.name}
Description: ${idea.description}

Please help me with:
1. A recommended tech stack with modern, production-ready technologies
2. Initial project setup instructions
3. Core features to implement for an MVP
4. Basic architecture and data model
5. Key implementation considerations and potential challenges
6. Development roadmap broken down into phases

Please be specific and provide actionable steps I can follow to start building this project.`
}

export function copyToClipboard(text: string) {
  if (typeof window !== 'undefined') {
    navigator.clipboard.writeText(text)
  }
} 

--- File: lib/s3-utils.ts ---

import { PutObjectCommand } from "@aws-sdk/client-s3"
import { s3Client, isAwsConfigured, getAssetUrl } from "@/lib/aws"

/**
 * Upload a file to S3
 * @param file The file to upload
 * @param key The S3 object key (path + filename)
 * @param contentType Optional content type
 * @returns The URL of the uploaded file through CloudFront
 */
export async function uploadFileToS3(
  file: File | Blob,
  key: string,
  contentType?: string
): Promise<string> {
  if (!isAwsConfigured() || !s3Client) {
    throw new Error("AWS S3 is not configured")
  }

  // Convert file to buffer
  const arrayBuffer = await file.arrayBuffer()
  const buffer = Buffer.from(arrayBuffer)

  // Set up the upload parameters
  const params = {
    Bucket: process.env.AWS_BUCKET_PUBLIC,
    Key: key,
    Body: buffer,
    ContentType: contentType || file.type,
    CacheControl: key.includes('hackathon/covers') ? 'no-cache' : "public, max-age=31536000",
  }

  // Upload to S3
  await s3Client.send(new PutObjectCommand(params))
  
  // Get the URL (with timestamp for cache busting)
  const url = getAssetUrl(key, true)
  if (!url) {
    throw new Error("Failed to generate asset URL")
  }
  
  return url
}

export const transferImageToS3 = async (imageUrl: string, key: string): Promise<string> => {
  if (!isAwsConfigured() || !s3Client) {
    throw new Error("AWS S3 is not configured")
  }

  try {
    // Download the image from the URL
    const response = await fetch(imageUrl)
    const arrayBuffer = await response.arrayBuffer()

    // Prepare the parameters for uploading to S3
    const params = {
      Bucket: process.env.AWS_BUCKET_PUBLIC,
      Key: key,
      Body: Buffer.from(arrayBuffer),
      ContentType: response.headers.get("content-type") || "application/octet-stream",
      ContentLength: parseInt(response.headers.get("content-length") || "0", 10),
    }

    // Upload the image to the S3 bucket
    const putCommand = new PutObjectCommand(params)
    
    await s3Client.send(putCommand)

    // Get the URL
    const publicUrl = getAssetUrl(key)
    if (!publicUrl) {
      throw new Error("Failed to generate asset URL")
    }

    return publicUrl
  } catch (error) {
    throw new Error("Error uploading image to S3: " + error)
  }
}

--- File: lib/send-email.ts ---

import sgMail from "@sendgrid/mail"

if (!process.env.SENDGRID_API_KEY) {
  throw new Error("Missing SENDGRID_API_KEY environment variable")
}

sgMail.setApiKey(process.env.SENDGRID_API_KEY)

interface SendEmailOptions {
  to: string
  subject: string
  text: string
  html?: string
}

export async function sendEmail({ to, subject, text, html }: SendEmailOptions) {
  const msg = {
    to,
    from: process.env.SENDGRID_SENDER || "noreply@example.com",
    subject,
    text,
    html: html || text,
  }

  try {
    await sgMail.send(msg)
  } catch (error) {
    console.error("Error sending email:", error)
    throw error
  }
} 

--- File: lib/services/ideas.ts ---

import { convex, api } from "@/lib/convex/server";

export async function recordIdeaSwipe(data: {
  ideaId: string;
  userId: string;
  liked: boolean;
  createdAt: number;
}) {
  return await convex.mutation(api.ideas.recordSwipe, data);
}

export async function getUserSwipedIdeaIds(userId: string) {
  return await convex.query(api.ideas.getUserSwipedIdeaIds, { userId });
}

export async function getUserMatches(userId: string) {
  return await convex.query(api.ideas.getUserMatches, { userId });
} 

--- File: lib/services/mailing-list.ts ---

import { convex, api } from "@/lib/convex/server";
import { Doc } from "@/convex/_generated/dataModel";

export type MailingListSubscription = Doc<"mailing_list_subscriptions">;

/**
 * Retrieves all mailing list subscriptions from Convex
 */
export async function getMailingListSubscriptions(): Promise<MailingListSubscription[]> {
  try {
    return await convex.query(api.mailingList.getSubscriptions);
  } catch (error) {
    console.error('Error getting mailing list subscriptions:', error);
    return [];
  }
}

/**
 * Adds a new email subscription to the mailing list
 */
export async function addMailingListSubscription(data: { 
  userId: string, 
  email: string, 
  name?: string | undefined,
  preferences: {
    marketing: boolean,
    updates: boolean
  }
}): Promise<MailingListSubscription | null> {
  try {
    return await convex.mutation(api.mailingList.subscribe, data);
  } catch (error) {
    console.error('Error adding mailing list subscription:', error);
    return null;
  }
}

/**
 * Removes an email subscription from the mailing list
 */
export async function removeMailingListSubscription(email: string): Promise<boolean> {
  try {
    return await convex.mutation(api.mailingList.unsubscribe, { email });
  } catch (error) {
    console.error('Error removing mailing list subscription:', error);
    return false;
  }
}

/**
 * Updates preferences for a user's mailing list subscription
 */
export async function updateMailingListPreferences(userId: string, preferences: { marketing: boolean, updates: boolean }): Promise<boolean> {
  try {
    return await convex.mutation(api.mailingList.updatePreferences, { userId, preferences });
  } catch (error) {
    console.error('Error updating mailing list preferences:', error);
    return false;
  }
} 

--- File: lib/services/visits.ts ---

import { convex, api } from "@/lib/convex/server";

/**
 * Records a new visit to a page
 */
export async function recordVisit(data: {
  path: string;
  userId: string | null;
  metadata: Record<string, unknown>;
}) {
  return await convex.mutation(api.visits.recordVisit, data);
}

/**
 * Gets visits for a specific user
 */
export async function getVisitsByUser(userId: string | null, limit?: number) {
  return await convex.query(api.visits.getVisits, { userId, limit });
}

/**
 * Gets visits for a specific path
 */
export async function getVisitsByPath(path: string, limit?: number) {
  return await convex.query(api.visits.getVisitsByPath, { path, limit });
}

/**
 * Gets all visits
 */
export async function getAllVisits(limit?: number) {
  return await convex.query(api.visits.getVisits, { limit });
}

--- File: lib/stripe.ts ---

import Stripe from "stripe"

// Environment variables
const stripeSecretKey = process.env.STRIPE_SECRET_KEY

// Log missing variables in development only
if (process.env.NODE_ENV === 'development' && !stripeSecretKey) {
  console.warn('Missing Stripe secret key environment variable')
}

// Function to check if Stripe is configured
export function isStripeConfigured(): boolean {
  return Boolean(stripeSecretKey)
}

// Create a Stripe instance if configured
export const stripe = stripeSecretKey
  ? new Stripe(stripeSecretKey, {
      apiVersion: "2025-02-24.acacia",
    })
  : null

// Function to check Stripe connection
export async function checkStripeConnection(): Promise<{
  success: boolean
  message: string
  details?: {
    error?: unknown
  }
}> {
  if (!isStripeConfigured()) {
    return {
      success: false,
      message: 'Stripe is not configured',
      details: {
        error: 'Missing required environment variables'
      }
    }
  }

  try {
    // Try to make a simple API call to verify connection
    await stripe?.balance.retrieve()
    
    return {
      success: true,
      message: 'Successfully connected to Stripe'
    }
  } catch (err) {
    console.error('Unexpected error checking Stripe connection:', err)
    return {
      success: false,
      message: `Unexpected error: ${err instanceof Error ? err.message : String(err)}`,
      details: { error: err }
    }
  }
} 

--- File: lib/upload-utils.ts ---

"use client"

import { useState } from "react"

interface UploadOptions {
  folder?: string
  maxSize?: number // in bytes
  allowedTypes?: string[]
}

const defaultOptions: UploadOptions = {
  folder: "uploads",
  maxSize: 5 * 1024 * 1024, // 5MB
  allowedTypes: ["image/jpeg", "image/png", "image/webp", "image/gif", "image/svg+xml"],
}

export async function uploadFile(file: File, options: UploadOptions = {}): Promise<string> {
  const { folder = "uploads", maxSize, allowedTypes } = { ...defaultOptions, ...options }

  if (!file) {
    throw new Error("No file provided")
  }

  // Validate file type if allowedTypes is provided
  if (allowedTypes && !allowedTypes.includes(file.type)) {
    throw new Error(`File type not allowed. Please upload one of: ${allowedTypes.join(", ")}`)
  }

  // Validate file size if maxSize is provided
  if (maxSize && file.size > maxSize) {
    throw new Error(`File size exceeds ${Math.round(maxSize / (1024 * 1024))}MB limit`)
  }

  const formData = new FormData()
  formData.append("file", file)
  formData.append("folder", folder)

  try {
    const response = await fetch("/api/upload", {
      method: "POST",
      body: formData,
    })

    if (!response.ok) {
      const data = await response.json()
      throw new Error(data.error || "Failed to upload file")
    }

    const data = await response.json()
    return data.url
  } catch (error) {
    console.error("Error uploading file:", error)
    throw error
  }
}

export function useFileUpload(options: UploadOptions = {}) {
  const [isUploading, setIsUploading] = useState(false)

  const upload = async (file: File): Promise<string> => {
    setIsUploading(true)
    try {
      const url = await uploadFile(file, options)
      return url
    } finally {
      setIsUploading(false)
    }
  }

  return {
    upload,
    isUploading,
  }
} 

--- File: lib/utils/case-transforms.ts ---

import { camelCase, snakeCase } from 'lodash-es'

// Type transformations for TypeScript type system
type CamelToSnakeCase<S extends string> = S extends `${infer T}${infer U}`
  ? T extends Uppercase<T>
    ? `_${Lowercase<T>}${CamelToSnakeCase<U>}`
    : `${T}${CamelToSnakeCase<U>}`
  : S

type SnakeToCamelCase<S extends string> = S extends `${infer T}_${infer U}`
  ? `${T}${Capitalize<SnakeToCamelCase<U>>}`
  : S

type TransformKeys<T, Transform extends (str: string) => string> = T extends object
  ? {
      [K in keyof T as K extends string
        ? string extends K
          ? string
          : Transform extends typeof snakeCase
            ? Uncapitalize<CamelToSnakeCase<K>>
            : Uncapitalize<SnakeToCamelCase<K>>
        : K]: T[K] extends object
        ? TransformKeys<T[K], Transform>
        : T[K]
    }
  : T

/**
 * Transforms an object's keys from camelCase to snake_case recursively
 * @deprecated Use toSnakeCase instead
 */
export function toDatabaseCase<T extends object>(obj: T): TransformKeys<T, typeof snakeCase> {
  return toSnakeCase(obj)
}

/**
 * Transforms an object's keys from snake_case to camelCase recursively
 * @deprecated Use toCamelCase instead
 */
export function toClientCase<T extends object>(obj: T): TransformKeys<T, typeof camelCase> {
  return toCamelCase(obj)
}

/**
 * Transforms an object's keys from camelCase to snake_case recursively
 */
export function toSnakeCase<T extends object>(obj: T): TransformKeys<T, typeof snakeCase> {
  if (Array.isArray(obj)) {
    return obj.map((item) =>
      typeof item === 'object' ? toSnakeCase(item) : item
    ) as TransformKeys<T, typeof snakeCase>
  }

  if (obj === null || typeof obj !== 'object') {
    return obj as TransformKeys<T, typeof snakeCase>
  }

  return Object.fromEntries(
    Object.entries(obj).map(([key, value]) => [
      snakeCase(key),
      typeof value === 'object' ? toSnakeCase(value) : value,
    ])
  ) as TransformKeys<T, typeof snakeCase>
}

/**
 * Transforms an object's keys from snake_case to camelCase recursively
 */
export function toCamelCase<T extends object>(obj: T): TransformKeys<T, typeof camelCase> {
  if (Array.isArray(obj)) {
    return obj.map((item) =>
      typeof item === 'object' ? toCamelCase(item) : item
    ) as TransformKeys<T, typeof camelCase>
  }

  if (obj === null || typeof obj !== 'object') {
    return obj as TransformKeys<T, typeof camelCase>
  }

  return Object.fromEntries(
    Object.entries(obj).map(([key, value]) => [
      camelCase(key),
      typeof value === 'object' ? toCamelCase(value) : value,
    ])
  ) as TransformKeys<T, typeof camelCase>
}

/**
 * Alias for toCamelCase, used for consistency with existing codebase
 */
export const deepToCamelCase = toCamelCase

/**
 * Type helper to convert a type from camelCase to snake_case
 * @example
 * interface UserInput {
 *   firstName: string
 *   lastName: string
 * }
 * 
 * type DatabaseUser = ToSnakeCase<UserInput>
 * // Result: { first_name: string, last_name: string }
 */
export type ToSnakeCase<T> = TransformKeys<T, typeof snakeCase>

/**
 * Type helper to convert a type from snake_case to camelCase
 * @example
 * interface DatabaseUser {
 *   first_name: string
 *   last_name: string
 * }
 * 
 * type ClientUser = ToCamelCase<DatabaseUser>
 * // Result: { firstName: string, lastName: string }
 */
export type ToCamelCase<T> = TransformKeys<T, typeof camelCase>

// Types for backward compatibility
export type Primitive = string | number | boolean | null | undefined
export type TransformableObject = { [key: string]: Transformable }
export type TransformableArray = Transformable[]
export type Transformable = Primitive | TransformableObject | TransformableArray 

--- File: lib/utils.ts ---

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Format a date string to a more readable format
 * @param dateString ISO date string
 * @returns Formatted date string (e.g., "Jan 1, 2023")
 */
export function formatDate(timestamp: number) {
  return new Date(timestamp).toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  })
}

export function formatCurrency(amount: number) {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount)
}

export const getInitials = (name: string) => {
  return name
    .split(" ")
    .map((n) => n[0])
    .join("")
    .toUpperCase()
    .substring(0, 2)
}

// Deterministic seeded random for a string
export function seededRandom(str: string) {
  let hash = 0
  for (let i = 0; i < str.length; i++) {
    hash = str.charCodeAt(i) + ((hash << 5) - hash)
  }
  return Math.abs(hash) / 2147483647
}

// Generate a random gradient based on a string id
export function getGradient(id: string) {
  // Hash the ID to get a consistent gradient
  let hash = 0
  for (let i = 0; i < id.length; i++) {
    hash = ((hash << 5) - hash) + id.charCodeAt(i)
    hash = hash & hash
  }

  // Use the hash to select from predefined gradients
  const gradients = [
    "from-blue-500 to-purple-500",
    "from-green-500 to-blue-500",
    "from-purple-500 to-pink-500",
    "from-yellow-500 to-red-500",
    "from-indigo-500 to-purple-500",
    "from-red-500 to-orange-500",
    "from-teal-500 to-green-500",
    "from-pink-500 to-rose-500",
  ]

  const index = Math.abs(hash) % gradients.length
  return gradients[index]
}


--- File: middleware.ts ---

import { clerkMiddleware } from '@clerk/nextjs/server'

export default clerkMiddleware()

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
}

--- File: next.config.ts ---

import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'vibecodeparty-public.s3.us-east-1.amazonaws.com',
      },
      {
        protocol: 'https',
        hostname: 'vibecodeparty-public.s3.amazonaws.com',
      },
      {
        protocol: 'https',
        hostname: 'img.clerk.com',
      },
      {
        protocol: 'https',
        hostname: 'drgfjd45uzjza.cloudfront.net',
      },
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
      },
    ],
  },
};

export default nextConfig;


--- File: package.json ---

{
  "name": "vibeswipe",
  "version": "0.1.0",
  "license": "None",
  "description": "Swipe through project ideas, vibe the ones you love",
  "keywords": [
    "nextjs",
    "template",
    "starter",
    "vibecoding"
  ],
  "author": "johnpolacek",
  "scripts": {
    "kill:ports": "kill-port 3000 4000 4400 4500 5001 8080 8085 9000 9099 9199 || true",
    "dev": "pnpm kill:ports && concurrently \"pnpm convex:dev\" \"next dev -p ${PORT:-3000}\" --kill-others --names \"convex,next\" --prefix-colors \"yellow.bold,cyan.bold\"",
    "convex:dev": "convex dev",
    "convex:deploy": "convex deploy",
    "restart:dev": "pnpm dev",
    "build": "pnpm generate:routes && next build",
    "postinstall": "npx convex codegen",
    "start": "next start",
    "lint": "next lint",
    "boot:github": "brew install gh && gh auth login",
    "boot:vercel": "pnpm i -g vercel",
    "boot:repo": "chmod +x ./scripts/init-repo.sh && ./scripts/init-repo.sh",
    "boot:convex": "sh ./scripts/boot-convex.sh",
    "boot": "pnpm boot:github && pnpm boot:vercel && pnpm boot:convex && pnpm boot:repo",
    "go": "pnpm generate:routes && git add . && aicommits && pnpm generate:llm && git add . && git commit -m 'update llm.txt' && git push origin main",
    "test:run": "playwright test",
    "test:wait": "wait-on tcp:3000 tcp:4000 && pnpm test:run",
    "test": "pnpm build && concurrently \"pnpm dev\" \"pnpm test:wait\" --success first --kill-others --names \"dev,test\" --prefix-colors \"yellow.bold,cyan.bold\"",
    "ship": "pnpm test && pnpm go",
    "test:clean": "rm -rf ~/.cache/ms-playwright-tests test-results/ playwright-report/",
    "pw": "playwright test --ui --debug",
    "pw:headless": "playwright test",
    "db:admin": "open https://dashboard.convex.dev",
    "generate:routes": "tsx scripts/generate-routes.ts",
    "generate:llm": "tsx scripts/bundle-code.ts . llm.txt",
    "test:setup": "pnpm dev",
    "test:full": "pnpm test:setup && pnpm test"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.3.16",
    "@ai-sdk/react": "^1.2.9",
    "@ai-sdk/replicate": "^0.2.7",
    "@aws-sdk/client-s3": "^3.787.0",
    "@aws-sdk/s3-request-presigner": "^3.787.0",
    "@clerk/backend": "^1.29.1",
    "@clerk/clerk-sdk-node": "^5.1.6",
    "@clerk/nextjs": "^6.16.0",
    "@heroicons/react": "^2.2.0",
    "@octokit/rest": "^21.1.1",
    "@radix-ui/react-accordion": "^1.2.7",
    "@radix-ui/react-alert-dialog": "^1.1.10",
    "@radix-ui/react-avatar": "^1.1.6",
    "@radix-ui/react-checkbox": "^1.2.2",
    "@radix-ui/react-collapsible": "^1.1.7",
    "@radix-ui/react-dialog": "^1.1.10",
    "@radix-ui/react-dropdown-menu": "^2.1.11",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.4",
    "@radix-ui/react-popover": "^1.1.10",
    "@radix-ui/react-progress": "^1.1.4",
    "@radix-ui/react-radio-group": "^1.3.3",
    "@radix-ui/react-scroll-area": "^1.2.5",
    "@radix-ui/react-select": "^2.2.2",
    "@radix-ui/react-separator": "^1.1.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.2.2",
    "@radix-ui/react-tabs": "^1.1.8",
    "@radix-ui/react-visually-hidden": "^1.2.0",
    "@sendgrid/mail": "^8.1.5",
    "@stripe/react-stripe-js": "^3.6.0",
    "@stripe/stripe-js": "^6.1.0",
    "@types/lodash-es": "^4.17.12",
    "@types/react-google-recaptcha": "^2.1.9",
    "ai": "^4.3.9",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "convex": "^1.23.0",
    "date-fns": "^4.1.0",
    "eslint-config-prettier": "^10.1.2",
    "eslint-plugin-prettier": "^5.2.6",
    "ignore": "^7.0.3",
    "lodash-es": "^4.17.21",
    "lucide-react": "^0.501.0",
    "motion": "^12.9.2",
    "next": "15.3.1",
    "next-themes": "^0.4.6",
    "playwright": "link:@clerk/testing/playwright",
    "prettier": "^3.5.3",
    "react": "^19.1.0",
    "react-day-picker": "8.10.1",
    "react-dom": "^19.1.0",
    "react-google-recaptcha": "^3.1.0",
    "react-icons": "^5.5.0",
    "react-markdown": "^10.1.0",
    "server": "link:@clerk/nextjs/server",
    "slugify": "^1.6.6",
    "sonner": "^2.0.3",
    "stripe": "^17.7.0",
    "tailwind-merge": "^3.2.0",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.1.0",
    "zod": "^3.24.3"
  },
  "devDependencies": {
    "@clerk/testing": "^1.4.41",
    "@eslint/eslintrc": "^3.3.1",
    "@playwright/test": "^1.52.0",
    "@tailwindcss/postcss": "^4.1.4",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^22.14.1",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@types/uuid": "^10.0.0",
    "concurrently": "^9.1.2",
    "dotenv": "^16.5.0",
    "dotenv-cli": "^8.0.0",
    "eslint": "^9.25.0",
    "eslint-config-next": "15.3.1",
    "kill-port": "^2.0.1",
    "tailwindcss": "^4.1.4",
    "ts-node": "^10.9.2",
    "tsx": "^4.19.3",
    "typescript": "^5.8.3",
    "wait-on": "^8.0.3"
  }
}

--- File: playwright.config.ts ---

import { defineConfig, devices } from '@playwright/test';
import path from 'path';

/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */
import dotenv from 'dotenv';
// Load environment variables in order of precedence (later files take precedence)
dotenv.config({ path: path.resolve(__dirname, '.env') });
dotenv.config({ path: path.resolve(__dirname, '.env.test') });
dotenv.config({ path: path.resolve(__dirname, '.env.local') });

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
  testDir: './tests',
  /* Run tests in files in parallel - except in UI mode */
  fullyParallel: false,
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  forbidOnly: !!process.env.CI,
  /* Retry on CI only */
  retries: process.env.CI ? 2 : 0,
  /* Opt out of parallel tests on CI or in UI mode */
  workers: 1,
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  reporter: 'html',
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  use: {
    /* Base URL to use in actions like `await page.goto('/')`. */
    baseURL: 'http://localhost:3000',

    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
    trace: 'on-first-retry',
  },

  /* Configure projects for major browsers */
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },

    // {
    //   name: 'firefox',
    //   use: { ...devices['Desktop Firefox'] },
    // },

    // {
    //   name: 'webkit',
    //   use: { ...devices['Desktop Safari'] },
    // },

    /* Test against mobile viewports. */
    // {
    //   name: 'Mobile Chrome',
    //   use: { ...devices['Pixel 5'] },
    // },
    // {
    //   name: 'Mobile Safari',
    //   use: { ...devices['iPhone 12'] },
    // },

    /* Test against branded browsers. */
    // {
    //   name: 'Microsoft Edge',
    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },
    // },
    // {
    //   name: 'Google Chrome',
    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
    // },
  ],

  /* Since we're running the Next.js server separately, we don't need the webServer config */
  // webServer: {
  //   command: 'pnpm dev',
  //   url: 'http://127.0.0.1:3000',
  //   reuseExistingServer: !process.env.CI,
  //   timeout: 120000,
  // },
  
  /* Global setup to run before all tests */
  globalSetup: process.env.PLAYWRIGHT_UI_MODE ? undefined : './tests/global-setup.ts',
});


--- File: postcss.config.mjs ---

const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;


--- File: scripts/boot-convex.sh ---

#!/bin/bash

# Install Convex CLI globally
pnpm add -g convex@latest

# Check for CONVEX_DEPLOY_KEY in Convex production environment
DEPLOY_KEY=$(npx convex env --prod get CONVEX_DEPLOY_KEY 2>&1)

if echo "$DEPLOY_KEY" | grep -q 'not found'; then
  echo "\n\033[0;31m✖ Environment variable 'CONVEX_DEPLOY_KEY' not found.\033[0m"
  echo "\nTo deploy with Convex, you need to set your deploy key."
  echo "1. Visit your Convex dashboard: https://dashboard.convex.dev"
  echo "2. Go to your project settings and copy the Deploy Key."
  echo "3. Add it to your environment variables as CONVEX_DEPLOY_KEY."
  echo "\nExample (.env):\nCONVEX_DEPLOY_KEY=your-deploy-key-here\n"
  # Try to get CONVEX_DEPLOY_KEY from local .env
  if [ -f .env ]; then
    LOCAL_KEY=$(grep '^CONVEX_DEPLOY_KEY=' .env | cut -d '=' -f2-)
    if [ -n "$LOCAL_KEY" ]; then
      echo "\033[0;34mFound CONVEX_DEPLOY_KEY in local .env. Attempting to add to Vercel production env...\033[0m"
      TMPFILE=$(mktemp)
      echo "$LOCAL_KEY" > "$TMPFILE"
      if vercel env add CONVEX_DEPLOY_KEY production < "$TMPFILE"; then
        echo "\033[0;32m✓ Successfully added CONVEX_DEPLOY_KEY to Vercel production environment.\033[0m"
      else
        echo "\033[0;31m✖ Failed to add CONVEX_DEPLOY_KEY to Vercel. Please add it manually.\033[0m"
      fi
      rm "$TMPFILE"
    fi
  fi
else
  echo "\033[0;32m✓ CONVEX_DEPLOY_KEY found in Convex production environment.\033[0m"
fi 

--- File: scripts/bundle-code.ts ---

#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import ignore from 'ignore';
import type { Dirent } from 'fs'; // Import Dirent type

// --- Configuration ---

// Directories to exclude entirely
const EXCLUDED_DIRS: Set<string> = new Set([
    'node_modules',
    '.git',
    '.next',
    'dist',
    'build',
    'out',
    'coverage',
    '.vscode',
    '.idea',
    'public', // Often contains large assets, adjust if needed
    // Add any other directories you want to skip
]);

// Specific files or patterns to exclude
const EXCLUDED_FILES_PATTERNS: string[] = [
    'package-lock.json',
    'yarn.lock',
    'pnpm-lock.yaml',
    '.DS_Store',
    // Add any specific files or patterns
];

// File extensions or specific filenames to include (add more as needed)
const INCLUDED_EXTENSIONS: Set<string> = new Set([
    // Extensions
    '.js',
    '.jsx',
    '.ts',
    '.tsx',
    '.mjs',
    '.cjs',
    '.css',
    '.scss',
    '.sass',
    '.less',
    '.html',
    '.md',
    '.json',
    '.yaml',
    '.yml',
    '.sh',
    '.env',
    '.env.local',
    '.env.development',
    '.env.production',
    '.env.example', // Often useful for context
    '.gitignore', // Useful for context
    '.npmrc',
    // Specific filenames (often config files)
    'next.config.js',
    'next.config.mjs',
    'postcss.config.js',
    'tailwind.config.js',
    'tailwind.config.ts',
    'tsconfig.json',
    'jsconfig.json',
    '.eslintrc.json',
    '.prettierrc',
    'Dockerfile',
    // Add specific filenames relevant to your project
]);

// Initialize gitignore
let ig = ignore();

async function loadGitignore(projectRoot: string): Promise<void> {
    try {
        const gitignorePath = path.join(projectRoot, '.gitignore');
        const gitignoreContent = await fs.readFile(gitignorePath, 'utf-8');
        ig = ignore().add(gitignoreContent);
    } catch (err: unknown) {
        if (err && typeof err === 'object' && 'code' in err && err.code === 'ENOENT') {
            console.log('No .gitignore file found, continuing without it');
        } else if (err instanceof Error) {
            console.error('Error reading .gitignore:', err.message);
        }
    }
}

// --- Helper Functions ---

function isExcluded(entryPath: string, entryName: string, isDirectory: boolean): boolean {
    // Check gitignore patterns first
    const relativePath = entryPath.replace(/\\/g, '/'); // Normalize path separators
    if (ig.ignores(relativePath)) {
        return true;
    }

    // Then check our manual exclusions
    if (isDirectory && EXCLUDED_DIRS.has(entryName)) {
        return true;
    }
    if (!isDirectory && EXCLUDED_FILES_PATTERNS.some(pattern => entryName === pattern)) {
        // Add more complex pattern matching here if needed (e.g., regex)
        return true;
    }
     // Check if the path contains an excluded directory component
    const pathParts = entryPath.split(path.sep);
    if (pathParts.some(part => EXCLUDED_DIRS.has(part))) {
       return true;
    }
    return false;
}

function isIncluded(entryName: string): boolean {
    const ext = path.extname(entryName).toLowerCase();
    // Check by specific name first, then by extension
    return INCLUDED_EXTENSIONS.has(entryName) || (ext !== '' && INCLUDED_EXTENSIONS.has(ext));
}

async function walkDir(dir: string, projectRoot: string, allContents: string[]): Promise<void> {
    let entries: Dirent[];
    try {
        entries = await fs.readdir(dir, { withFileTypes: true });
    } catch (err: unknown) {
        if (err instanceof Error) {
            console.error(`Error reading directory ${dir}: ${err.message}`);
        }
        return; // Skip directories we can't read
    }

    for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        const relativePath = path.relative(projectRoot, fullPath);

        if (isExcluded(relativePath, entry.name, entry.isDirectory())) {
            console.log(`(-) Excluding: ${relativePath}`);
            continue;
        }

        if (entry.isDirectory()) {
            await walkDir(fullPath, projectRoot, allContents);
        } else if (entry.isFile() && isIncluded(entry.name)) {
            try {
                console.log(`(+) Including: ${relativePath}`);
                const content = await fs.readFile(fullPath, 'utf-8');
                // Normalize line endings to prevent excessive diffs if files have mixed endings
                const normalizedContent = content.replace(/\r\n/g, '\n');
                allContents.push(`--- File: ${relativePath} ---\n\n${normalizedContent}\n\n`);
            } catch (err: unknown) {
                if (err instanceof Error) {
                    console.error(`Error reading file ${fullPath}: ${err.message}`);
                    allContents.push(`--- File: ${relativePath} ---\n\n!!! Error reading file: ${err.message} !!!\n\n`);
                }
            }
        } else {
             // Optional: Log files that are neither excluded nor included
             // console.log(`(?) Skipping (not included): ${relativePath}`);
        }
    }
}

// --- Main Execution ---

async function main(): Promise<void> {
    // Basic argument parsing: tsx scripts/bundle-code.ts [targetDir] [outputFile]
    const args: string[] = process.argv.slice(2);
    const targetDirArg: string | undefined = args[0];
    const outputFileArg: string | undefined = args[1];

    const targetDir: string = path.resolve(targetDirArg || '.'); // Default to current directory
    const outputFilePath: string | null = outputFileArg ? path.resolve(outputFileArg) : null; // Default to console output

    // Load .gitignore before processing
    await loadGitignore(targetDir);

    console.log(`Scanning directory: ${targetDir}`);
    if (outputFilePath) {
        console.log(`Output will be written to: ${outputFilePath}`);
    } else {
        console.log(`Output will be printed to console.`);
    }

    const allContents: string[] = [];
    try {
        // Check if target directory exists
        const stats = await fs.stat(targetDir);
        if (!stats.isDirectory()) {
            throw new Error(`Target path is not a directory: ${targetDir}`);
        }

        await walkDir(targetDir, targetDir, allContents);

        const combinedOutput: string = allContents.join('');

        if (outputFilePath) {
            await fs.writeFile(outputFilePath, combinedOutput);
            console.log(`\n✅ Successfully wrote bundled code to ${outputFilePath}`);
        } else {
            console.log("\n--- BUNDLED CODE OUTPUT ---");
            console.log(combinedOutput);
            console.log("--- END BUNDLED CODE OUTPUT ---");
            console.log(`\n✅ Successfully generated bundled code.`);
        }

    } catch (err: unknown) {
        if (err && typeof err === 'object' && 'code' in err && err.code === 'ENOENT') {
            console.error(`\n❌ Error: Target directory not found: ${targetDir}`);
        } else if (err instanceof Error) {
            console.error(`\n❌ An error occurred: ${err.message}`);
            console.error(err.stack); // Print stack trace for debugging
        }
        process.exit(1); // Exit with error code
    }
}

main();

--- File: scripts/combine-and-shuffle.js ---

const fs = require('fs').promises;
const path = require('path');

async function combineAndShuffleJson() {
  try {
    // Read all files in the data directory
    const dataDir = path.join(__dirname, '..', 'data');
    const files = await fs.readdir(dataDir);
    
    // Filter for JSON files only
    const jsonFiles = files.filter(file => file.endsWith('.json'));
    
    // Array to store all items
    let allItems = [];
    
    // Read and parse each JSON file
    for (const file of jsonFiles) {
      const filePath = path.join(dataDir, file);
      const content = await fs.readFile(filePath, 'utf8');
      try {
        const data = JSON.parse(content);
        if (Array.isArray(data)) {
          allItems = allItems.concat(data);
        } else {
          console.warn(`Warning: ${file} does not contain an array at the root level`);
        }
      } catch (parseError) {
        console.error(`Error parsing ${file}:`, parseError.message);
      }
    }
    
    // Shuffle the array
    for (let i = allItems.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [allItems[i], allItems[j]] = [allItems[j], allItems[i]];
    }
    
    // Write the combined and shuffled data to a new file
    const outputPath = path.join(__dirname, '..', 'data', 'combined-shuffled.json');
    await fs.writeFile(outputPath, JSON.stringify(allItems, null, 2));
    
    console.log(`Successfully combined and shuffled ${allItems.length} items from ${jsonFiles.length} files`);
    console.log(`Output written to: ${outputPath}`);
    
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
}

// Run the script
combineAndShuffleJson(); 

--- File: scripts/generate-routes.ts ---

import fs from 'fs'
import path from 'path'

// Function to get all route paths from the app directory
function getRoutePaths(dir: string, basePath: string = ''): string[] {
  const entries = fs.readdirSync(dir, { withFileTypes: true })
  const paths: string[] = []

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name)
    const routePath = path.join(basePath, entry.name)

    if (entry.isDirectory()) {
      // Skip private folders (starting with _) and api routes
      if (entry.name.startsWith('_') || entry.name === 'api') {
        continue
      }

      // Handle dynamic routes
      const routeName = entry.name.startsWith('[') ? entry.name : null
      if (routeName) {
        // Add the dynamic route pattern
        paths.push(path.join(basePath, '*'))
      } else {
        // Recursively get routes from subdirectories
        paths.push(...getRoutePaths(fullPath, routePath))
      }
    } else if (entry.name === 'page.tsx' || entry.name === 'page.ts') {
      // Add the route path for page files
      paths.push(basePath)
    }
  }

  return paths
}

// Generate the routes file
function generateRoutesFile() {
  const appDir = path.join(process.cwd(), 'app')
  const routePaths = getRoutePaths(appDir)
  
  // Format the paths
  const formattedPaths = routePaths
    .map(p => p.replace(/\\/g, '/')) // Convert Windows paths to forward slashes
    .map(p => p || '/') // Convert empty string to root path
    .sort()

  // Generate the file content
  const fileContent = `// This file is auto-generated. DO NOT EDIT IT MANUALLY.
// It is used to generate the validRoutes for tracking user visits.
// To regenerate, run: pnpm generate:routes

export const validRoutes = new Set([
  ${formattedPaths.map(p => `'${p}'`).join(',\n  ')}
])
`

  // Write the file
  const outputPath = path.join(process.cwd(), 'lib', 'generated', 'routes.ts')
  fs.mkdirSync(path.dirname(outputPath), { recursive: true })
  fs.writeFileSync(outputPath, fileContent)

  console.log('✅ Generated routes file')
}

generateRoutesFile() 

--- File: scripts/init-repo.sh ---

#!/bin/bash

# --- Configuration ---
# Set this to the main branch name you prefer (usually main or master)
MAIN_BRANCH_NAME="main"
# Set to 'true' if you want to automatically confirm Vercel deployments
AUTO_CONFIRM_VERCEL="true"

# --- Error Handling ---
# Exit immediately if a command exits with a non-zero status.
set -e

# Keep track of errors
ERRORS=()

# Function to report errors and exit
handle_error() {
    local command="$1"
    local message="$2"
    ERRORS+=("Error running command: $command")
    ERRORS+=("Details: $message")
    echo "-----------------------------------------------------" >&2
    echo "❌ FATAL ERROR during setup process ❌" >&2
    echo "Command failed: $command" >&2
    echo "Error details: $message" >&2
    echo "Setup process aborted." >&2
    echo "-----------------------------------------------------" >&2
    if [ ${#ERRORS[@]} -gt 0 ]; then
        echo "Summary of errors:" >&2
        for error in "${ERRORS[@]}"; do
            echo "- $error" >&2
        done
    fi
    exit 1
}

# Function to open URL in browser based on OS
open_url() {
    local url=$1
    case "$OSTYPE" in
        "darwin"*) # macOS
            open "$url"
            ;;
        "linux"*) # Linux
            if command -v xdg-open > /dev/null; then
                xdg-open "$url"
            elif command -v gnome-open > /dev/null; then
                gnome-open "$url"
            else
                echo "Could not detect the web browser to use."
            fi
            ;;
        *) # Other OS
            echo "Could not detect the web browser to use."
            ;;
    esac
}

# Function to read value from .env file
get_env_value() {
    local key=$1
    local value=""
    if [ -f ".env" ]; then
        value=$(grep "^${key}=" .env | cut -d '=' -f2)
    fi
    echo "$value"
}

# Function to add or update value in .env file
update_env_file() {
    local key=$1
    local value=$2
    local env_file=".env"
    
    # Create .env if it doesn't exist
    if [ ! -f "$env_file" ]; then
        touch "$env_file"
    fi
    
    # Check if key exists and replace, otherwise add
    if grep -q "^${key}=" "$env_file"; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s|^${key}=.*|${key}=${value}|" "$env_file"
        else
            sed -i "s|^${key}=.*|${key}=${value}|" "$env_file"
        fi
    else
        echo "${key}=${value}" >> "$env_file"
    fi
}

# Function to deploy all env vars to Vercel
deploy_env_to_vercel() {
    local env_file=".env"
    if [ ! -f "$env_file" ]; then
        echo "No .env file found. Skipping environment variable deployment."
        return
    fi

    echo "Deploying environment variables to Vercel..."
    
    # Read each line from .env
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip empty lines and comments
        if [ -z "$line" ] || [[ $line == \#* ]]; then
            continue
        fi
        
        # Extract key and value
        if [[ $line =~ ^([^=]+)=(.*)$ ]]; then
            key="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
            
            # Remove any surrounding quotes from the value
            value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//")
            
            echo "Setting $key in Vercel..."
            
            # Add to environment
            vercel env add "$key" production "$value" > /dev/null 2>&1
        fi
    done < "$env_file"
    
    echo "✅ Environment variables deployed to Vercel"
}

# --- Get User Input ---

echo "🚀 Starting Project Initialization 🚀"
echo ""

# Get current directory name as default repo name
DEFAULT_REPO_NAME=$(basename "$PWD")

# Prompt for the GitHub repository name with default suggestion
read -p "Enter the desired GitHub repository name [$DEFAULT_REPO_NAME]: " REPO_NAME
REPO_NAME=${REPO_NAME:-$DEFAULT_REPO_NAME}

if [ -z "$REPO_NAME" ]; then
  handle_error "User Input" "No repository name provided."
fi

# Prompt for repository visibility with public as default
read -p "Enter repository visibility [public/private]: " REPO_VISIBILITY_INPUT
REPO_VISIBILITY=${REPO_VISIBILITY_INPUT:-"public"}

# Validate repository visibility input
REPO_VISIBILITY=$(echo "$REPO_VISIBILITY" | tr '[:upper:]' '[:lower:]') # Convert to lowercase
if [[ "$REPO_VISIBILITY" != "public" && "$REPO_VISIBILITY" != "private" ]]; then
  handle_error "User Input" "Invalid visibility '$REPO_VISIBILITY_INPUT'. Please enter 'public' or 'private'."
fi

# Get the GitHub username using the authenticated GH CLI
GITHUB_USERNAME=$(gh api user --jq .login 2>/dev/null) || handle_error "gh api user" "Could not retrieve GitHub username. Is 'gh auth login' complete?"

FULL_REPO_NAME="$GITHUB_USERNAME/$REPO_NAME"
GIT_REMOTE_URL="git@github.com:$FULL_REPO_NAME.git" # Using SSH URL

echo ""
echo "--- Project Details ---"
echo "Local Directory: $(pwd)"
echo "GitHub Repository: $FULL_REPO_NAME ($REPO_VISIBILITY)"
echo "Vercel Linking Git URL: $GIT_REMOTE_URL"
echo "Main Branch: $MAIN_BRANCH_NAME"
echo "-----------------------"
echo ""
read -p "Does this look correct? [Y/n]: " confirm
if [[ "$confirm" =~ ^[Nn]$ ]]; then
    echo "Setup cancelled by user."
    exit 1
fi

echo "" # Add space before next section

# --- Step 1: Initialize Git Repository (if not already) ---
echo "--- 1/4: Setting up local Git repository ---"

# Check if .git directory exists. If not, initialize.
if [ ! -d ".git" ]; then
  git init || handle_error "git init" "Failed to initialize Git repository."
  echo "Git repository initialized."
else
  echo "Existing Git repository found."
fi

# Update config.ts with GitHub URL before initial commit if public repo
if [ "$REPO_VISIBILITY" == "public" ]; then
    config_file="lib/config.ts"
    if [ -f "$config_file" ]; then
        # Use sed to update the github field in config.ts
        # The pattern looks for the 'github: ""' line and replaces it with the new URL
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS requires an empty string after -i
            sed -i '' "s|github: \".*\"|github: \"https://github.com/$FULL_REPO_NAME\"|" "$config_file"
        else
            # Linux version
            sed -i "s|github: \".*\"|github: \"https://github.com/$FULL_REPO_NAME\"|" "$config_file"
        fi
        echo "Updated $config_file with GitHub repository URL"
    else
        ERRORS+=("Warning: Could not find $config_file to update GitHub URL")
    fi
fi

# Add all current files and commit
git add . || handle_error "git add ." "Failed to add files to staging."
# Check if there are staged changes before committing
if git diff --cached --quiet; then
    echo "No new changes to commit. Skipping commit step."
else
    git commit -m "Initial commit from init script" || handle_error "git commit" "Failed to create initial commit."
    echo "Initial commit created."
fi


# Ensure the main branch exists and is named correctly
# Use '--force' to rename if it exists with a different case (like master)
if git branch --list | grep -q "\b$MAIN_BRANCH_NAME\b"; then
    echo "Branch '$MAIN_BRANCH_NAME' already exists."
elif git branch --list | grep -q "\bmaster\b" && [ "$MAIN_BRANCH_NAME" == "main" ]; then
    git branch -m $MAIN_BRANCH_NAME || handle_error "git branch -m" "Failed to rename branch from 'master' to '$MAIN_BRANCH_NAME'."
    echo "Renamed 'master' branch to '$MAIN_BRANCH_NAME'."
else
     # Create the branch if it doesn't exist and there's no master to rename
     # This case is less common after git init and commit, but good practice
     # Check if HEAD exists first (implies a commit has been made)
     if git rev-parse --verify HEAD > /dev/null 2>&1; then
        git branch $MAIN_BRANCH_NAME || handle_error "git branch" "Failed to create '$MAIN_BRANCH_NAME' branch."
        git checkout $MAIN_BRANCH_NAME || handle_error "git checkout" "Failed to checkout '$MAIN_BRANCH_NAME' branch."
        echo "Created and checked out '$MAIN_BRANCH_NAME' branch."
     else
         # No commits yet, branch will be created upon first commit/push
         echo "No commits yet, branch '$MAIN_BRANCH_NAME' will be set on push."
     fi
fi
git checkout $MAIN_BRANCH_NAME > /dev/null 2>&1 || handle_error "git checkout" "Failed to ensure checkout of '$MAIN_BRANCH_NAME'."
echo "Ensured checkout of branch '$MAIN_BRANCH_NAME'."


echo "Local Git setup complete."
echo ""

# --- Step 2: Create GitHub Repository and Push ---
echo "--- 2/4: Creating GitHub repository and pushing ---"

# Check if origin remote already exists and points to the correct repo
echo "Checking for existing git remote..."
CURRENT_ORIGIN=$(git remote get-url origin 2>/dev/null || echo "")

if [ -n "$CURRENT_ORIGIN" ]; then
    echo "Found existing remote: $CURRENT_ORIGIN"
    # Normalize the URLs for comparison (both SSH format)
    EXPECTED_URL="git@github.com:$FULL_REPO_NAME.git"
    if [ "$CURRENT_ORIGIN" = "$EXPECTED_URL" ]; then
        echo "✓ Git remote 'origin' already exists and points to correct repository"
        echo "Continuing with existing remote..."
    else
        echo "Warning: Git remote 'origin' exists but points to unexpected repository"
        echo "Current:  $CURRENT_ORIGIN"
        echo "Expected: $EXPECTED_URL"
        handle_error "Git Remote Conflict" "Existing 'origin' remote points to unexpected repository. Please resolve manually."
    fi
else
    echo "No existing remote found. Creating new repository..."
    
    # Create the repository and push in one command
    echo "Creating GitHub repository '$FULL_REPO_NAME' ($REPO_VISIBILITY)..."
    
    CREATE_COMMAND=""
    if [ "$REPO_VISIBILITY" == "private" ]; then
        CREATE_COMMAND="gh repo create \"$REPO_NAME\" --private --source=. --remote=origin --push"
    else
        CREATE_COMMAND="gh repo create \"$REPO_NAME\" --public --source=. --remote=origin --push"
    fi
    
    echo "Executing: $CREATE_COMMAND"
    eval "$CREATE_COMMAND" || {
        echo "Error occurred while creating repository. Exit code: $?"
        handle_error "gh repo create" "Failed to create and push to $REPO_VISIBILITY GitHub repository '$FULL_REPO_NAME'."
    }
    
    echo "GitHub repository created and code pushed successfully."
fi

echo "GitHub setup and push complete."
echo ""

# --- Step 3: Link Project to Vercel and GitHub ---
echo "--- 3/4: Linking project to Vercel and GitHub ---"

# Check if Vercel project is already linked
if vercel status --connected 2>/dev/null; then
    echo "Vercel project is already linked."
else
    echo "Linking project to Vercel..."
    # First link the project
    echo "Running: vercel link"
    vercel link || handle_error "vercel link" "Failed to link project to Vercel."
fi

# Check if Git is already connected
echo "Checking Git connection status..."
if vercel git ls 2>&1 | grep -q "$FULL_REPO_NAME"; then
    echo "✓ GitHub repository $FULL_REPO_NAME is already connected to Vercel"
else
    # Connect to GitHub
    echo "Connecting to GitHub repository..."
    echo "Running: vercel git connect"
    if ! output=$(vercel git connect 2>&1); then
        # Check if the error is just that it's already connected
        if echo "$output" | grep -q "is already connected to your project"; then
            echo "✓ GitHub repository is already connected to Vercel"
        else
            echo "$output"
            handle_error "vercel git connect" "Failed to connect GitHub repository to Vercel."
        fi
    fi
fi

echo "Project linked to Vercel and GitHub connection established."
echo ""

# Set up Clerk environment variables if not in .env
echo ""
echo "Setting up Clerk environment variables..."
echo "These are required for authentication to work. You can find them in your Clerk Dashboard."
echo "Visit https://dashboard.clerk.com/ to get your keys."
echo ""

# Try to get values from .env first
CLERK_PUB_KEY=$(get_env_value "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY")
CLERK_SECRET_KEY=$(get_env_value "CLERK_SECRET_KEY")

# Function to validate Clerk key format
validate_clerk_key() {
    local key=$1
    local key_type=$2
    
    if [ -z "$key" ]; then
        return 1
    fi
    
    # Public key should start with pk_test_ or pk_live_
    if [ "$key_type" = "public" ] && ! [[ $key =~ ^pk_(test|live)_ ]]; then
        return 1
    fi
    
    # Secret key should start with sk_test_ or sk_live_
    if [ "$key_type" = "secret" ] && ! [[ $key =~ ^sk_(test|live)_ ]]; then
        return 1
    fi
    
    return 0
}

# Handle public key
if validate_clerk_key "$CLERK_PUB_KEY" "public"; then
    echo "✓ Using existing NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY from .env"
else
    while ! validate_clerk_key "$CLERK_PUB_KEY" "public"; do
        if [ -n "$CLERK_PUB_KEY" ]; then
            echo "❌ Invalid Clerk publishable key format. It should start with pk_test_ or pk_live_"
        else
            echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY not found in .env"
        fi
        echo "Visit https://dashboard.clerk.com/last-active/api-keys to get your publishable key"
        read -p "Enter your NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: " CLERK_PUB_KEY
    done
    # Only update .env if we had to ask for a new value
    update_env_file "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" "$CLERK_PUB_KEY"
fi

# Handle secret key
if validate_clerk_key "$CLERK_SECRET_KEY" "secret"; then
    echo "✓ Using existing CLERK_SECRET_KEY from .env"
else
    while ! validate_clerk_key "$CLERK_SECRET_KEY" "secret"; do
        if [ -n "$CLERK_SECRET_KEY" ]; then
            echo "❌ Invalid Clerk secret key format. It should start with sk_test_ or sk_live_"
        else
            echo "CLERK_SECRET_KEY not found in .env"
        fi
        echo "Visit https://dashboard.clerk.com/last-active/api-keys to get your secret key"
        read -p "Enter your CLERK_SECRET_KEY: " CLERK_SECRET_KEY
    done
    # Only update .env if we had to ask for a new value
    update_env_file "CLERK_SECRET_KEY" "$CLERK_SECRET_KEY"
fi

# Function to add env var to Vercel for production
add_vercel_env() {
    local key=$1
    local value=$2
    
    echo "----------------------------------------"
    echo "🔄 Setting up $key for production environment"
    
    # First try to remove any existing value
    echo "Removing existing $key from production environment if it exists..."
    vercel env rm "$key" production || {
        echo "Note: No existing variable to remove or removal failed (this is usually ok)"
    }
    
    # Create a temporary file
    local tmp_file
    tmp_file=$(mktemp)
    echo "$value" > "$tmp_file"
    
    # Add the new value
    echo "Adding $key to production environment..."
    echo "Running environment variable add command..."
    if vercel env add "$key" production < "$tmp_file"; then
        echo "✅ Successfully added $key to production environment"
        rm "$tmp_file"
    else
        local exit_code=$?
        echo "❌ Failed to add environment variable"
        echo "Exit code: $exit_code"
        rm "$tmp_file"
        handle_error "vercel env add" "Failed to add $key to Vercel production environment (exit code: $exit_code)"
    fi
    echo "----------------------------------------"
}

# Add variables to production environment
echo "🔐 Setting up Clerk environment variables in Vercel..."
echo ""
add_vercel_env "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" "$CLERK_PUB_KEY"
add_vercel_env "CLERK_SECRET_KEY" "$CLERK_SECRET_KEY"

echo ""
echo "✅ Clerk environment variables have been set up successfully."
echo ""

# --- Step 4: Final Vercel Deployment ---
echo "--- 4/4: Initiating Vercel deployment ---"

VERCEL_DEPLOY_COMMAND="vercel deploy --confirm"
echo "Running: $VERCEL_DEPLOY_COMMAND"
$VERCEL_DEPLOY_COMMAND || handle_error "$VERCEL_DEPLOY_COMMAND" "Failed to initiate Vercel deployment."
echo "Vercel deployment initiated."
echo ""


# --- Completion ---
echo "🎉 Project Initialization Complete! 🎉"
echo "Your project is now:"
echo "- Local Git repository initialized and committed."
echo "- GitHub repository created at https://github.com/$FULL_REPO_NAME"
echo "- Code pushed to the '$MAIN_BRANCH_NAME' branch on GitHub."
echo "- Vercel project linked to the GitHub repository."
echo "- Vercel deployment triggered. Visit your Vercel dashboard to see the status."

# Open Vercel project in browser
echo ""
echo "Opening Vercel project in browser..."
VERCEL_PROJECT_URL=$(vercel project ls --json | grep -o '"url":"[^"]*"' | head -1 | cut -d'"' -f4)
if [ -n "$VERCEL_PROJECT_URL" ]; then
    open_url "https://$VERCEL_PROJECT_URL"
else
    echo "Could not determine Vercel project URL."
fi

if [ ${#ERRORS[@]} -gt 0 ]; then
    echo ""
    echo "⚠️ Warnings and Non-Fatal Issues Encountered: ⚠️"
    for error in "${ERRORS[@]}"; do
        # Filter out the fatal error header if it was added by handle_error
        if [[ "$error" != *"FATAL ERROR"* && "$error" != *"Summary of errors:"* && "$error" != *"- Error running command:"* && "$error" != *"- Details:"* ]]; then
            echo "- $error"
        fi
    done
    echo "Please review the output above for details."
fi

exit 0


--- File: scripts/seed.ts ---

import { ConvexHttpClient } from "convex/browser";
import { api } from "../convex/_generated/api";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

async function main() {
  const client = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

  try {
    await client.mutation(api.seed.seed, {});
    console.log("✅ Successfully seeded the database");
  } catch (error) {
    console.error("❌ Failed to seed the database:", error);
  }
}

main(); 

--- File: tailwind.config.ts ---

import type { Config } from "tailwindcss"
import tailwindcssAnimate from "tailwindcss-animate"
import typography from '@tailwindcss/typography'

const config = {
  darkMode: "class",
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar))",
          foreground: "hsl(var(--sidebar-foreground))",
          border: "hsl(var(--sidebar-border))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        float: {
          "0%, 100%": { transform: "translateY(0)" },
          "50%": { transform: "translateY(-20px)" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        float: "float 15s ease-in-out infinite",
      },
      typography: {
        DEFAULT: {
          css: {
            maxWidth: 'none',
            color: 'hsl(var(--foreground))',
            a: {
              color: 'hsl(var(--primary))',
              textDecoration: 'underline',
              fontWeight: '500',
            },
            h1: {
              color: 'hsl(var(--foreground))',
            },
            h2: {
              color: 'hsl(var(--foreground))',
            },
            h3: {
              color: 'hsl(var(--foreground))',
            },
            h4: {
              color: 'hsl(var(--foreground))',
            },
            code: {
              color: 'hsl(var(--foreground))',
              backgroundColor: 'hsl(var(--muted))',
              borderRadius: '0.25rem',
              padding: '0.15rem 0.3rem',
            },
            pre: {
              backgroundColor: 'hsl(var(--muted))',
              borderRadius: '0.5rem',
              padding: '1rem',
            },
            blockquote: {
              color: 'hsl(var(--muted-foreground))',
              borderLeftColor: 'hsl(var(--border))',
            },
            hr: {
              borderColor: 'hsl(var(--border))',
            },
            strong: {
              color: 'hsl(var(--foreground))',
            },
            thead: {
              color: 'hsl(var(--foreground))',
              borderBottomColor: 'hsl(var(--border))',
            },
            tbody: {
              tr: {
                borderBottomColor: 'hsl(var(--border))',
              },
            },
          },
        },
      },
    },
  },
  plugins: [
    tailwindcssAnimate,
    typography,
  ],
} satisfies Config

export default config



--- File: tests/admin.spec.ts ---

import { test, expect } from '@playwright/test';
import { setupAuthenticatedUser, setupCleanDatabase } from './utils/test-helpers';

test('should not be public', async ({ page }) => {
  await page.goto('/admin');
  await expect(page.getByRole('heading', { name: 'Access Denied' })).toBeVisible();
  await expect(page.getByRole('heading', { name: 'Development Environment' })).toBeVisible();
});

test('should load the admin dashboard', async ({ page }) => {
  // Reset database before this test
    await setupCleanDatabase();
    
    // Login as test user
    await setupAuthenticatedUser(page);
    
    // Navigate to the page
    await page.goto('/admin');
    await expect(page.getByRole('heading', { name: 'Admin Dashboard' })).toBeVisible();
});

test('can upload ideas', async ({ page }) => {
  // Reset database before this test
    await setupCleanDatabase();
    
    // Login as test user
    await setupAuthenticatedUser(page);

    // Navigate to the page
    await page.goto('/admin/ideas');
    await expect(page.getByRole('heading', { name: 'Manage Ideas' })).toBeVisible();
    await page.setInputFiles('input[type="file"]', 'tests/fixtures/productivity_ideas.json');
    await page.getByRole('button', { name: 'Import' }).click();
    await expect(page.getByText('Successfully imported 20 ideas')).toBeVisible();
    await expect(page.getByRole('cell', { name: 'FocusFlow' })).toBeVisible();
    await expect(page.getByRole('cell', { name: 'A distraction blocker that' })).toBeVisible();
});

test('can view analytics', async ({ page }) => {
  // Reset database before this test
    await setupCleanDatabase();
    
    // Login as test user
    await setupAuthenticatedUser(page);
    
    // Navigate to the page
    await page.goto('/admin/analytics');
    await expect(page.getByRole('heading', { name: 'Analytics' })).toBeVisible();
    await expect(page.getByRole('heading', { name: 'Total Visits (30 Days)' })).toBeVisible();
    await expect(page.getByRole('heading', { name: 'Recent Visits' })).toBeVisible();
});

test('can view mailing list', async ({ page }) => {
  // Reset database before this test
    await setupCleanDatabase();
    
    // Login as test user
    await setupAuthenticatedUser(page);

    // Navigate to the page
    await page.goto('/admin/mailing-list');
    await expect(page.getByRole('heading', { name: 'Mailing List' })).toBeVisible();    
});
  

--- File: tests/auth.spec.ts ---

import { test, expect } from '@playwright/test';

test('should be able to fill out the sign up form', async ({ page }) => {
  await page.goto('http://localhost:3000');
  await page.getByRole('button', { name: 'Sign Up' }).click();
  await page.getByRole('textbox', { name: 'Email address' }).fill('hey@gmail.com');
  await page.getByRole('textbox', { name: 'Password' }).fill('GoodVibrations');
  await expect(page.getByRole('button', { name: 'Continue' })).toBeVisible();
});


--- File: tests/contact.spec.ts ---

import { test, expect } from '@playwright/test';

test('should be able to fill out the contact form', async ({ page }) => {
  await page.goto('http://localhost:3000/contact');
  await expect(page.getByText('Contact Us')).toBeVisible();
  await page.getByRole('textbox', { name: 'Name' }).fill('Kickin Poppin');
  await page.getByRole('textbox', { name: 'Email' }).fill('kickin@poppin.com');
  await page.getByRole('textbox', { name: 'Message' }).fill('Hey Yo');
});


--- File: tests/fixtures/productivity_ideas.json ---

[
  {
    "name": "FocusFlow",
    "description": "A distraction blocker that uses AI to detect when you're losing focus and gently nudges you back on track.",
    "imageUrl": "https://images.unsplash.com/photo-1517841905240-472988babdf9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/focusflow"
  },
  {
    "name": "TaskTide",
    "description": "A to-do app that visualizes your daily tasks as waves, encouraging you to ride the productivity tide.",
    "imageUrl": "https://images.unsplash.com/photo-1507525428034-b723cf961d3e?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/tasktide"
  },
  {
    "name": "ZenWriter",
    "description": "A minimalist writing app with ambient sounds and focus modes to help you get into the writing zone.",
    "imageUrl": "https://images.unsplash.com/photo-1464983953574-0892a716854b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/zenwriter"
  },
  {
    "name": "HabitHarbor",
    "description": "Track habits and build streaks with a calming harbor theme and gentle reminders.",
    "imageUrl": "https://images.unsplash.com/photo-1502082553048-f009c37129b9?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/habitharbor"
  },
  {
    "name": "TimeGarden",
    "description": "Grow a virtual garden as you complete tasks and stay productive throughout the day.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/timegarden"
  },
  {
    "name": "MeetingMinder",
    "description": "Smart meeting scheduler that finds the best time for everyone and sends reminders with a friendly vibe.",
    "imageUrl": "https://images.unsplash.com/photo-1517245386807-bb43f82c33c4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/meetingminder"
  },
  {
    "name": "IdeaNest",
    "description": "A collaborative space for brainstorming and organizing ideas with mind maps and sticky notes.",
    "imageUrl": "https://images.unsplash.com/photo-1503676382389-4809596d5290?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/ideanest"
  },
  {
    "name": "BreakBuddy",
    "description": "Reminds you to take healthy breaks and suggests quick activities to recharge your mind.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/breakbuddy"
  },
  {
    "name": "InboxZeroHero",
    "description": "Gamifies your email inbox, helping you reach inbox zero with fun challenges and rewards.",
    "imageUrl": "https://images.unsplash.com/photo-1519389950473-47ba0277781c?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/inboxzerohero"
  },
  {
    "name": "PomodoroPal",
    "description": "A playful Pomodoro timer with customizable themes and productivity stats.",
    "imageUrl": "https://images.unsplash.com/photo-1509228468518-180dd4864904?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/pomodoropal"
  },
  {
    "name": "ClarityBoard",
    "description": "A digital whiteboard for organizing thoughts, tasks, and projects visually.",
    "imageUrl": "https://images.unsplash.com/photo-1515168833906-d2a3b82b3029?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/clarityboard"
  },
  {
    "name": "SyncSpace",
    "description": "A real-time collaboration tool for remote teams to sync up and share progress.",
    "imageUrl": "https://images.unsplash.com/photo-1515378791036-0648a3ef77b2?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/syncspace"
  },
  {
    "name": "GoalGlider",
    "description": "Set, track, and celebrate your goals with a smooth, animated interface.",
    "imageUrl": "https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/goalglider"
  },
  {
    "name": "RoutineRhythm",
    "description": "Build and maintain daily routines with music and rhythm-based reminders.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/routinerhythm"
  },
  {
    "name": "QuickCapture",
    "description": "Instantly capture notes, links, and ideas with a single click and organize them later.",
    "imageUrl": "https://images.unsplash.com/photo-1464983953574-0892a716854b?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/quickcapture"
  },
  {
    "name": "ProjectPulse",
    "description": "Monitor your project's health and progress with real-time dashboards and alerts.",
    "imageUrl": "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/projectpulse"
  },
  {
    "name": "MindfulMinutes",
    "description": "Track your mindfulness and meditation sessions to boost productivity and well-being.",
    "imageUrl": "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/mindfulminutes"
  },
  {
    "name": "FileFerry",
    "description": "A drag-and-drop file organizer that helps you keep your digital workspace tidy.",
    "imageUrl": "https://images.unsplash.com/photo-1511671782779-c97d3d27a1d4?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/fileferry"
  },
  {
    "name": "CalendarCanvas",
    "description": "A creative calendar app that lets you paint your schedule and visualize your time.",
    "imageUrl": "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/calendarcanvas"
  },
  {
    "name": "EnergyEcho",
    "description": "Track your energy levels throughout the day and get personalized productivity tips.",
    "imageUrl": "https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?auto=format&fit=crop&w=800&q=80",
    "srcUrl": "https://github.com/example/energyecho"
  }
] 

--- File: tests/global-setup.ts ---

import { setupTestDatabase } from "./utils/db-reset"

/**
 * Global setup function that runs before all tests
 */
export default async function globalSetup() {
  await setupTestDatabase()
} 

--- File: tests/ideas.spec.ts ---

import { test, expect } from '@playwright/test';
import { setupAuthenticatedUser, setupSeededDatabase } from './utils/test-helpers';

test('should display preview for guests', async ({ page }) => {
  await page.goto('/');
  await page.getByRole('button', { name: 'Start Swiping' }).click();
  await expect(page.getByRole('heading', { name: 'Sign up to explore all ideas' })).toBeVisible();
  await page.getByRole('button', { name: 'Sign up / Sign in' }).click();
  await expect(page.getByRole('heading', { name: 'Sign in to vibecode.party' })).toBeVisible();
  await page.getByRole('button', { name: 'Close modal' }).click();
  await page.getByRole('button', { name: 'Preview Ideas' }).click();
  await page.getByRole('button').nth(1).click();
  await page.waitForTimeout(500);
  await page.getByRole('button').first().click();
  await page.waitForTimeout(500);
  await page.getByRole('button').nth(1).click();
  await page.waitForTimeout(500);
  await page.getByRole('button').first().click();
  await page.waitForTimeout(500);
  await page.getByRole('button').nth(1).click();
  await page.waitForTimeout(500);
  await page.getByRole('button').first().click();
  await expect(page.getByRole('heading', { name: 'We hope you enjoyed the' })).toBeVisible();
  await page.getByRole('button', { name: 'Sign up to Continue' }).click();
  await expect(page.getByRole('heading', { name: 'Sign in to vibecode.party' })).toBeVisible();
});

test('should swipe through ideas for authenticated user', async ({ page }) => {
  // Reset database and seed it with test data before this test
  await setupSeededDatabase();
    
  // Login as test user
  await setupAuthenticatedUser(page);
    
  // Navigate to the page
  await page.goto('/');
  await page.getByRole('button', { name: 'Start Swiping' }).click();
  await expect(page.locator('#idea-carousel')).toBeVisible();
  await page.getByRole('button').nth(1).click();
  await page.waitForTimeout(1000);
  await page.getByRole('button').first().click();
  await page.waitForTimeout(1000);
  await page.getByRole('button').nth(1).click();
  await page.waitForTimeout(1000);
  await page.getByRole('button').first().click();
  await page.waitForTimeout(1000);
  await page.getByRole('button').nth(1).click();
  await page.waitForTimeout(1000);
  await page.getByRole('button').first().click();
  await page.waitForTimeout(1000);
  await page.getByRole('button').nth(1).click();
  await expect(page.getByRole('heading', { name: 'You\'ve seen all ideas!' })).toBeVisible();
  await page.getByRole('link', { name: 'View Matches' }).click();
  await expect(page.getByRole('heading', { name: 'Your Matches' }).locator('span')).toBeVisible();
  await expect(page.getByRole('heading', { name: 'Your Matches' }).locator('span')).toBeVisible();
  await expect(page.getByText('MoodTunes')).toBeVisible();
  await expect(page.getByText('Focus Forest')).toBeVisible();
  await expect(page.getByText('PetMatch')).toBeVisible();
  await page.getByRole('button', { name: 'Copy PRD Prompt' }).first().click();
  await expect(page.getByText('PRD prompt copied!').nth(1)).toBeVisible();
});

--- File: tests/subscribe.spec.ts ---

import { test, expect } from '@playwright/test';
import { setupAuthenticatedUser, setupCleanDatabase } from './utils/test-helpers';
import { ConvexHttpClient } from "convex/browser";
import { api } from "@/convex/_generated/api";
import { Doc } from "@/convex/_generated/dataModel";

type MailingListSubscription = Doc<"mailing_list_subscriptions">;

// Initialize Convex client for test verification
const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

// Helper function to safely cast Convex response
async function getSubscriptions() {
  const response = await convex.query(api.mailingList.getSubscriptions);
  return response as unknown as MailingListSubscription[];
}

test('should have to sign in to subscribe', async ({ page }) => {
  await page.goto('http://localhost:3000/mailing-list');
  await expect(page.getByText('Please sign in to subscribe')).toBeVisible();
});

test('should be able to subscribe to the mailing list when signed in', async ({ page }) => {
  // Reset database before this test
  await setupCleanDatabase();
  
  // Login as test user
  await setupAuthenticatedUser(page);

  // Subscribe
  await page.goto('http://localhost:3000/mailing-list');
  
  // Wait for the form to be ready
  await page.waitForSelector('button:has-text("Subscribe")');

  // Click subscribe and wait for navigation/refresh
  await page.getByRole('button', { name: 'Subscribe' }).click();
  await page.waitForLoadState('networkidle');
  
  // Check for success message
  const toastText = await page.getByText('Successfully subscribed').textContent();
  console.log('Toast message:', toastText);
  
  // Check subscription status
  const statusText = await page.getByText('You are currently subscribed').textContent();
  console.log('Status message:', statusText);

  // Verify the document in Convex
  const subscriptions = await getSubscriptions();
  const subscription = subscriptions.find(s => s.email === 'john.polacek@gmail.com');
  expect(subscription).toBeTruthy();
  expect(subscription?.email).toBe('john.polacek@gmail.com');
  expect(subscription?.subscribedAt).toBeTruthy();
  expect(subscription?.unsubscribedAt).toBeNull();

  // Navigate to admin and check list
  await page.goto('http://localhost:3000/admin/mailing-list');
  await page.waitForLoadState('networkidle');

  // Wait for page to load and data to be fetched
  await expect(page.getByRole('heading', { name: 'Mailing List Subscribers' })).toBeVisible();
  
  // Check if email is in the list
  const emailCell = page.getByRole('cell', { name: 'john.polacek@gmail.com' });
  const isEmailVisible = await emailCell.isVisible();
  console.log('Email visible in admin list:', isEmailVisible);
  await expect(emailCell).toBeVisible();
  
  // Unsubscribe
  await page.goto('http://localhost:3000/mailing-list');
  await page.getByRole('button', { name: 'Unsubscribe' }).click();
  await expect(page.getByText('Subscribe to Our Mailing List')).toBeVisible();
  await page.goto('http://localhost:3000/admin/mailing-list');
  await expect(page.getByRole('cell', { name: 'john.polacek@gmail.com' })).toBeVisible();
  await expect(page.getByText('Unsubscribed')).toBeVisible();

  // Verify unsubscribe in Convex
  const updatedSubscriptions = await getSubscriptions();
  const unsubscription = updatedSubscriptions.find(s => s.email === 'john.polacek@gmail.com');
  expect(unsubscription).toBeTruthy();
  expect(unsubscription?.unsubscribedAt).toBeTruthy();
});


--- File: tests/utils/auth-helpers.ts ---

import { Page, expect } from '@playwright/test';
import { clerk, clerkSetup } from '@clerk/testing/playwright';

/**
 * Login credentials for test user
 */
export const TEST_USER = {
  email: process.env.TEST_USER_EMAIL!,
  password: process.env.TEST_USER_PASSWORD!,
  fullName: process.env.TEST_USER_FULL_NAME!,
  username: process.env.TEST_USER_USERNAME!,
  userId: process.env.TEST_USER_ID!
};

/**
 * Login a test user using Clerk authentication
 * @param page - Playwright page object
 */
export async function loginTestUser(page: Page): Promise<void> {
  
  // Mask password in logs
  const { email, password, fullName, username, userId } = TEST_USER;
  console.log('[loginTestUser] TEST_USER:', { email, password: password ? '***' : undefined, fullName, username, userId });

  // Navigate to an unprotected page that loads Clerk
  await page.goto('/');

  // Setup Clerk for testing
  console.log('[loginTestUser] Running clerkSetup...');
  await clerkSetup();
  console.log('[loginTestUser] clerkSetup complete');

  // Use Clerk's testing utilities to sign in
  console.log('[loginTestUser] Calling clerk.signIn...');
  try {
    await clerk.signIn({
      page,
      signInParams: {
        strategy: 'password',
        identifier: TEST_USER.email,
        password: TEST_USER.password
      }
    });
    console.log('[loginTestUser] clerk.signIn succeeded');
  } catch (err) {
    console.error('[loginTestUser] clerk.signIn failed:', err);
    throw err;
  }

  // Navigate to the home page and verify we're logged in
  console.log('[loginTestUser] Navigating to home page...');
  await page.goto('/');
  try {
    await expect(page.getByRole('button', { name: 'Open user button' })).toBeVisible({timeout: 30000});
    console.log('[loginTestUser] User button is visible, login successful');
  } catch (err) {
    console.error('[loginTestUser] User button not visible after login:', err);
    throw err;
  }
}

/**
 * Helper function to fill in login credentials and wait for successful login
 */
export async function fillLoginCredentials(page: Page): Promise<void> {
  await page.getByRole('textbox', { name: 'Email address' }).fill(TEST_USER.email);
  await page.waitForTimeout(500);
  await page.getByRole('button', { name: 'Continue' }).click();
  await page.waitForTimeout(500);
  await page.getByRole('textbox', { name: 'Password' }).fill(TEST_USER.password);
  await page.waitForTimeout(1000);
  await page.getByRole('button', { name: 'Continue' }).click();
  await expect(page.getByRole('button', { name: 'Open user button' })).toBeVisible({timeout: 30000});
}

/**
 * Logout the current user
 * @param page - Playwright page object
 */
export async function logoutUser(page: Page): Promise<void> {
  // Navigate to an unprotected page that loads Clerk
  await page.goto('/');
  
  await clerk.signOut({ page });
  await page.waitForTimeout(500);
} 

--- File: tests/utils/db-reset.ts ---

import { ConvexHttpClient } from "convex/browser"
import { api } from "@/convex/_generated/api"
import dotenv from 'dotenv'

dotenv.config()
const NODE_ENV = process.env.NODE_ENV || 'test'

// Ensure we're in test environment
if (NODE_ENV !== 'test' && NODE_ENV !== 'development') {
  throw new Error('Database reset utilities should only be used in test or development environment')
}

// Initialize Convex client
const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!)

const TABLES_TO_RESET = ['mailing_list_subscriptions', 'visits', 'idea_swipes', 'ideas'] as const
// Restrict to allowed table names for type safety
type TableName = typeof TABLES_TO_RESET[number]

/**
 * Delete all documents in a table
 */
export async function deleteCollection(tableName: TableName): Promise<void> {
  try {
    await convex.mutation(api.testing.deleteAll, { tableName })
    console.log(`Deleted all documents from ${tableName}`)
  } catch (error) {
    console.warn(`Warning: Failed to delete table ${tableName}:`, error)
  }
}

/**
 * Reset database for testing
 */
export async function resetDatabase(): Promise<void> {
  console.log('Resetting database...')
  for (const table of TABLES_TO_RESET) {
    await deleteCollection(table)
  }
  console.log('Database reset complete')
}

/**
 * Seed test data using Convex test mutation
 */
export async function seedTestData(): Promise<void> {
  console.log('Seeding test data...')
  await convex.mutation(api.testing.seedTestData, {})
  console.log('Test data seeding complete')
}

/**
 * Verify that all tables are empty
 */
export async function verifyDatabaseReset(): Promise<boolean> {
  try {
    for (const table of TABLES_TO_RESET) {
      const count = await convex.query(api.testing.countDocuments, { tableName: table })
      if (count > 0) {
        console.error(`Table ${table} is not empty`)
        return false
      }
    }
    return true
  } catch (error) {
    console.error('Error verifying database reset:', error)
    return false
  }
}

/**
 * Reset database for testing
 */
export async function setupTestDatabase(): Promise<void> {
  await resetDatabase()
  const isReset = await verifyDatabaseReset()
  if (!isReset) {
    throw new Error('Failed to reset database')
  }
} 

--- File: tests/utils/test-helpers.ts ---

import { test, expect, Page } from '@playwright/test';
import { resetDatabase, seedTestData } from './db-reset';
import { loginTestUser, logoutUser } from './auth-helpers';

/**
 * Reset the database before a test or group of tests
 */
export async function setupCleanDatabase() {
  await resetDatabase();
}

/**
 * Reset the database and seed it with test data
 */
export async function setupSeededDatabase() {
  await resetDatabase();
  await seedTestData();
}

/**
 * Login a test user
 * @param page - Playwright page object
 */
export async function setupAuthenticatedUser(page: Page) {
  await loginTestUser(page);
}

/**
 * Logout a user
 * @param page - Playwright page object
 */
export async function teardownAuthenticatedUser(page: Page) {
  await logoutUser(page).catch(e => console.warn('Failed to logout:', e));
}

// Export test and expect for convenience
export { test, expect }; 

--- File: tsconfig.json ---

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


--- File: types/mailing-list.ts ---

export interface MailingListPreferences {
  marketing: boolean
  updates: boolean
}

export interface MailingListSubscription {
  id: string
  user_id: string
  email: string
  name: string | null
  subscribed_at: string
  unsubscribed_at: string | null
  preferences: MailingListPreferences
  created_at: string
  updated_at: string
}

export type CreateMailingListSubscription = Pick<MailingListSubscription, 'user_id' | 'email' | 'name'> & {
  preferences?: Partial<MailingListPreferences>
}

export type UpdateMailingListSubscription = Partial<Pick<MailingListSubscription, 'name' | 'unsubscribed_at'>> & {
  preferences?: Partial<MailingListPreferences>
} 

--- File: types/supabase.ts ---

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      user_visits: {
        Row: {
          id: string
          user_id: string | null
          path: string
          referrer: string | null
          timestamp: string
          created_at: string
          updated_at: string
          user_agent: string | null
        }
        Insert: {
          id?: string
          user_id?: string | null
          path: string
          referrer?: string | null
          timestamp?: string
          created_at?: string
          updated_at?: string
          user_agent?: string | null
        }
        Update: {
          id?: string
          user_id?: string | null
          path?: string
          referrer?: string | null
          timestamp?: string
          created_at?: string
          updated_at?: string
          user_agent?: string | null
        }
      }
      mailing_list_subscriptions: {
        Row: {
          id: string
          user_id: string
          email: string
          name: string | null
          subscribed_at: string
          unsubscribed_at: string | null
          preferences: {
            marketing: boolean
            updates: boolean
          }
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          user_id: string
          email: string
          name?: string | null
          subscribed_at?: string
          unsubscribed_at?: string | null
          preferences?: {
            marketing: boolean
            updates: boolean
          }
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          email?: string
          name?: string | null
          subscribed_at?: string
          unsubscribed_at?: string | null
          preferences?: {
            marketing: boolean
            updates: boolean
          }
          created_at?: string
          updated_at?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
  }
}


